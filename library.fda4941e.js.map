{"mappings":"ysBAEA,IAAAA,EAAAC,EAAA,S,aAAOC,EAuCJ,W,sBAvCUC,I,kCACJC,IAAA,oB,MAAP,SAAyBC,EAASC,GAChC,IAAMC,EAAMC,EAAyBF,GACrCC,EAAIE,KAAKJ,GACTK,aAAaC,QAAQ,GAAUC,OAAPN,GAAUO,KAAKC,UAAUP,G,IAE5CH,IAAA,oB,MAAP,SAAyBW,EAAQT,GAC/B,IAAMU,EAAQC,EAAaF,EAAQT,GACnCY,QAAQC,IAAIH,GACZ,IAAMI,EAAYZ,EAAyBF,GAC3Cc,EAAUC,OAAOL,EAAO,GACxBN,aAAaC,QAAQ,GAAUC,OAAPN,GAAUO,KAAKC,UAAUM,G,IAG5ChB,IAAA,qB,MAAP,SAA0BE,EAAQgB,GAChC,IAAMC,EAAQf,EAAyBF,GACjCkB,EAAOD,EAAME,OACfF,EAAMG,IAAIC,GAAmBC,KAAK,IAClC,iDAAqEhB,OAATU,EAAS,mBAC9DO,SAASC,cAAc,oBAAoBC,UAAYP,C,IAGlDpB,IAAA,uB,MAAP,SAA4BW,GAC1B,OAA6C,IAAzCE,EAAaF,EAAQ,gBAChB,CAAC,MAAO,kBAER,CAAC,SAAU,sB,IAIfX,IAAA,qB,MAAP,SAA0BW,GACxB,OAA2C,IAAvCE,EAAaF,EAAQ,cAChB,CAAC,MAAO,gBAER,CAAC,SAAU,oB,OAKhC,GAAQ,SAASP,EAAyBF,GAChC,OAAOO,KAAKmB,MAAMtB,aAAauB,QAAQ,GAAUrB,OAAPN,KAAa,K,CAGzD,SAASW,EAAaF,EAAQT,GAE5B,OADkBE,EAAyBF,GAC1B4B,WAAU,SAAAC,G,OAAQA,EAAKC,KAAOrB,C,IASjD,SAASY,EAAkBQ,GACzB,IAEME,EAAO,IAAIC,KAAKH,EAAKI,cAAcC,cACnCC,EAA8BN,EAAKO,OATxBhB,KAAI,SAAAiB,GACnB,OAAOA,EAAYC,I,IASfC,EACJJ,EAAWhB,OAAS,EAChBgB,EAAWK,MAAM,EAAG,GAAGlB,KAAK,MAAQ,OACpCa,EAAWb,KAAK,MACtB,MAAO,kEAE4ChB,OADfuB,EAAKC,GAAG,4DAE1CxB,OADiDuB,EAAKY,YAAY,WAE5CnC,OADtBuB,EAAKa,MACN,0BAE+BpC,OAb9B,wGAW0B,2DAIGA,OAFCuB,EAAKa,MAAM,0EAEuCpC,OAAnDiC,EAAiB,oCACTjC,OAD2CyB,EAAK,0DACnBzB,OAA7BuB,EAAKc,aAAaC,QAAQ,GAAG,qC,uCC1EjF,aACAC,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyBC,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,oC,uCCP5B,aAUA,SAASC,EAAkBC,EAAQC,GAC/B,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAMrC,OAAQsC,IAAI,CACjC,IAAIC,EAAaF,EAAMC,GACvBC,EAAWC,WAAaD,EAAWC,aAAc,EACjDD,EAAWE,cAAe,EACtB,UAAWF,IAAYA,EAAWG,UAAW,GACjDhB,OAAOC,eAAeS,EAAQG,EAAW5D,IAAK4D,E,EAftDb,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAsBE,EAAaU,EAAYC,GACvCD,GAAYR,EAAkBF,EAAYY,UAAWF,GACrDC,GAAaT,EAAkBF,EAAaW,GAChD,OAAOX,C,uCCRX,IAAAa,EAAAtE,EAAA,SAEMuE,EAAO,CACXC,aAAc5C,SAASC,cAAc,0BACrC4C,cAAe7C,SAASC,cAAc,2BACtC6C,MAAO9C,SAASC,cAAc,qBAC9B8C,aAAc/C,SAASC,cAAc,mBACrC+C,YAAahD,SAASC,cAAc,iBACpCgD,UAAWjD,SAASC,cAAc,wBAClCiD,SAAUlD,SAASmD,eAAe,aAClCC,QAASpD,SAASmD,eAAe,YACjCE,eAAgBrD,SAASC,cAAc,cACvCqD,UAAWtD,SAASC,cAAc,wBAGpC0C,EAAKC,aAAaW,iBAAiB,SAa5B,SAAmBC,GAExBb,EAAKG,MAAMW,UAAUC,OAAO,UAE5B1D,SAAS2D,KAAKF,UAAUG,IAAI,mBAE5B5D,SAAS2D,KAAKE,MAAMC,SAAW,QAC/B9D,SAAS2D,KAAKE,MAAME,IAAM,IAAmBhF,OAAfiF,OAAOC,QAAQ,K,IAnB/CtB,EAAKE,cAAcU,iBAAiB,SAsB7B,SAAoBC,GACzBb,EAAKG,MAAMW,UAAUG,IAAI,UACzB,IAAMK,EAAUjE,SAAS2D,KAAKE,MAAME,IACtC/D,SAAS2D,KAAKE,MAAMC,SAAW,GAC/B9D,SAAS2D,KAAKE,MAAME,IAAM,GAC1BC,OAAOE,SAAS,GAA8B,EAA3BC,SAASF,GAAW,K,IA1BvCtB,EAAKK,YAAYO,iBAAiB,SA8BlC,WACEZ,EAAKI,aAAaU,UAAUC,OAAO,UACnCf,EAAKM,UAAUQ,UAAUG,IAAI,S,IA/B/BjB,EAAKU,eAAeE,iBAAiB,SAkCrC,WACEZ,EAAKI,aAAaU,UAAUG,IAAI,UAChCjB,EAAKM,UAAUQ,UAAUC,OAAO,S,IAnClCf,EAAKO,SAASK,iBAAiB,SAAUb,EAAA0B,iBACzCzB,EAAKS,QAAQG,iBAAiB,SAAUb,EAAA2B,cAExCrE,SAASuD,iBAAiB,WAAW,SAAAC,GACpB,WAAXA,EAAEc,MACJ3B,EAAKG,MAAMW,UAAUG,IAAI,S,6JCxB7B,IAAAW,EAAAnG,EAAA,S,uDAgBY,EAAAmG,EAAAC,eAXW,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YACE,yEACFC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAKF,SAASC,EAAaC,GAC3BA,EAAIC,iBACJ,IAAMC,EAAWnF,SAASmD,eAAe,iBACnCiC,EAAQpF,SAASmD,eAAe,kBAChCkC,EAAWrF,SAASmD,eAAe,qBACzC,KAAK,EAAAmC,EAAA3D,SAAcwD,EAASzD,MAAO0D,EAAM1D,MAAO2D,EAAS3D,OAEvD,OAAO6D,MAAM,6BAEf,IAAMC,GAAK,EAAAC,EAAAC,eACLC,GAAQ,EAAAF,EAAAG,KAAIJ,IAElB,EAAAC,EAAAI,MAAI,EAAAJ,EAAAK,OAAMH,EAAO,aAAeR,EAASzD,QAAQqE,MAAK,SAAAC,GAChDA,EAASC,SAEXV,MAAM,yBAEN,EAAAE,EAAAS,MAAI,EAAAT,EAAAG,KAAIJ,EAAI,aAAeL,EAASzD,OAAQ,CAC1CyD,SAAUA,EAASzD,MACnB0D,MAAOA,EAAM1D,MACb2D,SAAUA,EAAS3D,QAGlBqE,KAAKR,MAAM,oCACXQ,KAAK/F,SAASmD,eAAe,YAAYgD,SACzCC,MAAM/G,QAAQC,I,IAKhB,SAAS+G,EAAgBpB,GAC9BA,EAAIC,iBACJ,IAAMM,GAAK,EAAAC,EAAAC,eACLP,EAAWnF,SAASmD,eAAe,iBACnCkC,EAAWrF,SAASmD,eAAe,qBACnCwC,GAAQ,EAAAF,EAAAG,KAAIJ,IAElB,EAAAC,EAAAI,MAAI,EAAAJ,EAAAK,OAAMH,EAAO,aAAeR,EAASzD,QAAQqE,MAAK,SAAAC,GACpD,IAAIA,EAASC,SAWX,OAAOV,MAAM,wBAVb,IAgBSe,EAQPC,EACAC,EAEAC,EA3BUT,EAASU,MAAMrB,WACbA,EAAS3D,QACrB6D,MAAM,0CAAyDxG,OAAfoG,EAASzD,MAAM,OAcxD4E,EATDN,EAASU,MAUrBC,eAAe7H,QAAQ,WAAYE,KAAKC,UAAUqH,IAClDtG,SAASC,cAAc,cAAc2G,QAM/BL,EAAcvH,KAAKmB,MAAMwG,eAAevG,QAAQ,aAAa+E,SAC7DqB,EAAcxG,SAASmD,eAAe,qBAEtCsD,EAAO,2KAM4C1H,OAAZwH,EAAY,oBAEzDC,EAAYtG,UAAYuG,EACxBzG,SAASC,cAAc,mBAAmBwD,UAAUG,IAAI,UAIxC5D,SAASmD,eAAe,gBAChCI,iBAAiB,QAASsD,EAAAlF,S;;;;;;;;;;;;;;;;;yiBChEd,W,wBAEImF,GAChBC,EAAkB5I,E,CAAW6I,KAAOC,G,eACrCH,C,UAI2BI,E,CAAAD,EAAA,C,8CAc3B,OAXRD,KAAAF,UAAAK,eAWQtH,KAAA,SAASuH,GAClB,G,6EAAAC,CAAAD,GAAA,C,uECzDA,Y,oDDkCsB,I,IEmGtBE,E,+BAjFGC,EAAA,MAAAC,EAAAC,QAAA,iBA+EFC,EAAA,YAQCC,GAAYL,EAAQ,GAAAP,EAAAa,EAAA,CAAAN,EAAAO,EAAA,aAAAd,EAAAa,EAAA,CAAAN,EAtFrB,uBAsFqB,oBAAAP,EAAAa,EAAA,CAAAN,EA5Ee,sBA4Ef,kBAAAP,EAAAa,EAAA,CAAAN,EAhFN,6BAgFM,yBAAAP,EAAAa,EAAA,CAAAN,EAzEtB,sBAyEsB,kBAAAP,EAAAa,EAAA,CAAAN,EA3ErB,6BA2EqB,yBAAAP,EAAAa,EAAA,CAAAN,EA/DY,iBA+DZ,aAAAP,EAAAa,EAAA,CAAAN,EA9DhB,wBA8DgB,oBAAAP,EAAAa,EAAA,CAAAN,EA7DlB,qBA6DkB,aAAAP,EAAAa,EAAA,CAAAN,EAzDL,4BAyDK,oBAAAP,EAAAa,EAAA,CAAAN,EAxDnB,sBAwDmB,WAAAP,EAAAa,EAAA,CAAAN,EAtDpB,6BAsDoB,kBAAAP,EAAAa,EAAA,CAAAN,EAnDN,0BAmDM,YAAAP,EAAAa,EAAA,CAAAN,E,iCAAA,mBAAAP,EAAAa,EAAA,CAAAN,E,sBAAA,YAAAP,EAAAa,EAAA,CAAAN,EAnDF,6BAmDE,mBAAAP,EAAAa,EAAA,CAAAN,EAnDN,wBAmDM,aAAAP,EAAAa,EAAA,CAAAN,EAlDlB,+BAkDkB,oBAAAP,EAAAa,EAAA,CAAAN,EAjDnB,0BAiDmB,WAAAP,EAAAa,EAAA,CAAAN,E,iCAAA,kBAAAP,EAAAa,EAAA,CAAAN,EAnDN,oBAmDM,YAAAP,EAAAa,EAAA,CAAAN,EAnDN,2BAmDM,mBAAAP,EAAAa,EAAA,CAAAN,E,sBAAA,YAAAP,EAAAa,EAAA,CAAAN,E,6BAAA,mBAAAP,EAAAa,EAAA,CAAAN,EAAA,qBAAAP,EAAAa,EAAA,CAAAN,EAnDf,WAmDe,eAAAA,G,ECnFhB,IAAAQ,I,EAIoB,IAAAA,I,WAMiBC,EAAIC,G,2CAGrCC,MAAA,aAAAlJ,OAAAiJ,EAAAjH,KAAA,yCAAAhC,OAAAgJ,EAAAhH,MAAAyC,E,aAUEwE,G,MACHA,EAAAjH,K,KACemH,IAAAC,G,SACrBF,MAAA,sDAAAlJ,OAAAoJ,EAAA,O,IAEYjC,IAAAiC,EAAAH,G,OAAA,EAAAI,GAAA,EAAAC,OAAAC,E,2EAITC,E,QAASP,E,cAEZ,E,EAEDQ,C,sDASEJ,E,MACqDC,C,oBCgBhCI,EAAAV,EAAAW,G,IACtBC,EAAAZ,EAAAjB,UAAA8B,YAAA,aAAAC,aAAA,CAEKC,UAAM,I,OAEVH,KAAqCI,mBAClChB,EAAAjB,UACH8B,YAAAF,E;;;;;;;;;;;;;;;;;AA+BF,IAAAM,GAAcC,EAAA,GAAAlC,EAAAa,EAAA,CAAAqB,EAAA,8FAAAlC,EAAAa,EAAA,CAAAqB,EAAA,gDAAAlC,EAAAa,EAAA,CAAAqB,EAAA,mGAAAlC,EAAAa,EAAA,CAAAqB,EAAA,iEAAAlC,EAAAa,EAAA,CAAAqB,EAAA,qGAAAlC,EAAAa,EAAA,CAAAqB,EAAA,gFAAAlC,EAAAa,EAAA,CAAAqB,EAAA,4FAAAlC,EAAAa,EAAA,CAAAqB,EAAA,gGAAAlC,EAAAa,EAAA,CAAAqB,EAAA,8FAAAlC,EAAAa,EAAA,CAAAqB,EAAA,oGAAAA,GACfC,EAAA,MAAAC,EAAAC,cAAA,iBAAAJ,GAiEqBK,EAjBtB,W,wEAkBY,E,cACN/H,OAAAgI,OAAA,GAAAC,G,yIACFzC,E,8NAQHZ,IAAA,SAAAQ,GAXqBM,KAAAwC,iB,sCAatB,G,YAeM3D,IAAO,WAIL,OAHKmB,KACTwC,iBAEmBxC,KAAGyC,KAClB,GAEJ,CACiClL,IAAA,UAC/BsH,IAAA,WAME,OALAmB,KAAAwC,iBAKAxC,KAAe0C,QAGf,GAMJ,CACDnL,IAAA,SACDsH,IAAA,WAGa,OAAFmB,KAAAwC,iBAAExC,KAAO2C,OAAE,GAAU,CAIjCpL,IAAA,YAEDsH,IAAA,WAWM,OAAWmB,KAAS4C,UAGxB,GAGF,CAUEC,gBACFhE,IAAA,WCzTA,OAAAmB,KAAA8C,UAyBM,EACA5D,IAAA,SAAAQ,GASFM,KAAA8C,WAAApD,CACK,GAGH,C,sCAME,GAAQM,KAAA+C,UAAU,MAAAb,EAAAc,OAAA,eAChBC,QAAMjD,KAAAyC,O,KAKVS,C,CD0JN,G,EFrHgB,Q,2GGnBZC,E,wBAMEb,OAAA,C,8NAGL,MAAAJ,EAAAc,OAAA,iBAnBqBC,QAAAG,G,OAqBA,MAAAC,EAAAC,oBAAAF,G,uBAAA,QAAfG,EAAeC,EAAAC,EAAfC,SAAAC,OAAAC,cAAAC,GAAAN,EAAAC,EAAAM,QAAAC,MAAAF,GAAA,G,IAKG7C,EAEAuC,EAAA7I,M,sEAFEsJ,Q,+ECpBmBC,EAASC,UAATtL,OAA6B,YAAAsL,UAAA,GAAAA,UAAA,GAAAxD,EAlB1DK,EAAAoD,EAAAtF,IAAAoF,G,IAmBElD,EAAM,MAAMmB,EAAkCc,OAAA,SAAe,CAC7DC,QAAKgB,I,oBAsEqBG,EAGpBC,EAAYC,G,QAfgB,Q,IAAJF,UAAI,IAAAG,IAAAH,E,sYAYU,MAAAf,EAAAmB,WAAA,GAAAzM,OAApC0M,EAAA,wB;;;;;;;;;;;;;;;;;IAuCVC,EAAqD,2B,gBAEjDC,I,OACCC,OAAA,EAAAC,EAAyBC,Q,gCAAA,C,yBAKvB,IADHC,E,0CAKEvI,G,QAAgCwG,OAAA,Y,qBAACxG,EAAAwI,S,kBAKVjE,G,SACjBkE,MAAAjF,KAAAkE,U,uBAG4CnE,EAAAmF,EAA1B,CAA0BnF,EAAAoF,GAAAC,MAAA,SAAAC,EAAAtE,G,sDAGhDuE,EAAAC,KAAAD,EAAAxB,M,KACF,E,OAEDwB,EAAAC,KAAA,EACFD,EAAAxB,KAAA,E,WAIF,OADCtF,EAAa8G,EAAGE,KACjBF,EAAAG,OAAA,SAAAjH,EAAAkH,YAAAhB,GAAAiB,YAAAjB,GAAA7F,IAAA+G,EAAA7E,KA7BI,O,yBA6BJuE,EAAAO,cAAA1D,EAAA2D,cAAAvF,EAAAwF,KAAAT,EAAAO,GAAAb,UA7BIgB,EAAyB9D,EAAAc,OAAA,WAAAiD,qBAAA,QAAA1B,EAAAe,EAAAO,UAAA,IAAAtB,OAAA,EAAAA,EAAAS,U,mBAAzB,Q,oCAAA,C,aAiCHC,MAAAjF,KAAAkE,U,CAGS,SAAAgC,EAAoBnF,EA6DjCoF,G,qDA3DqCpG,EAAAmF,EAAA,CAAAnF,EAAAoF,GAAAC,MAAA,SAAAC,EAAAtE,EAAAoF,GACjC,IAAI5B,EAAC/F,EAAA4H,EAAAT,EAAuBK,E,yEAE9BV,EAAAC,KAAM,E,EAANzB,KAAA,E,2CACOY,EAAA,a,2GAKM,S,gBAAMvC,EAAK2D,cAAAvF,EAAAwF,KAAAT,EAAAO,GAAAb,U,kHAEvB,a,qBAIK,KAAI,C,+CACsBjE,G;;;;;;;;;;;;;;;;4CAO/BjB,G,MAAAE,K,oKAG+BA,KAAAqG,SAAKC,OAAAvH,MAAA,SAAuBwH,G,2GAUtDxG,EAAAmF,E,CAAAnF,EAAAoF,GAAAC,MAAA,SAAAC,I,2IAELmB,EAAAC,EAAAC,wBAAAC,EAAAC,I,oCAEQ,K,QAACtB,EAAAxB,KAAuC,E,0BAAjD,OACQ+C,EAAAC,iBAIExB,EAAAE,K,+IAJF,OAAAF,EAAAG,OAAe,U,4JAIb,IAAAsB,EAAA,IAAwBtN,KAAAuN,EAAoBL,MAAAM,UAEhD,O,WAAAF,G,UAOAzB,EAAAG,OAAA,SAAAoB,EAAAR,SAAAa,UAAAL,EAAAC,mB,2EAGPpM,MAWgC,WACtB,IAAAmM,EAAA7G,KACX,OAAAD,EAAAmF,EAAA,CAAAnF,EAAAoF,GAAAC,MAAA,SAAAC,IC/RA,IAAAsB,EAAA/H,EAAAuI,EAAAC,EAAAC,EAyBE,OAAkBtH,EACZoF,GAAAmC,MAAA,SAAShC,GAEM,cAAAA,EAAAC,KAAAD,EAAAxB,MAAoC,KAGxD,EACD,GACM,OADN+C,EAAAC,iBACM,CAEexB,EAAAxB,KAAA,EAGnB,K,QAGFwB,EAAAxB,KAAA,E,0BAEA,O,wEAEAwB,EAAAxB,KAAgB,EAClB,KC9CA,C,oiBF+RA,E;;;;;;;;;;;;;;;;qPG/RA,aAoBA,SAASyD,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQrQ,EAAKsQ,GAClE,IACI,IAAIC,EAAON,EAAIjQ,GAAKsQ,GAChBnN,EAAQoN,EAAKpN,K,CACnB,MAAOqN,GAEL,YADAL,EAAOK,E,CAGPD,EAAK/D,KACL0D,EAAQ/M,GAERsN,QAAQP,QAAQ/M,GAAOqE,KAAK4I,EAAOC,E,CA9B3CtN,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAA2BsN,GACvB,OAAO,WACH,IAAIC,EAAOlI,KAAMmI,EAAOjE,UACxB,OAAO,IAAI8D,SAAQ,SAASP,EAASC,GACjC,IAAIF,EAAMS,EAAGhD,MAAMiD,EAAMC,GACzB,SAASR,EAAMjN,GACX6M,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQlN,E,CAEpE,SAASkN,EAAOpG,GACZ+F,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASpG,E,CAErEmG,OAAMrG,E,2CChBlB,aACAhH,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyByN,EAAK7Q,EAAKmD,GAC3BnD,KAAO6Q,EACP9N,OAAOC,eAAe6N,EAAK7Q,EAAK,CAC5BmD,MAAOA,EACPU,YAAY,EACZC,cAAc,EACdC,UAAU,IAGd8M,EAAI7Q,GAAOmD,EAEf,OAAO0N,C,uCChBX,aACA9N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAKR,SAA4B0N,GACxB,OAAOC,EAAwB3N,QAAQ0N,IAAQE,EAAsB5N,QAAQ0N,IAAQG,EAAiC7N,QAAQ0N,IAAQI,EAAwB9N,S,EALlK,IAAI2N,EAAqBI,EAAuBtR,EAAA,UAC5CmR,EAAmBG,EAAuBtR,EAAA,UAC1CqR,EAAqBC,EAAuBtR,EAAA,UAC5CoR,EAA8BE,EAAuBtR,EAAA,UAIzD,SAASsR,EAAuBN,GAC5B,OAAOA,GAAOA,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,uCCdjB,aACA9N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAER,SAA4B0N,GACxB,GAAIO,MAAMC,QAAQR,GAAM,OAAOS,EAAuBnO,QAAQ0N,E,EAFlE,IAIgCD,EAJ5BU,GAI4BV,EAJehR,EAAA,WAK7BgR,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,sCCXjB,aACA9N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAA2B0N,EAAKU,IACjB,MAAPA,GAAeA,EAAMV,EAAIzP,UAAQmQ,EAAMV,EAAIzP,QAC/C,IAAI,IAAIsC,EAAI,EAAG8N,EAAO,IAAIJ,MAAMG,GAAM7N,EAAI6N,EAAK7N,IAAI8N,EAAK9N,GAAKmN,EAAInN,GACjE,OAAO8N,C,uCCRX,aACA1O,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAA0BsO,GACtB,GAAsB,oBAAXtF,QAAmD,MAAzBsF,EAAKtF,OAAOC,WAA2C,MAAtBqF,EAAK,cAAuB,OAAOL,MAAMM,KAAKD,E,uCCNxH,aACA3O,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,WACI,MAAM,IAAIG,UAAU,wI,uCCNxB,aACAR,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAER,SAAqCwO,EAAGC,GACpC,IAAKD,EAAG,OACR,GAAiB,iBAANA,EAAgB,OAAOE,EAAuB1O,QAAQwO,EAAGC,GACpE,IAAIE,EAAIhP,OAAOmB,UAAU8N,SAASC,KAAKL,GAAGlP,MAAM,GAAG,GACzC,WAANqP,GAAkBH,EAAEM,cAAaH,EAAIH,EAAEM,YAAY1P,MACvD,GAAU,QAANuP,GAAqB,QAANA,EAAa,OAAOV,MAAMM,KAAKI,GAClD,GAAU,cAANA,GAAqB,2CAA2CI,KAAKJ,GAAI,OAAOD,EAAuB1O,QAAQwO,EAAGC,E,EAP1H,IASgChB,EAT5BiB,GAS4BjB,EATehR,EAAA,WAU7BgR,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,sCCTjB,IAAIuB,EAAW,SAAUlP,GACvB,aAEA,IAEI6G,EAFAsI,EAAKtP,OAAOmB,UACZoO,EAASD,EAAGE,eAEZC,EAA4B,mBAAXpG,OAAwBA,OAAS,GAClDqG,EAAiBD,EAAQnG,UAAY,aACrCqG,EAAsBF,EAAQG,eAAiB,kBAC/CC,EAAoBJ,EAAQK,aAAe,gBAE/C,SAASC,EAAOjC,EAAK7Q,EAAKmD,GAOxB,OANAJ,OAAOC,eAAe6N,EAAK7Q,EAAK,CAC9BmD,MAAOA,EACPU,YAAY,EACZC,cAAc,EACdC,UAAU,IAEL8M,EAAI7Q,E,CAEb,IAEE8S,EAAO,GAAI,G,CACX,MAAOC,GACPD,EAAS,SAASjC,EAAK7Q,EAAKmD,GAC1B,OAAO0N,EAAI7Q,GAAOmD,C,EAItB,SAAS4M,EAAKiD,EAASC,EAAStC,EAAMuC,GAEpC,IAAIC,EAAiBF,GAAWA,EAAQ/O,qBAAqBkP,EAAYH,EAAUG,EAC/EC,EAAYtQ,OAAO0I,OAAO0H,EAAejP,WACzCoP,EAAU,IAAIC,EAAQL,GAAe,IAMzC,OAFAG,EAAUG,QAuMZ,SAA0BR,EAASrC,EAAM2C,GACvC,IAAIG,EAAQC,EAEZ,OAAO,SAAgBC,EAAQrD,GAC7B,GAAImD,IAAUG,EACZ,MAAM,IAAIC,MAAM,gCAGlB,GAAIJ,IAAUK,EAAmB,CAC/B,GAAe,UAAXH,EACF,MAAMrD,EAKR,OAAOyD,G,CAMT,IAHAT,EAAQK,OAASA,EACjBL,EAAQhD,IAAMA,IAED,CACX,IAAI0D,EAAWV,EAAQU,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUV,GACnD,GAAIW,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,C,EAIX,GAAuB,SAAnBX,EAAQK,OAGVL,EAAQrF,KAAOqF,EAAQc,MAAQd,EAAQhD,SAElC,GAAuB,UAAnBgD,EAAQK,OAAoB,CACrC,GAAIF,IAAUC,EAEZ,MADAD,EAAQK,EACFR,EAAQhD,IAGhBgD,EAAQe,kBAAkBf,EAAQhD,I,KAEN,WAAnBgD,EAAQK,QACjBL,EAAQpF,OAAO,SAAUoF,EAAQhD,KAGnCmD,EAAQG,EAER,IAAIU,EAASC,EAASvB,EAASrC,EAAM2C,GACrC,GAAoB,WAAhBgB,EAAOE,KAAmB,CAO5B,GAJAf,EAAQH,EAAQ9G,KACZsH,EACAW,EAEAH,EAAOhE,MAAQ6D,EACjB,SAGF,MAAO,CACLhR,MAAOmR,EAAOhE,IACd9D,KAAM8G,EAAQ9G,K,CAGS,UAAhB8H,EAAOE,OAChBf,EAAQK,EAGRR,EAAQK,OAAS,QACjBL,EAAQhD,IAAMgE,EAAOhE,I,GA/QPoE,CAAiB1B,EAASrC,EAAM2C,GAE7CD,C,CAcT,SAASkB,EAAS7D,EAAIG,EAAKP,GACzB,IACE,MAAO,CAAEkE,KAAM,SAAUlE,IAAKI,EAAGuB,KAAKpB,EAAKP,G,CAC3C,MAAOrG,GACP,MAAO,CAAEuK,KAAM,QAASlE,IAAKrG,E,EAhBjC/G,EAAQ6M,KAAOA,EAoBf,IAAI2D,EAAyB,iBACzBe,EAAyB,iBACzBb,EAAoB,YACpBE,EAAoB,YAIpBK,EAAmB,GAMvB,SAASf,IAAY,CACrB,SAASuB,IAAoB,CAC7B,SAASC,IAA6B,CAItC,IAAIC,EAAoB,GACxB/B,EAAO+B,EAAmBpC,GAAgB,WACxC,OAAOhK,I,IAGT,IAAIqM,EAAW/R,OAAOgS,eAClBC,EAA0BF,GAAYA,EAASA,EAAS3I,EAAO,MAC/D6I,GACAA,IAA4B3C,GAC5BC,EAAOL,KAAK+C,EAAyBvC,KAGvCoC,EAAoBG,GAGtB,IAAIC,EAAKL,EAA2B1Q,UAClCkP,EAAUlP,UAAYnB,OAAO0I,OAAOoJ,GAYtC,SAASK,EAAsBhR,GAC7B,CAAC,OAAQ,QAAS,UAAUiR,SAAQ,SAASxB,GAC3Cb,EAAO5O,EAAWyP,GAAQ,SAASrD,GACjC,OAAO7H,KAAK+K,QAAQG,EAAQrD,E,OAkClC,SAAS8E,EAAc/B,EAAWgC,GAChC,SAASC,EAAO3B,EAAQrD,EAAKJ,EAASC,GACpC,IAAImE,EAASC,EAASlB,EAAUM,GAASN,EAAW/C,GACpD,GAAoB,UAAhBgE,EAAOE,KAEJ,CACL,IAAIxF,EAASsF,EAAOhE,IAChBiF,EAAQvG,EAAO7L,MACnB,OAAIoS,GACiB,iBAAVA,GACPjD,EAAOL,KAAKsD,EAAO,WACdF,EAAYnF,QAAQqF,EAAMC,SAAShO,MAAK,SAASrE,GACtDmS,EAAO,OAAQnS,EAAO+M,EAASC,E,IAC9B,SAASlG,GACVqL,EAAO,QAASrL,EAAKiG,EAASC,E,IAI3BkF,EAAYnF,QAAQqF,GAAO/N,MAAK,SAASiO,GAI9CzG,EAAO7L,MAAQsS,EACfvF,EAAQlB,E,IACP,SAASwB,GAGV,OAAO8E,EAAO,QAAS9E,EAAON,EAASC,E,IAvBzCA,EAAOmE,EAAOhE,I,CA4BlB,IAAIoF,EAgCJjN,KAAK+K,QA9BL,SAAiBG,EAAQrD,GACvB,SAASqF,IACP,OAAO,IAAIN,GAAY,SAASnF,EAASC,GACvCmF,EAAO3B,EAAQrD,EAAKJ,EAASC,E,IAIjC,OAAOuF,EAaLA,EAAkBA,EAAgBlO,KAChCmO,EAGAA,GACEA,G,EAkHV,SAASzB,EAAoBF,EAAUV,GACrC,IAAIK,EAASK,EAAS3H,SAASiH,EAAQK,QACvC,GAAIA,IAAW5J,EAAW,CAKxB,GAFAuJ,EAAQU,SAAW,KAEI,UAAnBV,EAAQK,OAAoB,CAE9B,GAAIK,EAAS3H,SAAiB,SAG5BiH,EAAQK,OAAS,SACjBL,EAAQhD,IAAMvG,EACdmK,EAAoBF,EAAUV,GAEP,UAAnBA,EAAQK,QAGV,OAAOQ,EAIXb,EAAQK,OAAS,QACjBL,EAAQhD,IAAM,IAAI/M,UAChB,iD,CAGJ,OAAO4Q,C,CAGT,IAAIG,EAASC,EAASZ,EAAQK,EAAS3H,SAAUiH,EAAQhD,KAEzD,GAAoB,UAAhBgE,EAAOE,KAIT,OAHAlB,EAAQK,OAAS,QACjBL,EAAQhD,IAAMgE,EAAOhE,IACrBgD,EAAQU,SAAW,KACZG,EAGT,IAAI5D,EAAO+D,EAAOhE,IAElB,OAAMC,EAOFA,EAAK/D,MAGP8G,EAAQU,EAAS4B,YAAcrF,EAAKpN,MAGpCmQ,EAAQ/G,KAAOyH,EAAS6B,QAQD,WAAnBvC,EAAQK,SACVL,EAAQK,OAAS,OACjBL,EAAQhD,IAAMvG,GAUlBuJ,EAAQU,SAAW,KACZG,GANE5D,GA3BP+C,EAAQK,OAAS,QACjBL,EAAQhD,IAAM,IAAI/M,UAAU,oCAC5B+P,EAAQU,SAAW,KACZG,E,CAoDX,SAAS2B,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxBtN,KAAK4N,WAAWhW,KAAK2V,E,CAGvB,SAASM,EAAcN,GACrB,IAAI1B,EAAS0B,EAAMO,YAAc,GACjCjC,EAAOE,KAAO,gBACPF,EAAOhE,IACd0F,EAAMO,WAAajC,C,CAGrB,SAASf,EAAQL,GAIfzK,KAAK4N,WAAa,CAAC,CAAEJ,OAAQ,SAC7B/C,EAAYiC,QAAQW,EAAcrN,MAClCA,KAAKb,OAAM,E,CA8Bb,SAASuE,EAAOqK,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS/D,GAC9B,GAAIgE,EACF,OAAOA,EAAexE,KAAKuE,GAG7B,GAA6B,mBAAlBA,EAASjK,KAClB,OAAOiK,EAGT,IAAKE,MAAMF,EAASnV,QAAS,CAC3B,IAAIsC,GAAI,EAAIgT,EAAO,SAASpK,IAC1B,OAAS5I,EAAI6S,EAASnV,WAChBiR,EAAOL,KAAKuE,EAAU7S,GAGxB,OAFA4I,EAAKpJ,MAAQqT,EAAS7S,GACtB4I,EAAKC,MAAO,EACLD,EAOX,OAHAA,EAAKpJ,MAAQ4G,EACbwC,EAAKC,MAAO,EAELD,C,EAGT,OAAOoK,EAAKpK,KAAOoK,C,EAKvB,MAAO,CAAEpK,KAAMwH,E,CAIjB,SAASA,IACP,MAAO,CAAE5Q,MAAO4G,EAAWyC,MAAM,E,CA+MnC,OA7mBAmI,EAAkBzQ,UAAY0Q,EAC9B9B,EAAOmC,EAAI,cAAeL,GAC1B9B,EAAO8B,EAA4B,cAAeD,GAClDA,EAAkBiC,YAAc9D,EAC9B8B,EACAhC,EACA,qBAaF1P,EAAQ2T,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAO5E,YAClD,QAAO6E,IACHA,IAASpC,GAG2B,uBAAnCoC,EAAKH,aAAeG,EAAKvU,M,EAIhCU,EAAQ2K,KAAO,SAASiJ,GAQtB,OAPI/T,OAAOiU,eACTjU,OAAOiU,eAAeF,EAAQlC,IAE9BkC,EAAOG,UAAYrC,EACnB9B,EAAOgE,EAAQlE,EAAmB,sBAEpCkE,EAAO5S,UAAYnB,OAAO0I,OAAOwJ,GAC1B6B,C,EAOT5T,EAAQgU,MAAQ,SAAS5G,GACvB,MAAO,CAAEkF,QAASlF,E,EAsEpB4E,EAAsBE,EAAclR,WACpC4O,EAAOsC,EAAclR,UAAWwO,GAAqB,WACnD,OAAOjK,I,IAETvF,EAAQkS,cAAgBA,EAKxBlS,EAAQiU,MAAQ,SAASnE,EAASC,EAAStC,EAAMuC,EAAamC,QACxC,IAAhBA,IAAwBA,EAAc5E,SAE1C,IAAIiB,EAAO,IAAI0D,EACbrF,EAAKiD,EAASC,EAAStC,EAAMuC,GAC7BmC,GAGF,OAAOnS,EAAQ2T,oBAAoB5D,GAC/BvB,EACAA,EAAKnF,OAAO/E,MAAK,SAASwH,GACxB,OAAOA,EAAOxC,KAAOwC,EAAO7L,MAAQuO,EAAKnF,M,KAuKjD2I,EAAsBD,GAEtBnC,EAAOmC,EAAIrC,EAAmB,aAO9BE,EAAOmC,EAAIxC,GAAgB,WACzB,OAAOhK,I,IAGTqK,EAAOmC,EAAI,YAAY,WACrB,MAAO,oB,IAkCT/R,EAAQkU,KAAO,SAASC,GACtB,IAAID,EAAO,GACX,IAAK,IAAIE,KAAOD,EACdD,EAAK/W,KAAKiX,GAMZ,OAJAF,EAAKG,UAIE,SAAShL,IACd,KAAO6K,EAAK/V,QAAQ,CAClB,IAAIrB,EAAMoX,EAAKI,MACf,GAAIxX,KAAOqX,EAGT,OAFA9K,EAAKpJ,MAAQnD,EACbuM,EAAKC,MAAO,EACLD,C,CAQX,OADAA,EAAKC,MAAO,EACLD,C,GAsCXrJ,EAAQiJ,OAASA,EAMjBoH,EAAQrP,UAAY,CAClBgO,YAAaqB,EAEb3L,MAAO,SAAS6P,GAcd,GAbAhP,KAAKuF,KAAO,EACZvF,KAAK8D,KAAO,EAGZ9D,KAAKwF,KAAOxF,KAAK2L,MAAQrK,EACzBtB,KAAK+D,MAAO,EACZ/D,KAAKuL,SAAW,KAEhBvL,KAAKkL,OAAS,OACdlL,KAAK6H,IAAMvG,EAEXtB,KAAK4N,WAAWlB,QAAQmB,IAEnBmB,EACH,IAAK,IAAIjV,KAAQiG,KAEQ,MAAnBjG,EAAKkV,OAAO,IACZpF,EAAOL,KAAKxJ,KAAMjG,KACjBkU,OAAOlU,EAAKE,MAAM,MACrB+F,KAAKjG,GAAQuH,E,EAMrB4N,KAAM,WACJlP,KAAK+D,MAAO,EAEZ,IACIoL,EADYnP,KAAK4N,WAAW,GACLE,WAC3B,GAAwB,UAApBqB,EAAWpD,KACb,MAAMoD,EAAWtH,IAGnB,OAAO7H,KAAKoP,I,EAGdxD,kBAAmB,SAASyD,GAC1B,GAAIrP,KAAK+D,KACP,MAAMsL,EAGR,IAAIxE,EAAU7K,KACd,SAASsP,EAAOC,EAAKC,GAYnB,OAXA3D,EAAOE,KAAO,QACdF,EAAOhE,IAAMwH,EACbxE,EAAQ/G,KAAOyL,EAEXC,IAGF3E,EAAQK,OAAS,OACjBL,EAAQhD,IAAMvG,KAGNkO,C,CAGZ,IAAK,IAAItU,EAAI8E,KAAK4N,WAAWhV,OAAS,EAAGsC,GAAK,IAAKA,EAAG,CACpD,IAAIqS,EAAQvN,KAAK4N,WAAW1S,GACxB2Q,EAAS0B,EAAMO,WAEnB,GAAqB,SAAjBP,EAAMC,OAIR,OAAO8B,EAAO,OAGhB,GAAI/B,EAAMC,QAAUxN,KAAKuF,KAAM,CAC7B,IAAIkK,EAAW5F,EAAOL,KAAK+D,EAAO,YAC9BmC,EAAa7F,EAAOL,KAAK+D,EAAO,cAEpC,GAAIkC,GAAYC,EAAY,CAC1B,GAAI1P,KAAKuF,KAAOgI,EAAME,SACpB,OAAO6B,EAAO/B,EAAME,UAAU,GACzB,GAAIzN,KAAKuF,KAAOgI,EAAMG,WAC3B,OAAO4B,EAAO/B,EAAMG,W,MAGjB,GAAI+B,GACT,GAAIzP,KAAKuF,KAAOgI,EAAME,SACpB,OAAO6B,EAAO/B,EAAME,UAAU,OAG3B,KAAIiC,EAMT,MAAM,IAAItE,MAAM,0CALhB,GAAIpL,KAAKuF,KAAOgI,EAAMG,WACpB,OAAO4B,EAAO/B,EAAMG,WAImC,C,IAMjEjI,OAAQ,SAASsG,EAAMlE,GACrB,IAAK,IAAI3M,EAAI8E,KAAK4N,WAAWhV,OAAS,EAAGsC,GAAK,IAAKA,EAAG,CACpD,IAAIqS,EAAQvN,KAAK4N,WAAW1S,GAC5B,GAAIqS,EAAMC,QAAUxN,KAAKuF,MACrBsE,EAAOL,KAAK+D,EAAO,eACnBvN,KAAKuF,KAAOgI,EAAMG,WAAY,CAChC,IAAIiC,EAAepC,EACnB,K,EAIAoC,IACU,UAAT5D,GACS,aAATA,IACD4D,EAAanC,QAAU3F,GACvBA,GAAO8H,EAAajC,aAGtBiC,EAAe,MAGjB,IAAI9D,EAAS8D,EAAeA,EAAa7B,WAAa,GAItD,OAHAjC,EAAOE,KAAOA,EACdF,EAAOhE,IAAMA,EAET8H,GACF3P,KAAKkL,OAAS,OACdlL,KAAK8D,KAAO6L,EAAajC,WAClBhC,GAGF1L,KAAK4P,SAAS/D,E,EAGvB+D,SAAU,SAAS/D,EAAQ8B,GACzB,GAAoB,UAAhB9B,EAAOE,KACT,MAAMF,EAAOhE,IAcf,MAXoB,UAAhBgE,EAAOE,MACS,aAAhBF,EAAOE,KACT/L,KAAK8D,KAAO+H,EAAOhE,IACM,WAAhBgE,EAAOE,MAChB/L,KAAKoP,KAAOpP,KAAK6H,IAAMgE,EAAOhE,IAC9B7H,KAAKkL,OAAS,SACdlL,KAAK8D,KAAO,OACa,WAAhB+H,EAAOE,MAAqB4B,IACrC3N,KAAK8D,KAAO6J,GAGPjC,C,EAGTmE,OAAQ,SAASnC,GACf,IAAK,IAAIxS,EAAI8E,KAAK4N,WAAWhV,OAAS,EAAGsC,GAAK,IAAKA,EAAG,CACpD,IAAIqS,EAAQvN,KAAK4N,WAAW1S,GAC5B,GAAIqS,EAAMG,aAAeA,EAGvB,OAFA1N,KAAK4P,SAASrC,EAAMO,WAAYP,EAAMI,UACtCE,EAAcN,GACP7B,C,GAKbtM,MAAS,SAASoO,GAChB,IAAK,IAAItS,EAAI8E,KAAK4N,WAAWhV,OAAS,EAAGsC,GAAK,IAAKA,EAAG,CACpD,IAAIqS,EAAQvN,KAAK4N,WAAW1S,GAC5B,GAAIqS,EAAMC,SAAWA,EAAQ,CAC3B,IAAI3B,EAAS0B,EAAMO,WACnB,GAAoB,UAAhBjC,EAAOE,KAAkB,CAC3B,IAAI+D,EAASjE,EAAOhE,IACpBgG,EAAcN,E,CAEhB,OAAOuC,C,EAMX,MAAM,IAAI1E,MAAM,wB,EAGlB2E,cAAe,SAAShC,EAAUZ,EAAYC,GAa5C,OAZApN,KAAKuL,SAAW,CACd3H,SAAUF,EAAOqK,GACjBZ,WAAYA,EACZC,QAASA,GAGS,SAAhBpN,KAAKkL,SAGPlL,KAAK6H,IAAMvG,GAGNoK,C,GAQJjR,C,CA9sBM,CAqtBgBD,EAAAC,SAG/B,IACEuV,mBAAqBrG,C,CACrB,MAAOsG,GAWmB,iBAAfC,WACTA,WAAWF,mBAAqBrG,EAEhCwG,SAAS,IAAK,yBAAdA,CAAwCxG,E,iPC/rBZ,W,sBAFfnF,EAAJzK,EAAOqW,EAAArE,GACQhM,EAAoB5I,EAAnC,CAAmC6I,KAAAwE,GACnCxE,KAAIjG,KAAJA,EAnBXiG,KAAiBoQ,kBACjBpQ,KAAA+L,OAKA/L,KAAAqQ,mBAA2C,E,wDAgB3CC,kBAAA,I,QACOvQ,EAAwBG,E,CAACsE,EAAA,C,KAE/B,uB,kBAEmB,O,yBAApBxE,I,QAGC,uB,kBAEc,O,yBAAfA,I,QAGC,kB,kBAEyB,O,oBAA1BA,I,QAGC,6B,sDACF,K,EAtB+B,G,ECSI,Y,EA6CjC,W,6BAEOD,EAA4B5I,E,CAAA6I,KAChCuQ,G,UAEIxW,E,eAGC+F,E,eAIH,K,eACE,IAAAgB,I,uBACC,IAAAA,I,sBACO,IAAAA,I,qBACN,IACFA,G,QAIHf,EAAAG,E,CAAAqQ,EAAA,C,iBASJ,SAAAC,G,0CAEW,IAAZxQ,KAAAyQ,kBAAYvP,IAAAwP,GAAA,CAAZ,IAAAC,EAAA,MAAYxO,EAAAyO,UAEX,GADC5Q,KAAOyQ,kBAAevR,IAAAwR,EAAAC,GACvB3Q,KAAA6Q,cAAAH,IAAA1Q,KAAA8Q,uB,uCAEDC,mBAAYL,IACN9V,GAAc+V,EAAUlJ,QAC1B7M,EAYE,CAPA,MAAK4B,GAOL,C,CAKJ,OAAIwD,KAAAyQ,kBAAA5R,IAAA6R,GACFM,O,QAEC,e,wFAKAlP,EAAA,QAAAyC,EAAAhC,aAAA,EAAAA,EAAAT,gBAAA,IAAAyC,K,IAMEvE,KAAA6Q,cAAAH,KAAA1Q,KAAA8Q,uB,MASK,OAAQ,K,YACZ,WAAA/Y,OAAoBiI,KAAAjG,KAAA,qB,CAVrB,I,oEAAL,GAAA+H,EAAK,OAGA,KAHA,MAAAtF,C,gDAiBJwD,KAAAgB,S,8CAjBIjH,OAAAiG,KAAAjG,KAAA,MAGJqR,MAHI,yBAGJrT,OAAAiJ,EAAAjH,KAAA,kBAAAhC,OAAAiI,KAAAjG,KAAA,M,kBAHI,MAGJqR,MAAA,iBAAArT,OAAAiI,KAAAjG,KAAA,+B;;;;;;;;;;;;;;;;8DAkBD,C,SAAA,CACA,IAAI8J,GAAyB,EAAAzC,GAAY,EAAAC,OAAAC,EACzC,IAKI,QAAMiC,EAAAC,EAAAxD,KAAAyQ,kBAAAQ,UAAAtN,OAAAC,cAAAC,GAAAN,EAAAC,EAAAM,QAAAC,MAAAF,GAAA,G,0EAAN,IAAN,IAAAjJ,EAAAoF,KAAAkR,uBAAA,CACgBH,mBAAAL,I,yCAMLlP,C,gBAEkC,MAAPgC,EAAOQ,Q,EAAtCA,Q,oBAE0C3C,C,EApC9C,C,QAsCF,gB,gFAEarB,KAAdyQ,kBAAcU,OAAAX,G,KAAdY,iBAAAD,OAAcX,GACZxQ,KAAAqR,UAAYF,OAASX,E,IAGvBjZ,IAAA,S,iBAEC,IAAAsP,EAAA7G,K,0CAED,OAAUD,EAAAoF,GAAAmC,MAAA,SAAAhC,GAAV,cAAUA,EAAwCC,KAAAD,EAAAxB,MAAvC,O,OACGwN,EAAA1I,MAAqBM,KAAArC,EAAWwK,UAAO3N,UACpD4B,EAAAxB,KAAA,E,2DAES,IAACjL,KAAA,SAAA0Y,GACD,OAAOA,EAAPC,SAAOL,QACT,KAAApZ,OAA4BgI,EAC3B0R,EADsB,CACtBH,EAAAI,QAAA,SAAAH,GAEE,MAAc,YAAAA,CAMb,IAKR1Y,KAAA,SAAoB0Y,GACb,OAAAA,EAAAI,SACL,OAGC,O,yJAAAzN,UAAAtL,OAGJ,YAAAsL,UAAA,GAAAA,UAAA,GAAA0N,E,sBAHI1Q,IAAAsP,E,QAWL,a,MACD,W,sGAED,G,KASE,a,MACA,WAGA,IAAAqB,EAAA3N,UAAqBtL,OAAS,QAAE,IAAAsL,UAAA,GAAAA,UAAA,MAC5BxB,EAACmP,EAAetP,QAAKA,OAAsB,IAAtBG,EAAsB,GAAmBA,EAE5DgO,EAAuB1Q,KAAC8R,4BAAcD,EAAsBd,oBAClE,GAAI/Q,KAAA6Q,cACFH,GAAS,MAAkBtF,MAAA,GAAArT,OAAAiI,KAAsBjG,KAAA,KAAAhC,OAAA2Y,EAAA,mCAGnD,IAAA1Q,KAAO+R,iBAAK,MAAA3G,MAAA,aAAArT,OAAAiI,KAAAjG,KAAA,iC,IACVa,EAAAoF,KAAAkR,uBAAmC,CACnCH,mBAAAL,EACHnO,Y,mBAED,IAQQ,QAAiDgB,EAAjDC,EAAiBxD,KAAAyQ,kBAAoBQ,UAAYtN,OAAAC,cAAAC,GAAAN,EAAAC,EAAAM,QAAAC,MAAAF,GAAA,GAClD,IAAAmO,EACIjS,EAAAkS,EAAP,CAAO1O,EAAA7I,MAAA,GAAAqW,EAAAiB,EAAA,GAAAE,EAAAF,EAAA,GAEJG,EAAAnS,KAAA8R,4BAAAf,G,mBAAL,C,OAAKvP,G,GACC,E,EACOA,C,aAGVqC,GAAA,MAAAL,EAAAQ,QACFR,EAAAQ,Q,CANI,WAAA5C,E,iDAULgR,EAD6B5B,GAO7B,IAAIjM,EACAmM,EAAkB1Q,KAAS8R,4BAAEtB,GAC/B6B,EAA0D,QAA1C9N,EAAUvE,KAAAsS,gBAAqBzT,IAAA6R,UAAW,IAAAnM,IAAA,IAAAgO,I,EACxD3V,IAAAwV,G,qBACAlT,IAAOwR,EAAA2B,G,MACNrS,KAAAqR,UAAAxS,IAAA6R,G,OACH8B,GAAkBJ,EAACI,EAAoB9B,GACvC,WAEA2B,EAAAlB,OAAAiB,E,SA0BH,wB,sDAEkC,GAA3BK,EAA2B,C,IAA3B5O,GAAA,EAAAzC,GACiC,EAAAC,OAAAC,E,IAEnC,IAAI,IACgBiC,EADfC,EACPiP,EAAY9O,OAASC,cAAqBC,GAAaN,EAAAC,EAAAM,QAAmBC,MAAAF,GAAA,GAE1E,IAAOuO,EAAW7O,EAAlB7I,MAEH,I,MAEO,C,SAAA,CACN,C,CAID,MAAA8G,G,iBACF,IAEDqC,GAAA,MAAAL,EAAAQ,QACSR,EAAAQ,QCnXT,CDqXC,QAEQ,GAAA5C,EACU,MAAAC,CCxXnB,C,CDgWU,C,GCrUqB,CAFZ9J,IAAA,yB,qGAIjB,IAAAqD,GAAAoF,KAAAgB,YASApG,EAAAoF,KAAAgB,UAA6BoP,gBAAuBpQ,KAAAF,UAAA,CAC5CiR,oB,EAA4CA,E,gBAC9CxO,QAASA,IAOdvC,KAAAqR,UAAAnS,IAAA6R,EAAAnW,G,+BAICoF,KAAI0S,sBAAuB9X,E,yCAQ7BoF,KAAAgB,UAAAsP,kBAAAtQ,KAAAF,UAAAiR,EAAAnW,E,CAOA,MAAA2J,G,CAOE,OAAK3J,GAAc,I,sCAKrBF,MAAA,W,IAAA8V,EAAAtM,UAAYtL,OAAA,YAAAsL,UAAA,GAAAA,UAAA,GAAA0N,EACV,OAAA5R,KAAOgB,UAAgBhB,KAASgB,UAAUqP,kBAACG,EAAAoB,EAC5CpB,C,IACFjZ,IAAA,uB,6FDqBE,G,+tBEtGH,aACA+C,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAKR,SAAwB0N,EAAKnN,GACzB,OAAOyX,EAAqBhY,QAAQ0N,IAAQuK,EAAsBjY,QAAQ0N,EAAKnN,IAAM2X,EAAiClY,QAAQ0N,EAAKnN,IAAM4X,EAAsBnY,S,EALnK,IAAIgY,EAAkBI,EAAuB3b,EAAA,UACzCwb,EAAmBG,EAAuB3b,EAAA,UAC1C0b,EAAmBC,EAAuB3b,EAAA,UAC1Cyb,EAA8BE,EAAuB3b,EAAA,UAIzD,SAAS2b,EAAuB3K,GAC5B,OAAOA,GAAOA,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,uCCdjB,aACA9N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyB0N,GACrB,GAAIO,MAAMC,QAAQR,GAAM,OAAOA,C,uCCNnC,aACA/N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,WACI,MAAM,IAAIG,UAAU,6I,0hDCeX,IAAAkY,EAAA5b,EAAA,S,2FCET6b,GAIU,EAJVA,GAWM,EAXNA,EAcU,oB,EA4BgC,SAAoBC,EAAClO,G,IAC9DkO,EAAU,MAAKC,EAAiBnO,E,IAIP,SAAAA,G,WACxBoG,MACG,sBAA0B6H,EACnB,6BAAAjO,E,EA4CdoO,EAAA,SAIAC,G,IAQA,IAAAC,EAAA,GAOAC,EAAA,EAIErY,EAAO,EAAIA,EAACmY,EAAAza,OAAAsC,IAAiB,CAC9B,IAAAsY,EAAAH,EAAAI,WAAAvY,GAEDsY,EAAA,IAAAF,EAAAC,KAAAC,EAISA,EAAK,MACbF,EAAAC,KAAAC,GAAA,MAEDF,EAAAC,KAAA,GAAAC,EAAA,KASA,cAAAA,IAAAtY,EAAA,EAAAmY,EAAAza,QAAA,cAAAya,EAAAI,WAAAvY,EAAA,KAcMsY,EAAC,QAAQ,KAAAA,IAAA,UAAAH,EAAAI,aAAAvY,IAEPoY,EAAAC,KAAAC,GAAgB,OAIhBF,EAAAC,KAAWC,GAAC,UAEbF,EAAIC,KAAOC,GAAI,EAAK,GAAC,IACxBF,EAAMC,KAAQ,GAAHC,EAAW,MAEtBF,EAAMC,KAAKC,GAAG,GAAS,IACvBF,EAAMC,KAAAC,GAAY,EAAI,GAAI,IAC1BF,EAAMC,KAAQ,GAAHC,EAAG,I,aAiGV,C,eAOQ,K,eAIH,K,sBAKN,KAKNE,sBAAA,K,kBAUQ,iE,0BAKL1T,KAAS2T,kBAAgB,K,kEAc7BC,mBAAA,mBAAAC,KAmBFC,gBAAA,SAAAC,EAAAC,GAUM,IAAApL,MAAAC,QAAAkL,GAAA,MAAA3I,MAAA,iDACFpL,KAAAiU,QAGD,IAFC,IAAAC,EAAUF,EAAAhU,KAAAmU,sBAAAnU,KAAAoU,eACVC,EAAa,GACdnZ,EAAA,EAAAA,EAAA6Y,EAAAnb,OAAAsC,GAAA,GACM,IAAKoZ,EAAAP,EAAA7Y,GACdqZ,EAAArZ,EAAA,EAAA6Y,EAAAnb,OChXA4b,EAAAD,EAAAR,EAAA7Y,EAAA,KAqBSuZ,EAAAvZ,EAAA,EAAA6Y,EAAAnb,OACR8b,EAAAD,EAAAV,EAAA7Y,EAAA,KAEDyZ,EAAAL,GAAA,EAecM,GAAmB,EAAPN,IACf,EAAAE,GAAO,EAGRK,GAAkB,GAAXL,IAAW,EAAAE,GAAA,EACnBI,EAAI,GAAAJ,E,SAGDH,IAAYM,EAAe,KAGnCR,EAAWzc,KAAAsc,EAAAS,GAAAT,EAAAU,GAAAV,EAAAW,GAAAX,EAAAY,G,QAITT,EAAMtb,KAAA,G,EAWLgc,aAAc,SAAQhB,EAAAC,GAKxB,OAAAhU,KAAmC4T,qBAAQI,EAAAgB,KAAAjB,GAI7C/T,KAAA8T,gBAAAV,EAAAW,GAAAC,EAED,E,2BCxDA,OAAAhU,KAAA4T,qBAA8CI,EAAAH,KAAAE,GF2L3C,SAAAkB,G,QAGF3B,EAAA,GAED4B,EAAA,EAAA1B,EAAA,E,0BAWE,GAAI2B,EAAK,IAAA7B,EAAAE,KAAA4B,OAAuBC,aAC9BF,QAEF,GAAOA,EAAK,KAAAA,EAAA,IAAgBG,CAC7B,IAAAC,EAAAN,EAAAC,KAED5B,EAAAE,KAAA4B,OAAAC,cAAA,GAAAF,IAAA,KAAAI,E,uBAWM,IAMNC,IAAA,EAAAL,IAAA,OANWF,EAAAC,OAMX,OAHSD,EAAAC,OAGT,KAFCD,EAAAC,MAED,MAgBM5B,EAACE,KAAQ4B,OAAAC,aAAA,OAAAG,GAAA,KAEPlC,EAAAE,KAAA4B,OAAgBC,aACb,YAAAG,GAGT,KAAM,CAED,IAAIC,EAAKR,EAAMC,KACZQ,EAAKT,EAAGC,KAEd5B,EAAME,KAAA4B,OAAaC,cAAgB,GAADF,IAAC,OAAAM,IAAA,KAAAC,E,WAInC3c,KAAM,G,CE/PH4c,CAAgC3V,KAAM4V,wBAAI7B,EAAAC,G,0BAuBtC,SAAQD,EAAMC,G,qFAOjBpb,QAAS,C,MAEZid,EAAA9B,EAAA9E,OAAA/T,MAEJsZ,EADGtZ,EAAA6Y,EAAAnb,OACHid,EAAA9B,EAAA9E,OAAA/T,IAAA,E,iCC0CS4a,IDzCX5a,ECzDD6Y,EAAAnb,OAoGMid,EAAA9B,EAAA9E,OAAA/T,IAAA,GAIE,K,EAAS,MAAHoZ,GAAG,MAAAE,GAAA,MAAAE,GAAA,MAAAoB,EAAA,MAAA1K,QACV,IAAEuJ,EAAML,GAAA,EAAAE,GAAA,EAEX,GADIH,EAAOzc,KAAA+c,GACX,KAAAD,EAAA,CAEW,IAAGE,EAAaJ,GAAA,MAAeE,GAAA,EAEhC,GADAL,EAASzc,KAAKgd,GACD,KAAPkB,EAAa,CAEvB,IAAIjB,EAAMH,GAAA,MAAAoB,EAGLzB,EAAAzc,KAAAid,E,CAER,CACH,CACA,OAAAR,C,QAME,W,IACArU,KAAAoU,eAAc,CACfpU,KAAAoU,eAAA,GAGOpU,KACR+V,eAAA,G,8BAGI/V,KAAS0T,sBAAM,GAEnB,QAAAxY,EAAA,EAAAA,EAAA8E,KAAAgW,aAA8Bpd,OAAKsC,IACnC8E,KAAAoU,eAAAlZ,GAAA8E,KAAAgW,aAAmC/G,OAAU/T,GAC7C8E,KAAS+V,eAAA/V,KAAAoU,eAAAlZ,MACC8E,KAAAmU,sBAAAjZ,GAAA8E,KAAAiW,qBAAAhH,OAAA/T,GACd8E,KAAA0T,sBAAA1T,KAAAmU,sBAAAjZ,MCpHWA,GAAS8E,KAAK2T,kBACrB/a,SAIUoH,KAAA+V,eAAA/V,KAAAiW,qBAAAhH,OAAA/T,MAEb8E,KAAA0T,sBAAA1T,KAAAgW,aAAA/G,OAAA/T,M,CAcG,GAYEgb,EAAA,SAAA7C,G,IACF8C,EACE/C,EAAsCC,G,OAExC+C,EAAUtC,gBAAAqC,GAAA,E,EASZE,EAA4C,SAAUhD,GAWxC,OAAA6C,EAAkB7C,GAAAiD,QAAA,S,EA0BlCC,EACgB,SAAAlD,GACd,IACA,OAAU+C,EAAoCI,aAAiBnD,GAAA,EAK/D,CAJD,MAAA7W,GAEDnE,QAAA0P,MAAA,wBAAAvL,EAEE,CACD,WAED;;;;;;;;;;;;;;;;;WA4CyB9B,G,cAEH4G,EAAA5G,E,CAqBpB,SAAI+b,EAA+Czb,EAAA0b,GAGnD,KAAAA,aAAYpc,QAAA,OAAAoc,EACb,OAAAA,EAAAjN,aAED,KAAAhQ,KAcQ,OAAS,IAACA,KAHLid,EAGKC,WAClB,KAAArc,YC/MAgH,IAAAtG,MAAA,IAuEA,MACA,KAAA4N,M,2CAUW8N,EAAU5M,eAAV8M,I,cAAoCA,I,OAPhC5b,EAAW4b,GAAAF,EAAAE,K;;;;;;;;;;;;;;;;;MAmCsC,W,gCAAA5W,KAEtDD,EAA0C5I,E,CAAA6I,KAAA4Q,G,YAC1C,WAA8B,E,aAC9B,WAAe,E,aAEf,IAAO5I,SAAG,SAAWP,EAAAC,G,cAE3BA,OAAMA,C,WAKP3H,EAAAG,E,CAAA0Q,EAAA,C,CAIDrZ,IAAO,eACCmD,MAAK,SAAa0X,GACjB,IAAKvL,EAAQ7G,KACnB,gBAAA+H,EAAArN,GACJqN,EAAAlB,EAAAa,OAAAK,GAEKlB,EAAAY,QAAO/M,GCrIb,mBAAA0X,IA2BAvL,EAAAmK,QAAA5R,OAAA,eC3BA,IAAAgT,EAAAxZ,OAAAwZ,EAAArK,GAwCUqK,EACFrK,EACJrN,GAGM,CACN,KAGAkW,C,CF6D4D;;;;;;;;;;;;;;;;YErBxDiG,EACWC,EAAOlZ,G,6IAwBlBmZ,EAAiBnZ,GAAA,eACnBoZ,EAAAF,EAAOE,KAAW,EAGtBC,EAAOH,EAAKG,KAAAH,EAAAI,QACZ,IAAAD,EAAA,UAAA7L,MAAA,wDAEF,IAAA+L,EAAA7c,OAAAgI,OAAA,CAWE8U,IAAS,kCAA4Brf,OAAYgf,GACjDM,IAAAN,EAEFC,MAQQM,IAAAN,EAAiB,KACvBO,UAAcP,EAChBC,MCjJAC,QAAAD,EAkBEO,SAAc,CACfC,iBAAA,SAEeC,WAAA,K,GAYd,MAAK,CACHrB,EAAyCre,KAAKC,UD6D/C,CAED0f,IACI,OAMJ5L,KAAA,SCnECsK,EAAAre,KAAAC,UAAAkf,IALa,IAOfpe,KAAA,IAEe;;;;;;;;;;;;;;;;YAsCb6e,I,8FAdI,E,oBAAA,oB,4HCjEP,SAAAC,I,MAyBE,iBAAQC,WAAO,gBAAfA,UAAA,O,UCOKC,I,OAE2C,I,IAA2B,IAA3B9E,C,oBARzB,iBAAlB+E,S,CAWL,SAAOC,IACR,WAAAjQ,SAAA,SAAAP,EAAAC,GAED,IAKW,IAA6BwQ,GAAC,EAC3BC,EAAe,0DAEpBC,EAAQlQ,KAAA8P,UAAQK,KAAAF,GACjBC,EAAOE,UAAA,WACYF,EAAgB7R,OAAAgS,QAEtCL,GAAAhQ,KAAA8P,UAAAQ,eAAAL,GACA1Q,GAAA,EACI,EACR2Q,EAAAK,gBAAA,WAEDP,GAAA,CAIQ,EACDE,EAAUM,QACJ,WAEL,IAAAnU,EACKmD,GAET,QADAnD,EAAA6T,EACArQ,aAAoB,IAAAxD,OAAgB,EAASA,EAC7CS,UAAA,GACJ,C,CCtEA,MAAA+C,G;;;;;;;;;;;;;;;;;MAkLY,SAAA4Q,G,aAEL5Y,EAAyB6Y,E,CAAI9S,EAAA6S,G,MACxB5Y,EAAA8Y,E,CAAA/S,G,WACAxI,EAAA0H,EAAA8T,G,aACP/Y,EAAA5I,E,CAAA6I,KAAA8F,I,EAGDiT,EAAKvP,KAAOxJ,KAAMgF,I,KACb1H,E,aACMwb,EAC6BjS,EAAA9M,KAhBnB,gB,mIAKb,CAyBJgG,EAAMiZ,E,CAAA5N,Q,qCAGDmG,EAAQ0H,EAAOC,G,0BAGhB3H,E,6EAQQjU,G,QACX6b,EAAAjV,UAAAtL,OAAAwgB,EAAA,IAAAxQ,MAAAuQ,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAGHD,EAAIC,EAAO,GAAKnV,UAAKmV,G,MAGTD,EAAA,O,EACJ,GAAArhB,OAAAiI,KAAAuR,QAAA,KAAAxZ,OAAAuF,G,EACA0C,KAAKkZ,OAAU5b,G,EACjBgc,EAAKC,EAAeD,EAAAR,GAAA,Q,EAGd,GAAA/gB,OAAAiI,KAAAiZ,YAAA,MAAAlhB,OAAAiN,EAAA,MAAAjN,OAAAyhB,EAAA,M,EACP,IAAAC,EAAAD,EAAAE,EAAAZ,G,OACF/Q,C,qBAOsBuR,EAACF,G,iBACpBO,GAAU,SAAAC,EAAAriB,G,0BAGX6d,OAAA1a,GAAA,IAAA3C,OAAAR,EAAA,K,UAKa;;;;;;;;;;;;;;;;cA4BZ8b,G,kBACLA,E,CAIN,SAAAwG,EAAAT,GCrOD,OAAAphB,KAAAC,UAAAmhB,E;;;;;;;;;;;;;;;;SA8CS,SAAAtC,G,iDAGPgD,EAAIvD,EAAAwD,EAAA,S,IAASxD,EAAAwD,EAAA,S,EACPA,EAAC,G,IACH,GAAS,U,EACR,CACJ,C,MAAAvd,GAAA,C,uBAEIwd,E,iBACHC,E,IAoEsB,SAAAnD,G,IACdkD,E,EAAAlD,GAAAkD,O,WACO,iBAALA,GACFA,EAAclQ,eAAM,M,IAaf,SAAAgN,G,MACdoD,EAAApD,GAAAkD,O;;;;;;;;;;;;;;;;;4EA4BA5R,EAAA7Q,G,6FAKO+C,OAAAmB,UAAOqO,eAAAN,KAAApB,EAAA7Q,GAAA,S,mDAIP+C,OAAKmB,UAAcqO,eAAaN,KAAKpB,EAAA7Q,KAAY4iB,EAAA5iB,GAAK0Q,EAASuB,KACjE4Q,EAAIhS,EAAA7Q,KAAA6Q,I,yCAMF,E,aAGDuG,KAAA0L,G,SAEF1L,KAAA2L,G,GACJ,EAAAlZ,GAAA,EAAAC,OAAAC,E,kEAEO,IAAKiZ,EAALhX,EAAK7I,M,MAAL8f,SAAAD,GAAM,OAAW,E,WACvBE,EAAQH,EAACC,G,GAGTG,EAAsBC,IAAAD,EAAAD,IACtB,IAAIG,EACoBD,EAAAF,GAAA,c,+BAKjB,E,EACLjZ,C,2CAGL,QAED,GAAAJ,EAEgB,MAAAC,C,iCAIR,IAAGwZ,EAAHC,EAAGC,EAAApX,OAAAC,cAAAoX,GAAGH,EAAMC,EAAAhX,QAAAC,MAAAiX,GAAA,GAEb,IAAKC,EAACJ,EAACngB,MACN,IAAIwgB,EAAOV,SACFS,GAAC,OAAO,C,EAGrB,MAAA3Q,GACH6Q,GAAA,EAEDC,EAAA9Q,CAOE,SAIK,I,mBAAAwQ,EAAY9W,QAAZ,C,QAIJ,GAAAmX,E,OAJI,C,qBAAYE,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9PjB,SAASC,EAAgBC,GACzB,IAAIC,EAAM,GACL3X,GAA4B,EAAIzC,GAAA,EAAAC,OAAAC,E,YAUlCma,E,gBANG,IAACzJ,EAA2BjS,EAAAkS,EAAjB,CAAiB1O,EAAA7I,MAAA,GAAAnD,EAAAya,EAAA,GAAAtX,EAAAsX,EAAA,GACxBpJ,MAAIC,QAAOnO,GAAjBA,EAAAgS,SAAA,SAAAgP,GACIF,EAAA5jB,KAAA+jB,mBAAApkB,GAAA,IAAAokB,mBAAAD,GACJ,IACMF,EAAM5jB,KAAI+jB,mBAAsBpkB,GAAtC,IAAAokB,mBAAAjhB,G,EAED8I,EAAAlJ,OAAA2W,QAAAsK,GAAA5X,OAAAC,cAAAC,GAAA4X,EAAAjY,EAAAM,QAAAC,MAAAF,GAAA,EAAA+X,EAAApY,EAAAiY,E,OAEIja,G,GAEgB,E,EACNA,C,aAGRqC,GAAsB,MAAAL,EAAAQ,QACvBR,EAAUQ,Q,CAEf,QACC,GAAI5C,EACA,MAAIC,C,SAIXma,EAAA5iB,OAAA,IAAA4iB,EAAAziB,KAAA,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFChEH,aACAuB,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAgCuN,GAC5B,QAAa,IAATA,EACA,MAAM,IAAI2T,eAAe,6DAE7B,OAAO3T,C,uCCTX,aACA5N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAER,SAAmBmhB,EAAUC,GACzB,GAA0B,mBAAfA,GAA4C,OAAfA,EACpC,MAAM,IAAIjhB,UAAU,sDAExBghB,EAASrgB,UAAYnB,OAAO0I,OAAO+Y,GAAcA,EAAWtgB,UAAW,CACnEgO,YAAa,CACT/O,MAAOohB,EACPxgB,UAAU,EACVD,cAAc,KAGlB0gB,GAAYC,EAAqBrhB,QAAQmhB,EAAUC,E,EAZ3D,IAcgC3T,EAd5B4T,GAc4B5T,EAdahR,EAAA,WAe3BgR,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,sCCrBjB,aAQA,SAAS6T,EAAeC,EAAIC,GAKxB,OAJAF,EAAiB3hB,OAAOiU,gBAAkB,SAAwBpF,EAAGoK,GAEjE,OADApK,EAAEqF,UAAY+E,EACPpK,C,GAEW+S,EAAIC,E,CAZ9B7hB,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyBwO,EAAGoK,GACxB,OAAO0I,EAAe9S,EAAGoK,E,uCCN7B,aACAjZ,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAKR,SAA0ByhB,GACtB,OAAOC,EAAgBD,E,EAL3B,IAAIE,EAAaC,EAAuBnlB,EAAA,UACpColB,EAAoBD,EAAuBnlB,EAAA,UAC3CqlB,EAAkBF,EAAuBnlB,EAAA,UACzCslB,EAAkBH,EAAuBnlB,EAAA,UAI7C,SAASmlB,EAAuBnU,GAC5B,OAAOA,GAAOA,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,CAGjB,SAASiU,EAAgBM,GACrB,IAAIC,EAAwB,mBAAR9b,IAAqB,IAAIA,SAAQQ,EAuBrD,OAtBA+a,EAAkB,SAAyBD,GACvC,GAAc,OAAVA,IAAmBI,EAAuB7hB,QAAQyhB,GAAQ,OAAOA,EACrE,GAAqB,mBAAVA,EACP,MAAM,IAAIthB,UAAU,sDAExB,QAAsB,IAAX8hB,EAAwB,CAC/B,GAAIA,EAAO1b,IAAIkb,GAAQ,OAAOQ,EAAO/d,IAAIud,GACzCQ,EAAO1d,IAAIkd,EAAOS,E,CAEtB,SAASA,IACL,OAAOP,EAAgB3hB,QAAQyhB,EAAOlY,UAAWuY,EAAqB9hB,QAAQqF,MAAMyJ,Y,CAUxF,OARAoT,EAAQphB,UAAYnB,OAAO0I,OAAOoZ,EAAM3gB,UAAW,CAC/CgO,YAAa,CACT/O,MAAOmiB,EACPzhB,YAAY,EACZE,UAAU,EACVD,cAAc,KAGfqhB,EAAqB/hB,QAAQkiB,EAAST,E,EAE1CC,EAAgBM,E,uCCzC3B,aACAriB,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAER,SAAoBmiB,EAAQ3U,EAAMiU,GAC9B,OAAOW,EAAU9X,MAAM,KAAMf,U,EAFjC,IAIgCkE,EAJ5B4U,GAI4B5U,EAJahR,EAAA,WAK3BgR,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,GAGjB,SAAS6U,IACL,GAAuB,oBAAZC,UAA4BA,QAAQC,UAAW,OAAO,EACjE,GAAID,QAAQC,UAAUC,KAAM,OAAO,EACnC,GAAqB,mBAAVC,MAAsB,OAAO,EACxC,IAEI,OADA5jB,KAAKgC,UAAU8N,SAASC,KAAK0T,QAAQC,UAAU1jB,KAAM,IAAI,WAAW,MAC7D,C,CACT,MAAO+C,GACL,OAAO,C,EAGf,SAASugB,EAAUO,EAASC,EAAOZ,GAe/B,OAbII,EADAE,IACYC,QAAQC,UAER,SAAmBL,EAAQ3U,EAAMiU,GACzC,IAAI/B,EAAI,CACJ,MAEJA,EAAEziB,KAAKqN,MAAMoV,EAAGlS,GAChB,IACIvN,EAAW,IADGuV,SAASqN,KAAKvY,MAAM6X,EAAQzC,IAG9C,OADI+B,GAAOY,EAAqBriB,QAAQC,EAAUwhB,EAAM3gB,WACjDb,C,GAGEqK,MAAM,KAAMf,U,uCCxCjC,aACA5J,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAA2BsN,GACvB,OAA+D,IAAxDkI,SAAS5G,SAASC,KAAKvB,GAAIwV,QAAQ,gB,uCCN9C,aAQA,SAASC,EAAexB,GAIpB,OAHAwB,EAAiBpjB,OAAOiU,eAAiBjU,OAAOgS,eAAiB,SAAwBnD,GACrF,OAAOA,EAAEqF,WAAalU,OAAOgS,eAAenD,E,GAE1B+S,E,CAX1B5hB,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAyBwO,GACrB,OAAOuU,EAAevU,E,uCCN1B,aACA7O,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAIR,SAAsBgjB,GAClB,IAAIC,EAA4BC,EAA+BljB,UAC/D,OAAO,WACH,IAAmD4L,EAA/CuX,EAAQC,EAAqBpjB,QAAQgjB,GACzC,GAAIC,EAA2B,CAC3B,IAAII,EAAYD,EAAqBpjB,QAAQqF,MAAMyJ,YACnDlD,EAAS2W,QAAQC,UAAUW,EAAO5Z,UAAW8Z,E,MAE7CzX,EAASuX,EAAM7Y,MAAMjF,KAAMkE,WAE/B,OAAO+Z,EAAgCtjB,QAAQqF,KAAMuG,E,GAb7D,IAAIsX,EAA4BK,EAAuB9mB,EAAA,UACnD2mB,EAAkBG,EAAuB9mB,EAAA,UACzC6mB,EAA6BC,EAAuB9mB,EAAA,UAcxD,SAAS8mB,EAAuB9V,GAC5B,OAAOA,GAAOA,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,uCCvBjB,aACA9N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,WACI,GAAuB,oBAAZuiB,UAA4BA,QAAQC,UAAW,OAAO,EACjE,GAAID,QAAQC,UAAUC,KAAM,OAAO,EACnC,GAAqB,mBAAVC,MAAsB,OAAO,EACxC,IAEI,OADAc,QAAQ1iB,UAAUwL,QAAQuC,KAAK0T,QAAQC,UAAUgB,QAAS,IAAI,WAAW,MAClE,C,CACT,MAAO3hB,GACL,OAAO,C,wCCbf,aACAlC,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAGR,SAAoCuN,EAAMsB,GACtC,OAAIA,GAAwC,WAA/B4U,EAAazjB,QAAQ6O,IAAsC,mBAATA,EAGxD6U,EAA4B1jB,QAAQuN,GAFhCsB,C,EAJf,IAAI6U,EAAyBC,EAAuBlnB,EAAA,UAChDgnB,EAAUE,EAAuBlnB,EAAA,UAOrC,SAASknB,EAAuBlW,GAC5B,OAAOA,GAAOA,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,uCCfjB,aACA9N,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QACR,SAAiByN,GAEb,OAAOA,GAAOA,EAAIqB,cAAgB9F,OAAS,gBAAkByE,C,6OCkC1D,IAuECmW,EACFC,EAxECrnB,EAAAC,EAAA,S,uCA6BLqnB,EAAA,IA2CID,E,IAmB2BD,EAAA,KAjBdC,EAAgB,SAAhB,Q,EACbA,EAAA,qB,EAGFA,EACE,eAGJA,IAAA,eAEWA,IAAA,iB,sCAOYD,EAAQG,M,QAO/BH,EAAAI,Q,KAqBAJ,EAAAK,K,KAeAL,EAAAM,K,MA1CEN,EAAAO,M,mBAWUP,EAAAK,K,+HAasB,SAAWhkB,EAAAmkB,G,UAC5C7a,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,I,iCAODze,EAAAokB,U,YACEvlB,MAAOwlB,c,EACRC,EAAAH,G,YAMA,IAAA3T,MAAA,8DAAArT,OAAAgnB,EAAA,OALDI,EAAA9mB,SAA8B6S,GAAAjG,MAAAka,EAAA,C,WAC5BC,EAAI,OAAUrnB,OAAK6C,EACjBb,KAAM,M,OAEHgG,EAAkB0R,E,CAAAtJ,IAPX,C,uCAcdpO,GACSgG,EAAqB5I,E,CAAA6I,KAAAS,G,KAC7B1G,O,KAGAslB,UAAAC,E,iBAMDC,E,KAAwBC,gBAAA,K,EAC6B5nB,KAAAoI,K,QAC9CD,EAALG,E,CAAAO,EAAA,C,oBAA+C,WAChD,OAAAT,KAAAqf,S,kBACE,KAAA3f,KAAA6e,GAAA,UAAAzjB,UAAA,kBAAA/C,OAAA2H,EAAA,6B,KAAH2f,UAAG3f,C,qCAE4BA,G,KAA3B2f,UAA6C,iBAAA3f,EAAA+f,EAAS/f,I,QACP,a,IAClD,W,yBACDR,IAAA,SAAIQ,G,GAAmB,mBAAvBA,EAAuB,UAAA5E,UAAA,qDAAlBkF,KAAA0f,YAAAhgB,C,+CACqBM,KAA0Cwf,e,eAC7C9f,G,KAAE8f,gBAAA9f,C,sBAEpB,W,IAAA,IAAkByZ,EAAAjV,UAAlBtL,OAAkBuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlR,EAAAkR,GAAAnV,UAAAmV,G,KACwBmG,iBAAIxf,KAAAwf,gBAAAva,MAAAjF,KAAA,CAAEA,KAA3Bue,EAA0CG,OAClE3mB,OAAIgI,EAAJ0R,EAAK,CAALtJ,K,KAAiBuX,YAAIza,MAAAjF,KAAA,CAAEA,KAAvBue,EAAsCG,OACvC3mB,OAAAgI,EAAA0R,EAAA,CAAAtJ,I,oBACK,W,IAAA,IAAkBgR,EAAAjV,UAAlBtL,OAAkBuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlR,EAAAkR,GAAAnV,UAAAmV,G,KACuBmG,iBAAIxf,KAAAwf,gBAAAva,MAAAjF,KAAA,CAAEA,KAA3Bue,EAA2CI,SACnE5mB,OAAIgI,EAAJ0R,EAAK,CAALtJ,K,KAAiBuX,YAAIza,MAAAjF,KAAA,CAAEA,KAAvBue,EAAuCI,SACxC5mB,OAAAgI,EAAA0R,EAAA,CAAAtJ,I,IACF5Q,IAAA,OAEemD,MAAA,WACd,QAAAye,EAAAjV,UAAUtL,OAAQuP,EAAA,IAAOS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAClBlR,EAAYkR,GAAOnV,UAAAmV,GAE3BrZ,KAAAwf,iBAAAxf,KAAAwf,gBAAAva,MAAAjF,KAAA,CAEeA,KAITue,EAAcK,M,iBAAd5e,KAAA0f,YAAkBza,MAAAjF,KAAA,CAAZA,KACLue,EAAuCK,MACvC7mB,OACFgI,EAAiB0R,EADR,CACQtJ,IAEnB,G,6BAQI,IAAM,IAAAgR,EAAUjV,UACTtL,OAAAuP,EAAM,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IACTlR,EAAIkR,GAAOnV,UACTmV,G,sBAGmBrZ,KAAKwf,gBAAYva,MAAUjF,KAAK,C,OAK/C6e,M,OACU9e,EAAe0R,EAA3B,CAA2BtJ,K,KAC5BuX,YAAQza,MAASjF,KAAA,C,OAEjB6e,MAEH9mB,OACSgI,EAAA0R,EAAJ,CAAItJ,I,qCAMT,IAAIgR,EAAAjV,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IACJlR,EAAIkR,GAAEnV,UAAamV,GAGvBrZ,KAAAwf,iBAAAxf,KAAAwf,gBAAAva,MAAAjF,KAAA,CAELA,K,SA3CIjI,OAAcgI,EAAA0R,EAAA,CAAAtJ,KAAdnI,KAAA0f,YAAcza,MAAAjF,KAAA,C,cAAdjI,OAAcgI,EAAA0R,EAAd,CAActJ,I,+DA4CrB,G,4yBC3QA,IAAAjD,EAAA9N,EAAA,S,iEAUA,SAASuoB,EAAO5lB,EAAM6lB,G,IAAShhB,EAAAsF,UAAAtL,OAAA,YAAAsL,UAAA,GAA+CA,UAAA,GAAF,GAA3C2b,EAAFjhB,EAAEihB,QAASC,EAAXlhB,EAAWkhB,QAASC,EAApBnhB,EAAoBmhB,SAAUC,EAA9BphB,EAA8BohB,WACnD5H,EAAUJ,UAAUK,KAAKte,EAAM6lB,GAC/BK,GAAc,EAAAC,EAAAC,GAAK/H,GAgBzB,OAfI0H,GACA1H,EAAQ7b,iBAAiB,iBAAiB,SAAC6jB,GACvCN,GAAQ,EAAAI,EAAAC,GAAK/H,EAAQ7R,QAAS6Z,EAAMrb,WAAYqb,EAAMC,YAAY,EAAAH,EAAAC,GAAK/H,EAAQ1S,a,IAGnFma,GACAzH,EAAQ7b,iBAAiB,WAAW,W,OAAMsjB,G,IAC9CI,EACKlhB,MAAK,SAACP,GACHwhB,GACAxhB,EAAGjC,iBAAiB,SAAS,W,OAAMyjB,G,IACnCD,GACAvhB,EAAGjC,iBAAiB,iBAAiB,W,OAAMwjB,G,OAE9C3gB,OAAM,WAAM,IACV6gB,C,CAcX,IAAMK,EAAc,CAAC,MAAO,SAAU,SAAU,aAAc,SACxDC,EAAe,CAAC,MAAO,MAAO,SAAU,SACxCC,EAAgB,IAAI1f,IAC1B,SAAS2f,EAAUzlB,EAAQ4b,GACvB,GAAM5b,aAAkB0lB,eAClB9J,KAAQ5b,IACM,iBAAT4b,EAFX,CAKA,GAAI4J,EAAc3hB,IAAI+X,GAClB,OAAO4J,EAAc3hB,IAAI+X,GAC7B,IAAM+J,EAAiB/J,EAAKN,QAAO,aAAe,IAC5CsK,EAAWhK,IAAS+J,EACpBE,EAAUN,EAAa/F,SAASmG,GACtC,GAEEA,KAAmBC,EAAWE,SAAWC,gBAAgBtlB,YACrDolB,GAAWP,EAAY9F,SAASmG,IAHtC,CAMA,I,EAAMzV,G,EAASnL,EAAAmF,EAAA,CAAAnF,EAAAoF,GAAAC,MAAA,SAAAC,EAAgB2b,G,IAAW7H,EAAGhR,EAAHkR,EAYlC4H,EAVE7a,EACF8a,EAAMC,EAAAjd,U,kEAH4B,IAAAiV,EAAOgI,EAAPvoB,OAAAuP,EAAA,IAAAS,MAAAuQ,EAAA,EAAAA,EAAA,EAAO,GAAPE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlR,EAAAkR,EAAA,GAAO8H,EAAP9H,G,OAEhCjT,EAAKpG,KAAK0F,YAAYsb,EAAWH,EAAU,YAAc,YAC3DK,EAAS9a,EAAGgb,MACZR,IACAM,EAASA,EAAO/oB,MAAMgQ,EAAKkZ,U,SAMjBrZ,QAAQtQ,IAAI,EACtBupB,EAAAC,GAAOP,GAAP1b,MAAAgc,EAAuBlhB,EAAA0R,EAAA,CAAGtJ,IAC1B0Y,GAAWza,EAAGrC,O,gCAFXuB,EAAAE,KAGH,I,yDAduBwb,G,iCAiB/B,OADAR,EAActhB,IAAI0X,EAAM1L,GACjBA,CAnBH,CAXA,C,EAgCR,EAAAgV,EAAAoB,IAAa,SAACC,G,OAAcxhB,EAAAyhB,EAAA,IACrBD,EAAQ,CACX1iB,IAAK,SAAC7D,EAAQ4b,EAAM6K,G,OAAahB,EAAUzlB,EAAQ4b,IAAS2K,EAAS1iB,IAAI7D,EAAQ4b,EAAM6K,E,EACvFvgB,IAAK,SAAClG,EAAQ4b,G,QAAW6J,EAAUzlB,EAAQ4b,IAAS2K,EAASrgB,IAAIlG,EAAQ4b,E,4CCpF7E,aACAtc,OAAOC,eAAeC,EAAAC,QAAS,aAAc,CACzCC,OAAO,IAEXF,EAAAC,QAAQE,QAER,SAAuBK,GACnB,IAAI,IAAIE,EAAI,EAAGA,EAAIgJ,UAAUtL,OAAQsC,IAAI,CACrC,IAAIwb,EAAyB,MAAhBxS,UAAUhJ,GAAagJ,UAAUhJ,GAAK,GAC/CwmB,EAAUpnB,OAAOqU,KAAK+H,GACkB,mBAAjCpc,OAAOqnB,wBACdD,EAAUA,EAAQ3pB,OAAOuC,OAAOqnB,sBAAsBjL,GAAQhF,QAAO,SAASkQ,GAC1E,OAAOtnB,OAAOunB,yBAAyBnL,EAAQkL,GAAKxmB,U,MAG5DsmB,EAAQhV,SAAQ,SAASnV,GACrBuqB,EAAqBnnB,QAAQK,EAAQzD,EAAKmf,EAAOnf,G,IAGzD,OAAOyD,C,EAdX,IAgBgCoN,EAhB5B0Z,GAgB4B1Z,EAhBahR,EAAA,WAiB3BgR,EAAIO,WAAaP,EAAM,CACjCzN,QAASyN,E,sHCvBjB,IAEI2Z,EACAC,EAHJvQ,EAAAra,EAAA,SAwBA,IAAM6qB,EAAmB,IAAIC,QACvBC,EAAqB,IAAID,QACzBE,EAA2B,IAAIF,QAC/BG,EAAiB,IAAIH,QACrBI,EAAwB,IAAIJ,QA0DlC,IAAIK,EAAgB,CAChB1jB,IAAA,SAAI7D,EAAQ4b,EAAM6K,GACd,GAAIzmB,aAAkBwnB,eAAgB,CAElC,GAAa,SAAT5L,EACA,OAAOuL,EAAmBtjB,IAAI7D,GAElC,GAAa,qBAAT4b,EACA,OAAO5b,EAAOynB,kBAAoBL,EAAyBvjB,IAAI7D,GAGnE,GAAa,UAAT4b,EACA,OAAO6K,EAASgB,iBAAiB,QAC3BnhB,EACAmgB,EAAS9b,YAAY8b,EAASgB,iBAAiB,G,CAI7D,OAAOC,EAAK1nB,EAAO4b,G,EAEvB1X,IAAA,SAAIlE,EAAQ4b,EAAMlc,GAEd,OADAM,EAAO4b,GAAQlc,GACR,C,EAEXwG,IAAA,SAAIlG,EAAQ4b,GACR,OAAI5b,aAAkBwnB,iBACR,SAAT5L,GAA4B,UAATA,IAGjBA,KAAQ5b,C,GAGvB,SAAS2nB,EAAavQ,GAClBmQ,EAAgBnQ,EAASmQ,E,CAE7B,SAASK,EAAaC,GAIlB,OAAIA,IAASnC,YAAYjlB,UAAUiK,aAC7B,qBAAsB8c,eAAe/mB,WA7GnCumB,IACHA,EAAuB,CACpBc,UAAUrnB,UAAUsnB,QACpBD,UAAUrnB,UAAUunB,SACpBF,UAAUrnB,UAAUwnB,sBAqHEzI,SAASqI,GAC5B,WAAU,QAAA1J,EAAAjV,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlR,EAAAkR,GAAAnV,UAAAmV,GAIb,OADAwJ,EAAK5d,MAAMie,EAAOljB,MAAOmI,GAClBua,EAAKT,EAAiBpjB,IAAImB,M,EAGlC,WAAU,QAAAmZ,EAAAjV,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlR,EAAAkR,GAAAnV,UAAAmV,GAGb,OAAOqJ,EAAKG,EAAK5d,MAAMie,EAAOljB,MAAOmI,G,EAtB9B,SAAUgb,GAAY,QAAAhK,EAAAjV,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,EAAA,EAAAA,EAAA,EAAO,GAAPE,EAAA,EAAAA,EAAAF,EAAAE,IAAAlR,EAAAkR,EAAA,GAAAnV,UAAAmV,G,IACd+J,EAALhd,GAAKgd,EAAAP,GAAKrZ,KAALvE,MAAAme,EAAA,CAAUF,EAAOljB,MAAOmjB,GAAxBprB,OAAoCgI,EAAA0R,EAAA,CAAGtJ,KAElD,OADAia,EAAyBljB,IAAIkH,EAAI+c,EAAWE,KAAOF,EAAWE,OAAS,CAACF,IACjET,EAAKtc,E,EAsBxB,SAASkd,EAAuB5oB,GAC5B,MAAqB,mBAAVA,EACAkoB,EAAaloB,IAGpBA,aAAiB8nB,gBAhGzB,SAAwCpc,GAEpC,IAAI+b,EAAmBjhB,IAAIkF,GAA3B,CAEA,IAAMrC,EAAO,IAAIiE,SAAQ,SAACP,EAASC,GAC/B,IAAM6b,EAAW,WACbnd,EAAGod,oBAAoB,WAAY5T,GACnCxJ,EAAGod,oBAAoB,QAASzb,GAChC3B,EAAGod,oBAAoB,QAASzb,E,EAE9B6H,EAAW,WACbnI,IACA8b,G,EAEExb,EAAQ,WACVL,EAAOtB,EAAG2B,OAAS,IAAI0b,aAAa,aAAc,eAClDF,G,EAEJnd,EAAG7J,iBAAiB,WAAYqT,GAChCxJ,EAAG7J,iBAAiB,QAASwL,GAC7B3B,EAAG7J,iBAAiB,QAASwL,E,IAGjCoa,EAAmBjjB,IAAIkH,EAAIrC,EApBvB,C,CA8FA2f,CAA+BhpB,GA9JhBkU,EA+JDlU,GAzJVqnB,IACHA,EAAoB,CACjBrB,YACAK,eACAD,SACAgC,UACAN,kBAZiDmB,MAAK,SAACnQ,G,OAAM5E,aAAkB4E,C,IAgK5E,IAAI6J,MAAM3iB,EAAO6nB,GAErB7nB,GAlKW,IAACkU,C,CAoKvB,SAAS8T,EAAKhoB,GAGV,GAAIA,aAAiBkpB,WACjB,OA3IkBxL,EA2IM1d,GA1ItBsW,EAAU,IAAIhJ,SAAQ,SAACP,EAASC,GAClC,IAAM6b,EAAW,WACbnL,EAAQoL,oBAAoB,UAAWK,GACvCzL,EAAQoL,oBAAoB,QAASzb,E,EAEnC8b,EAAU,WACZpc,EAAQib,EAAKtK,EAAQ7R,SACrBgd,G,EAEExb,EAAQ,WACVL,EAAO0Q,EAAQrQ,OACfwb,G,EAEJnL,EAAQ7b,iBAAiB,UAAWsnB,GACpCzL,EAAQ7b,iBAAiB,QAASwL,E,KAGjChJ,MAAK,SAACrE,GAGHA,aAAiBooB,WACjBb,EAAiB/iB,IAAIxE,EAAO0d,E,IAI/BhZ,OAAM,WAAM,IAGjBkjB,EAAsBpjB,IAAI8R,EAASoH,GAC5BpH,EA9BX,IAA0BoH,EAChBpH,EA6IN,GAAIqR,EAAenhB,IAAIxG,GACnB,OAAO2nB,EAAexjB,IAAInE,GAC9B,IAAMopB,EAAWR,EAAuB5oB,GAOxC,OAJIopB,IAAappB,IACb2nB,EAAenjB,IAAIxE,EAAOopB,GAC1BxB,EAAsBpjB,IAAI4kB,EAAUppB,IAEjCopB,C,CAEX,IAAMZ,EAAS,SAACxoB,G,OAAU4nB,EAAsBzjB,IAAInE,E,w0BC7IZqpB,EAAA;;;;;;;;;;;;;;;;;8CAiCvChkB,EAAA5I,EAAA,CAAA6I,KAAAgkB,GC1EDhkB,KAAAikB,c,KAuBaC,QAAA,W,QACgCnkB,EAAGG,E,CAAA8jB,EAAA,CAqB9C,C,IAnBA,M,MAAA,SAAIzsB,EAAamD,GACF,MAATA,EACFsF,KAAAikB,YAAYE,WAAYnkB,KAAAokB,cAAA7sB,IAExByI,KAAKikB,YAAWnsB,QAASkI,KAAAokB,cAAA7sB,IAAA,EAAA4K,EAAAlK,WAAAyC,G,oBAQ3B,SAAYnD,GACb,IAAA8sB,EAAArkB,KAAAikB,YAAA7qB,QAAA4G,KAAAokB,cAAA7sB,I,qCAED,G,KAEC,S,uEC3CH,CAkCMA,IAAA,gB,uCAIA,G,CAKAA,IAAA,WACAmD,MAAA,WACA,OAAWsF,KAAAikB,YAAA1a,UACZ,K,KCa8B+a,EAAA,W,sBAAqBC,IACrCxkB,EAAA5I,EAAb,CAAa6I,KAAAukB,GACZvkB,KAAKwkB,OAAO,CAAG,EAClBxkB,KAAMykB,mBAAiB,C,CAyDE,OAnDD1kB,EAEtBG,E,CAAWqkB,EAAA,C,KAIX,MAEF7pB,MAAW,SAAInD,EAAAmD,GAChB,MAAAA,SAAAsF,KAAAwkB,OAAAjtB,GAEcyI,KAAAwkB,OAAAjtB,GAAAmD,CACf,GAOF,CAKAnD,IAAA,MASEmD,MAAA,SAAAnD,GAIW,OAAK,EAAI4K,EAAEuiB,UAAA1kB,KAAAwkB,OAAAjtB,GAAAyI,KAAAwkB,OAAAjtB,GACpB,IACA,GAID,CAEMA,IAAA,SACLmD,MAAA,SAAAnD,UACAyI,KAAAwkB,OAAAjtB,EACD,KAG0BgtB,C,CA5DM,GAkFgBI,EAAA,SAAAC,GACjD,IAIW,uBAAA5nB,aAAsC,IAAAA,OAAA4nB,GAAA,CAAjB,IAAHC,EAAA7nB,OAAA4nB,GAE7B,OAFiDC,EAAA/sB,QAAA,6BAC3C+sB,EAAmCV,WAAA,qBACzC,IAAAW,EAAyBD,EACzB,CACA,OAAAroB,GAAA,C,OAE+B,IAAkB8nB,C,EACVS,EAAiBJ,EAAA,gBAChCK,EAAAL,EAAA,kB,EAmDA,MAAAnkB,EAAAC,QAAA,sB,KAKpB,E,6CAWU,EAAA0B,EAAiBmT,mBAAajC,G,kCAGvB4R,EAACC,S,SACZC,OAAArR,gBAAAsR,E,uEAML/L,GAAenV,UAAYmV,G,qCAK7BxR,EAAAwd,EAAAnqB,GACF0N,MAAAC,QAAAhB,OAAA,iBAAAA,GACD,iBAAAA,EAAAjP,OAAAoM,GAAAsgB,EAAArgB,MAAA,KAAA4C,GAEF7C,GAAA,iBAAA6C,GAAA,EAAA1F,EAAAlK,WAAA4P,GAKAA,EAKA7C,GAAA,GAIE,C,OAEOA,C,EAQLugB,EAAqB,K,GAOnB,EAWAC,EACO,SAAAC,EAAAC,I,IACCC,SACVD,IAAA,IAAAD,IAAA,IAAAA,EAAA,+CAES,I,GAEXG,EAAA5G,SAAAxe,EAAAqlB,SAAAlH,QAEW4G,EAAaK,EAEKttB,IAAAklB,KAAAoI,GAEtBF,GAAWV,EACA9lB,IAAA,uBAGd,mBADQumB,EACRF,EAAmDE,GAK5CF,EAAA,KACPP,EAAmCtoB,OACrC,mB,EAKFopB,EACa,W,sDAITT,EAAQhM,GAAAnV,UAAAmV,G,IAE0B,IAAjC0M,IACHA,GACa,EAEN,OAAJR,IAAuB,IAAnBP,EAAmBnmB,IAAA,oBAAA2mB,GAAA,IAE1BD,EAAO,CACR,IAAAvgB,EAAAsgB,EAAArgB,MAAA,KAAAogB,GAEEE,EAAQvgB,EACX,C,EAGFghB,EAAA,SAAAC,GAUE,OAAS,WAEL,IAAG,IAAI9M,EAAOjV,UACTtL,OAAAysB,EAAA,IAAAzc,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAIgM,EAAAhM,GAAAnV,UAAAmV,GAGPyM,EAAc7gB,WAAA,GACXghB,GAILluB,OAAkBgI,EAA2B0R,EAArC,CAAqC4T,IAGjD,C,EAGFa,EAAA,WAOE,IAAK,IAAM/M,EAAOjV,UACZtL,OAAIysB,EAAe,IAAIzc,MACtBuQ,GAASE,EAAM,EAAAA,EAAAF,EAAAE,IAGvBgM,EAAAhM,GAAAnV,UAAAmV,GAuBC,IAAArU,EAAA,4BAAAsgB,EAAQrgB,WAAA,EAAwBlF,EAAhC0R,EAAQ,CAAR4T,IAEAO,EACa7d,MAAA/C,E,EAEbmhB,EAAmB,W,4EAKjBnhB,EAAM,yBAAAjN,OAAAutB,EAAArgB,WAAA,EAAAlF,EAAA0R,EAAA,CAAA4T,K,QACAtd,MAAA/C,GACL,IAAIoG,MAAIpG,E,IAEC,W,IACV,IAAImU,EAAKjV,UAAOtL,OAAAysB,EAAA,IAAAzc,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAEhBgM,EAAKhM,GAASnV,UAAWmV,G,MAElB,qBAAwBiM,EAA2BrgB,WAAA,EAAAlF,EAAA0R,EAAA,CAAA4T,I,EAC1Ctf,KAAAf,E,EAYhBohB,EAAyB,SAAAhN,G,MACN,iBAAVA,IAAaA,UAAAiN,OAAAC,mBAAAlN,IAAAiN,OAAAE,kB,EAsFtBC,EAA2B,aAK7BC,EAAY,aAqBRC,EAAA,SAAArM,EAAAC,G,GACFD,IAAKC,EAAA,SACL,GAAOD,IAAGmM,GAAAlM,IAAAmM,EAAA,S,sGAOQ,OAAVE,EAAsB,EAC5BtM,EAAAC,GAAA,G,EA0BNsM,EAAA,SAAAvM,EAAAC,GAIE,OAAMD,IAAAC,EACH,E,0BASH,GAAAlS,GACE7Q,KAAU6Q,EAAM,OAAAA,EAAA7Q,GAIlB,UAAA6T,MAAA,yBAAA7T,EAAA,mBAAA4K,EAAAlK,WAAAmQ,GAaF,EAaEye,EAAsD,SAAAze,G,yDAEtD,IACEuG,EAAO,GAIP,IAAI,IAAC4L,KAAAnS,EAAYuG,E,UAKZ0U,OAKP,IAHG,IAAA9rB,EAAgB,IAGZ2D,EAAA,EAAQA,EAAAyT,EAAA/V,OAAAsC,IACjB,IAAAA,IAAA3D,GAAA,KC7nBAA,IAAA,EAAA4K,EAAAlK,WAAA0W,EAAAzT,I,UA8Ba2rB,EAIDze,EAAAuG,EAA0DzT,K,iBAIK,SAAAmY,EAAAyT,G,2CAIzE,G,8CACElvB,KAAKyb,EAAK0T,UACRvT,IAAOsT,I;;;;;;;;;;;;;;;;cASO1e,EAAMH,G,eAEZG,EAAA0B,eAAAvS,IAAA0Q,EAAA1Q,EAAA6Q,EAAA7Q,G,iCAOW6uB,EAELY,GAAA,uB,QACjBC,EAAAC,EAAAhsB,E,OAED,I,eAKC8rB,IAAAG,IAAA,M,uBACFC,KAAAC,IAAA,U,mDCrCYC,E,0BD4BW,G,cAAA,OCvBI9qB,EAAA,EACHyqB,EAAAG,KAAAG,MAAAP,EAAbI,KAAAC,IAAA,GAAiD,S,MAEG,G,IAC5DnsB,EDmBoB,GCnBVA,KACR,E,SAA8B,EAAK,EAAK,G,EAAUksB,KAAAI,MAAAP,EAAA,G,kCAItDG,KAAAI,MAAAhrB,EAAQ,G,gHAOS,I,EAAX5D,SAAW6uB,EAAK,IAAAA,G,GACAA,C,UAKXC,a,QA+B+C,IAAAC,OAAA,qB,gBAKtD,W,GAgBE,SAAAtU,G,KAIC3J,KAAA2J,GAAc,C,MACpBgT,OAAAhT,G,uCAgBqB,SAAApL,G,6BAIrB,W,kBAID,M,8CAAAzL,C,cAAA,G,MCpGkB,SAAsByL,EAAA2f,G,MACtBC,WAAA5f,EAAA2f,G,MAHA,iBAAME,GACG,oBAATC,M,KACa,W,KACbC,WAASF,GACT,iBAAcA,KAAa,O,EACE,QAE7CA,C,KAiBM,W,sBAEPG,EAAAC,EAAAC,G,MAEDnoB,KACMD,EAA6B5I,E,CAAE6I,KAAAioB,G,cAC7BC,E,sBACKC,E,cAGVA,aAAA,EAAAA,EAAAtmB,aAAA,C,UACF,I,kDAED,OAAAgF,EAAAuhB,SAAQA,C,WAEFroB,EACCG,E,CAAO+nB,EAA6B,C,KAG1C,W,6BAEU,OAAXjoB,KAAAooB,SAWWpoB,KAAIooB,SAAaC,SAACC,GAXlB,IAAAtgB,SAAA,SAAAP,EAAAC,GAAX,IAAA6gB,EAAA1hB,E,iEAOD,KAEQ,GAMR,GAcC,CACAtP,IAAA,yBAEImD,MAAgB,SAAA8tB,GACZ,IAAKjkB,EAGO,QAALA,EAAKvE,KAAAmoB,wBAClB,IAD8B5jB,GAE3BA,EAAQ1F,MAACE,MAAS,SAAUqpB,GAIrB,OAAMA,EAAAK,iBAA2BD,EAEzC,GAIE,GAGJ,CACCjxB,IAAA,wBAEImD,MAAO,WAChBguB,EAAA,oDAAA3wB,OAAAiI,KAAAkoB,SAAA,oFC9IA,K,EDkEU,G,cC9BT,aCpCD,SAAAS,EAAAT,EAAAU,EAAAC,GAsBM,IAAAhiB,EAAA7G,KAEUD,EAAA5I,EAAV,CAAmC6I,KAAA2oB,GACjC3oB,KAAAkoB,SAAaA,EAEfloB,KAAC4oB,mBAIL5oB,KAAO6oB,gBACR7oB,KAAA8oB,MAAA,KAEe9oB,KAAA8oB,MAAAD,EAAAhnB,aAAA,CAIRC,UAAa,IAMZ9B,KAAA8oB,OAAAD,EAAAE,QAAU,SAAiBC,GACpC,OAAAniB,EAAAiiB,MAAAE,CC7CA,G,CCuDa,ODhCAjpB,EASoCG,E,CAAAyoB,EAAA,C,CAAjBpxB,IAAA,WARdmD,MAAA,SAAiB4tB,GACf,IAAAzhB,EAAA7G,KACA,OAAAA,KAAA8oB,MAad9oB,KAAK8oB,MAAOT,SAAQC,GAAAlpB,OAAA,SAAA2I,G,qHAIxB,MAKAC,QAAcN,OAACK,EACb,IAvBsB,IAAAC,SAAA,SAAAP,EAAAC,GACjB,IAAwBuhB,EAAKpiB,EAOpCghB,YAAA,WACOoB,EAAAH,MAAqBG,EAAAZ,SAAYC,GAAAvpB,KAAA0I,EAAAC,GAC1BD,EAAG,KACX,K,mDAsBK+gB,GARPxoB,KAAM8oB,MAAA9oB,KAAY8oB,MAAKI,qBAChBV,GAEPxoB,KAAA6oB,cAAYhqB,MAAAE,MAAiB,SAAKiqB,GAClC,OAAKA,EAAKE,qBAAoBV,E,sDAYtBA,G,KACPK,cAAAhqB,MAAAE,MAAA,SAAAiqB,GACD,OAAKA,EAAAG,wBAAqBX,E,mCAG/B9tB,MAAA,WCxED,IAAA0uB,EAAA,0DAAAppB,KAAAkoB,SAAA,iFAgDa,eAAAloB,KAAA4oB,iBAAgCQ,GAAQ,uJACxC,mBAAAppB,KAAA4oB,iBAA0CQ,GAAA,2JAC1CA,GAAA,kKACAV,EAAAU,EACA,KAGAT,CACN,C,GACkDU,GAAA,WAC5C,aAEA,SAAAC,EAAAC,GAEbxpB,EAAA5I,EAAA,CAAA6I,KAAAspB,GACAtpB,KAAAupB,aACA,C,OACMxpB,EAAiBG,EAAjB,CAAyBopB,EAAA,CACzB,CACA/xB,IAAA,WAENmD,MAAA,SAAA4tB,GAOA,OAAAtgB,QAAAP,QAAA,CAKA8hB,YAAAvpB,KAAAupB,a,IAgCiBhyB,IAAA,yBACEmD,MAAA,SAAU8tB,GAGRA,EAATxoB,KAAAupB,YACiB,GAjC3B,CACahyB,IAAA,4BAUSmD,MAAA,SAAS8tB,GAAA,GA0B7B,CACIjxB,IAAC,wB,sBAMH+xB,C,CAxEmD,G;;;;;;;;;;;;;;;;;cAqGzC,6E,GAGI,Y,GAID,e,GAkBc,W,4BAGnBE,EAAKC,G,gBAGP7wB,OAAU,QAAM,IAAAsL,UAAA,IAAAA,UAAoC,GAASwlB,EAAAxlB,UAAAtL,OAAA,YAAAsL,UAAA,GAAAA,UAAA,MAAAylB,EAAAzlB,UAAAtL,OAAA,YAAAsL,UAAA,IAAAA,UAAA,GAGjEnE,EAAY5I,E,CAAA6I,KAAA4pB,G,mEACVC,E,oBACAH,E,mCACKC,E,WACNG,EACDpC,c,kBACEqC,MAAKC,OAAShqB,KAAG+pB,MAAAtM,QAAA,Q,kBAEnBsH,EACAlmB,IAAA,QAAAirB,IAAA9pB,KAAA+pB,K,8DASuB,OAAzB/pB,KAAIiqB,aAAKD,OAAgB,I,8CAkBR,mBADjBhqB,KACEkqB,SACiB,wBAAjBlqB,KAAAkqB,O,mBAUH,WACF,OAAAlqB,KAAA+pB,K,kBAEDI,IAAAnqB,KAAAiqB,eAGAjqB,KAAAiqB,aAAKE,EACEnqB,KAAAoqB,mBAAgBrF,EAAsC7lB,IAAA,QAAAc,KAAA+pB,MAAA/pB,KAAAiqB,c,IAyC7D1yB,IAAA,W,MAGA,W,yBAEA,O,sDAAA8b,C,2CASGgX,EAAArqB,KAAAsqB,OAAA,qB,sEAGD,MAAI,GAAKvyB,OAAAsyB,GAAgBtyB,OAAAiI,KAAA8pB,KAAA,KAAA/xB,OAAAwyB,E,OAzHI,G,YA0IVC,EAAAze,EAAAyP,G,sBAEjB,iBAAAzP,EAAA,+B,sEAGC0e,GAAAD,EAAAF,OAAA,kBAAAE,EAAAP,aAAA,Y,QACFS,G,MACF,IAAAtf,MAAA,4BAAAW,GADE0e,GAAAD,EAAAF,OAAA,sBAAAE,EAAAP,aAAA,OACF,E,SAjBoCO,G,SAClCV,OAAAU,EAAAP,cAAAO,EAAAG,gBAAAH,EAAAb,6B,4CAkBHnO,GAAA,SAAAjkB,EAAAmD,G,OAIAnD,EAAA,IAAAmD,E,MAEIkwB,EAAK7xB,KAAK,I;;;;;;;;;;;;;;;;UA0BH,W,0BAMVgH,EAAA5I,E,CAAA6I,KAAA6qB,G,yBAED9qB,EAAAG,E,CAAA2qB,EAAA,C,KAME,mB,MAGA,SAAsBC,GACtB,IAAMC,EAAS7mB,UAA+BtL,OAAA,YAAAsL,UAAA,GAAAA,UAAA,MAC9C,EAAS/B,EAACuiB,UAAA1kB,KAAAgrB,UAAqDF,KAAA9qB,KAAAgrB,UAAAF,GAAA,GAC/D9qB,KAAAgrB,UAAUF,IAAAC,C,QAKV,M,MACD,W,2CA1BU,G,GAhGV,G;;;;;;;;;;;;;;;;wBAGMP,EAAWjhB,W,gCAAA0hB,E;;;;;;;;;;;;;;;;;wCAyJlBC,EAAaC,G,+BAIbnrB,KAAYorB,iBAAO,GAsBjBprB,KAAKqrB,mBAAA,E,6DAMH9zB,IAAA,aAGAmD,MAAO,SAAA4wB,EAAAlZ,G,0BAIHpS,KAACurB,QAAWnZ,E,kDAGZpS,KAASurB,U,kBAGb,G,4BAWE,SAA0BC,EAAApS,GAE1B,IADApZ,KAAOorB,iBAAGI,GAAApS,EACVpZ,KAAAorB,iBAAIprB,KAAAqrB,qBAA2B,CAC3B,IAAEzP,EACJ,SAAA1gB,GAEFuwB,EAAAvwB,IAAIwwB,IAAG,WACR7kB,EAAAskB,WAAAM,EAAAvwB,GACI,GACA,EACA2L,EAAc7G,KACpByrB,EAAAzrB,KAAAorB,iBAAAprB,KAAAqrB,2B,qIAkDHrrB,KAAAurB,UAGAvrB,KAAKurB,U,mBAIK,K,wCA4BO,Q,GACG,Q,GA2C4B,W,wBAkBpCI,EAAAnB,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,G,WAIPjsB,EAAA5I,E,CAAA6I,KAAAisB,G,YAEDN,E,cACInB,E,mBAEGoB,E,mBAEPC,E,KAEHC,Y,oDAEDI,UAAA,E,mBAMA,E,iCAEMlG,EAAkB2F,G,YAAEQ,GAAW3B,G,WAAE,SAAIhP,G,SAAsBqQ,gBAAArQ,EAAA,GAAA3U,EAAAglB,e,mBAOhE9rB,EAAAG,E,CAAA+rB,EAAA,C,gCASC,IAAIG,EAACpsB,KAELA,KAAMqsB,cAAe,E,KACnBC,cAAKC,E,KACLC,gBAAkB,IAACC,GAAAC,G,KACnBC,WAAA,E,wFASIP,EAAAQ,Y,yCA/EmB,MPtLA,SAAA3kB,G,IACzB,EAAI9F,EAAO0qB,cAAQ,aAAA7zB,SAAA8zB,WAAA7kB,QAClB,CAGC,IAAC8kB,GAAU,EACNC,EAAa,W,cAMhBD,IAGJA,GAAgB,EACjB9kB,KAPG4f,WAAmBmF,EAAA5F,KAAAI,MAAA,IASvB,EAEFxuB,SAAAuD,kBAKUvD,SACCuD,iBAAW,mBACXywB,GACP,GAKJhwB,OAAAT,iBAAA,OAAAywB,GAAA,IAKgBh0B,SAAOi0B,cAOjBj0B,SAASi0B,YAAgB,iCAGzB,aAFSj0B,SACX8zB,YACEE,GAEG,I,+BAmBT,CAKA,C,EOiMM,WAEE,IAACE,EAAYd,EAClB,IAAAA,EAAAO,UAAA,C,qCAED,QAAAxT,EAAAjV,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAKAlR,EAAAkR,GAAoBnV,UAAkBmV,GAChC,IAAA8H,EAAAphB,EAAAkS,EAAA,CAAS9J,EAAA,GAAAglB,EAAAhM,EAAA,GAAAiM,EAAAjM,EAAA,GAAAkM,E,eAIX,GAFcH,EAAAI,wBAA4BnlB,GAE1C+kB,EAAWK,gBAOP,GANEL,EAAAM,uB,kEAKFN,EAAMO,gBAAiB,EACvBN,IAAcO,GACdR,EAAU3zB,GAAK6zB,EACfF,EAAU7uB,SAAUgvB,M,WAiBlB,MAAK,IAAAjiB,MAAY,kCAAS+hB,G,MAZlB,IAAAtmB,EAAUqmB,EAGdA,EAAAK,gBAAoBI,cAAkB,EAKvCT,EAAAV,gBAAAoB,WAAAR,GAAA,WACDvmB,EAAA+lB,WACJ,GACE,MAAAM,EAAAN,WAC0B,C,mBAE1B,IAAAzT,EAAAjV,UAAAtL,OAAAuP,EAAA,IAAAS,MAAAuQ,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IACFlR,EAAKkR,GAASnV,UAASmV,G,8BAGxB6T,EAAAI,wBAAAnlB,GACK+kB,EAAOV,gBAAGqB,eAAAC,EAAA1U,EAErB,e,yBA7PD,IAAA2U,EAAA,CAKQA,MAA2D,KACjEA,EAA8B,IAAA3G,KAAAI,MAAA,IAAAJ,KAAA4G,U,8FAG1BD,EAAe,EAAAE,GACjB7B,EAASL,qBAAiBgC,EAAQ,EAAA3B,EAAAL,oBAC9BK,EAAAJ,gBAAA+B,EAAA,GAAA3B,EAAAJ,e,0KAIFkC,EAAU9B,EAAO+B,MAAAJ,G,EACjBK,K,oCAEEb,gBAAAc,OAAIH,GAAA,WAEI,GA0Lf,C,yBA5KC,W,KAEOX,gBAAWe,cAChBtuB,KAAOzG,GAAMyG,KAAA3B,U,KAERkwB,uB,sDAuNV7zB,MAAA,cC9rBK,CAKCnD,IAAI,YAQXmD,MAAA,W,kBAGasF,KAAAutB,kB,6BA4BIvtB,KAANutB,gBAAc,MAIJvtB,KAATwuB,iBA/BIx1B,SAAA2D,KAAsB8xB,YAACzuB,KAAAwuB,gBAC/BxuB,KAAoBwuB,eAAK,MAEtBxuB,KAAGwtB,uBACCkB,aAAK1uB,KAAAwtB,sBA+BJxtB,KAAAwtB,qBAAA,KAER,G,KAmDN,Y,MAIA,W,iBACMxtB,KAACouB,KAAA,8BACDpuB,KAAC2uB,YAEA3uB,KAAKssB,gBAELtsB,KAAAssB,cAAsBtsB,KAACytB,gB,gFAcvBW,KAAC,6B,+CAqBOhV,G,OACc,EAAMjX,EAAOlK,WAAAmhB,G,gBAAGwV,EAAAh2B,O,KAExCi2B,OAAAC,iBAAA,aAAAF,EAAAh2B,Q,QAEDm2B,GAAU,EAAA5sB,EAAA6sB,cAAAJ,GAGVK,EACEC,EAAiBH,ED8YTI,MC1YXj0B,EAAA,EAAAA,EAAA+zB,EAAAr2B,OAAAsC,IAEG8E,KAACutB,gBAAgB6B,eAAKpvB,KAAAqsB,cAAA4C,EAAAr2B,OAAAq2B,EAAA/zB,IACxB8E,KAAAqsB,e,uCAYA,SAAA9yB,EAAA81B,GAEF,KAAI,EAACltB,EAAO0qB,aAAZ,C,KACE2B,eAAUx1B,SAAAs2B,cAAA,U,cAE0C,K,EAEjC,GAAA/1B,E,EAEF,GAAA81B,E,KACjBb,eAAAe,IAAAvvB,KAAAmuB,MAAAJ,GACH/tB,KAAAwuB,eAAA3xB,MAAA2yB,QAAA,O,8CATuB,C,QA+DxB,0B,MAAA,SAAqBrnB,GAEpB,IAAAsnB,GAAA,EAAAttB,EAAAlK,WAAAkQ,GAAAvP,O,sEAEO,I,sCAQW82B,aAAU,C,wBAI7Bh1B,M,WAKEuxB,EAAiB0D,gBAAA,C,IAGnBp4B,IAAA,c,+DAUQ00B,EAAoB0D,gBAAA,oBAAA32B,UAAA,MAAAA,SAAAs2B,eN1PtB,iB,QAAAtyB,OAAI,QAAAA,OAAA,6BAAA0M,KAAA1M,OAAkE4yB,SAAAC,O,8DKmiB5B,G,oCChShDC,EAAAC,EAAAC,EAAAC,EAAA9B,G,GAIApuB,EAAoB5I,E,CAA8B6I,KAAA8vB,G,kBACvCG,E,WAGH9B,E,yBAIa,IAAG5b,I,iBAIf,G,KAQR2d,cAAA9I,KAAAI,MAAA,IAAAJ,KAAA4G,U,KAEDL,cAAA,G,IAIAd,aAoCQ7sB,KAAA+vB,UAASA,E,iBAATC,MApCJ,C,8FD0NuB,UChNUhwB,KAAOmwB,0BAAEH,E,KAG5CI,SAAYN,EACLO,gB,IAIPC,EAAU,G,uEAKJ,4BAASt3B,SAAAu3B,OAAA,e,IAEfC,EAAS,eAAgBF,EAAA,iB,SAEvBF,SAAKK,IAAApY,O,KACN+X,SAAAK,IAAAC,MAAAF,GAEDxwB,KAAIowB,SAAKK,IAAQlY,O,OACf/b,G,EACmB,2BACpBA,EAAAm0B,OAAA7K,EAAAtpB,EAAAm0B,OACF7K,EAAAtpB,E,UAKGuD,EAAiBG,E,CAAA4vB,EAAA,C,iCAQpB9vB,KAAA4wB,OAAA,E,0BAQG5wB,KAAKowB,SAAKK,IAAA9zB,KAAAzD,UAAA,GACV2uB,YAAK,WACN,OAAAhhB,EAAAupB,WACFp3B,SAAA2D,KAAA8xB,YAAA5nB,EAAAupB,U,gBAED,GAAAhJ,KAAAI,MAAA,G,CAKE,IAAAqJ,EAAmB7wB,KAAA8wB,aACfD,I,uBAEFA,I,4DAiBF7wB,KAAI+wB,KAAA1B,E,KACFuB,OAAK,EAEL5wB,KAAKgxB,gB,4BAnUP,WAiBA,GAAIhxB,KAAA4wB,OAAa5wB,KACf2tB,cAAU3tB,KAAAixB,oBAAAC,MAAqBlxB,KAAGmxB,YAAcv4B,OAAA,QAInDoH,KAAAkwB,gB,wBA+FMnC,EAAa,GAAA/tB,KAAA+wB,KAApBhD,EAAoB,IAAA/tB,KAAAkwB,cAIb,IAHL,IAAAkB,EAAApxB,KAAoBmuB,MAAAJ,G,SAGf/tB,KAAWmxB,YAAAv4B,OAAA,IAEZ,KADeoH,KAAMmxB,YAAA,GACLE,EAAAz4B,ODgWR,GChWiD04B,EAAA14B,QD+VJ,MCxVtD,MALK,IAAA24B,EAAevxB,KAAGmxB,YAAU9P,QAC9BiQ,EAAmBA,SACrBp2B,EAAA,IAAAq2B,EAAAC,IADqBF,MACrBp2B,EAAA,IAAAq2B,EAAAE,GADqBH,KACrBp2B,EAAA,IAAAq2B,EAAAF,EAAIn2B,GAIP,C,OAEDk2B,GACeE,EAIhBtxB,KAAA0xB,gBAAAN,EAAApxB,KAAAkwB,gB,UAeM,G,4CARPlwB,KAAAmxB,YAAAv5B,KAAA,CC9QF45B,IAAAG,E,KA+BaN,EAAAjY,I,8DAuCR,SAAAwY,EAAAC,GAED,IAAIhrB,EAAA7G,K,KACuCixB,oBAAAr0B,IAAAi1B,G,MACpC,WACLhrB,EAAMoqB,oBAAmB9f,OAAW0gB,G,EAC/Bb,a,IACCnJ,WAAaiK,EAAU1K,KAAcI,MFihBjC,O,eE9gBT,W,aAJIuK,G,sCAKLH,EAAiBI,G,IAClBnrB,EAAA7G,MACF,EAAAmC,EAAA0qB,a,gDAED,IAGA,IAAAoF,EAAAprB,EAII,IAAMA,EAAI8mB,aAAM,OAEnB,IAAAuE,EAAArrB,EAAAupB,SAAAK,IAAAnB,cAAA,U,oCAED4C,EAAA3C,IAAAqC,EAIUM,EAACC,OAAkBD,EACzBE,mBAAyB,WAI5B,IAAAC,EAAAH,EAAApF,W,qEApEwBoF,EAAAI,YAAAJ,EAAAI,WAAA7D,YAAAyD,GAAAF,IACf,EAAuBE,EAAAxZ,QAAA,WAAqBoN,EAAA,oCAAA8L,GACrDK,EAAAtE,cAAA,E,WAMU9mB,EAAAupB,SAAAK,IAAwB9zB,KAAA41B,YAAAL,EAElC,CAND,MAAA11B,GAMC,C,sBAbD,CACOjF,IAAA,gBCnCTmD,MAoCA,WACM,IAAA83B,EAAAx5B,SAAAs2B,cAAA,UAIN,GAFAkD,EAAA31B,MAAA2yB,QAAA,QAEAx2B,SAAA2D,KA0Ba,yGAzBP3D,SAAA2D,KAAA41B,YAAAC,GACA,IAWAA,EAAaC,cAAOz5B,UAEpB8sB,EAAmB,gCAKnB,CAJA,MAAAtpB,GACA,IAAA+zB,EAAAv3B,SAAmBu3B,OACnBiC,EAAIjD,IAAO,gEAAAgB,EAAA,0BAEX,CAwCgB,OAJTiC,EAAQE,gBAAAF,EAAA/B,IAAA+B,EAAAE,gBACTF,EAAAC,cAAmBD,EAAA/B,IAAA+B,EAAAC,cAAAz5B,SACLw5B,EAAdx5B,WACcw5B,EAAA/B,IAAA+B,EAAdx5B,UACUw5B,CACA,KAGV1C,C,OA0BH;;;;;;;;;;;;;;;;GAEC,oB,aAAoB6C,GAA+BC,aACnD,oBAANC,YAA6BF,GAA8BE,W,OAGhC,W,wBAG3BlH,EAAAnB,EAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,G,yBAQEL,E,mBACWC,E,mBAEPC,E,eACFC,E,oBAEK,K,YACL,K,iBACE,E,oCASE,E,YACW9rB,KAAA2rB,Q,eAGAnB,G,eASNsI,eAAAtI,EAAAuB,EAAAC,EAAAH,EAAAD,G,iBACA/B,S,UAEN3pB,E,CAAA6yB,EAAA,C,gCAOe,IAAhBlsB,EAAA7G,K,KAAA8wB,aAAAkC,EACNhzB,KAAA0sB,UAAcA,EACf1sB,KAAAouB,KAAA,2BAAApuB,KAAAyqB,S,uBAEuB1F,EAAA7lB,IAAA,iC,UACtB,IAAO,EAAAiD,EAAA0qB,aAAA,CACD,IAAIoG,EAAKjzB,KAAK6pB,UACX,mBAELtnB,EAAS,CACT2wB,QAAK,CAEL,aAAU,YAAAn7B,OAA2Bk2B,GAAE,KAAAl2B,OAAAgsB,EAAA,KAAAhsB,OAAAo7B,EAAAC,SAAA,KAAAr7B,OAAAk7B,GAEzC,mBAAAjzB,KAAA4rB,eAAA,KAKI5rB,KAAK8rB,YAAMvpB,EAAA2wB,QAAiC,wBAAAn7B,OAAAiI,KAAA8rB,YAC1C9rB,KAAI6rB,gBACNtpB,EAAK2wB,QAAA,uBAAmClzB,KAAA6rB,e,MAIxC,CAAK,EAERwH,EAAA,IAAArzB,KAAAyqB,QAAAhN,QAAA,UAAA6V,EAAA,aAAAA,EAAA,YAAAA,EAAA,YAAAA,EAAA,WACDD,IAAA9wB,EAAA,OACHgxB,OAAAF,G,CAEDrzB,KAAAwzB,OAAA,IAAAb,GAAA3yB,KAAAyqB,QAAA,GAAAloB,EAME,C,MAHFkxB,G,4CAEQ,IAAG1rB,EAAG0rB,EAAAzuB,SAAAyuB,EAAAra,KAAuB,OAAlBrR,GAAG/H,KAAAouB,KAAArmB,QAAE/H,KAAG4sB,WACzB,CACD5sB,KAAAwzB,OAAAE,OAAA,W,kDAEmB,E,KAApBF,OAAAG,QAAA,WACM9sB,EAAKunB,KAAG,0CACVvnB,EAAK2sB,OACH,KAEF3sB,EAAK+lB,W,oCAGN/lB,EAAA+sB,oBAAAC,EACF,E,gFAEO,IAAA9rB,EAAAvL,EAAAwI,SAAAxI,EAAmB4c,KACrBrR,GAAAlB,EAAAunB,KAAArmB,GACFlB,EAAM+lB,W,kCAcQ,G,gDAKflwB,OAAA,6B,IAGKnF,IAAA,e,MAAA,SAAA6hB,GAEN,GADApZ,KAAM8zB,OAAgBl8B,KAAAwhB,GAChBpZ,KAAI8zB,OAAYl7B,SAAAoH,KAAA+zB,YAAW,CAC7B,IAAAC,EACFh0B,KAAK8zB,OAAA/6B,KAAA,I,KACI+6B,OAAK,KAEV,IAACG,GAAA,EAAA9xB,EAAyB+xB,UAAMF,GAIvCh0B,KAAA0sB,UAAAuH,E,+CAMuBE,G,KACpBJ,YAAKI,E,KACNL,OAAM,E,4CAGmD1a,G,QAAIuM,QAAA,OAAA3lB,KAAA8zB,OAAA,kC,6BAIxD,IAAA7lB,MAAAkmB,G,OAAAn0B,KAAAo0B,qBAAmBD,G,KAKzB,OADAn0B,KAAKo0B,qBAAK,GACLhb,C,gDAIL,GAAU,OAANpZ,KAAKwzB,OAAT,CACA,IAAIpa,EAAOib,EAAK,K,QAAG5E,eAAKrW,EAAAxgB,O,KAAGi2B,OAAEC,iBAAA,iBAAA1V,EAAAxgB,Q,sBAA4B,O,KAAJk7B,O,KAAMQ,aAAAlb,OAAI,CAG3D,IAACmb,EAAAv0B,KAAuBw0B,mBAAApb,GAC7B,OAAAmb,GAAAv0B,KAAAs0B,aAAAC,E,CALW,C,8BAaMnb,GAGjBpZ,KAAAy0B,iB,kDAEqBz0B,KAAd6uB,OAAAC,iBAAc,aAAAF,EAAAh2B,Q,iBAKrBq2B,EAAAr2B,OAAA,GAAAoH,KAAA00B,YAAAtf,OAAA6Z,EAAAr2B,S,iDAEO,G,kDAIO,E,KACT+7B,iB,cACU30B,KAAC20B,gB,KACZA,eAAA,MAEJ30B,KAAAwzB,S,+EAeU7G,Y,KACLyB,KAAK,+B,KACLO,YAIA3uB,KAAK8wB,eACL9wB,KAAK8wB,aAAA9wB,KAAAytB,gBACNztB,KAAM8wB,aAAY,M,iCAgBpB9wB,KAAA2sB,YACF3sB,KAAAouB,KAAA,6B,iBAED,G,uCAeE,IAAIvnB,EAAK7G,K,cACGA,KAAC20B,gB,KACXA,eAAKC,aAAyB,W,6BAK9B/tB,EAAK4tB,gBAER,GAAArN,KAAAI,M,8CAUC,I,mBAcA,C,SAJIxnB,KAACouB,KAAA,0CACE5xB,EAAAwI,SAA8BxI,EAAC4c,KAAM,uBAEtCyO,WAAS7nB,KAAO4sB,UAACpP,KAAcxd,MAAK,EAC1C,C,0CAYcwqB,EAAAuB,EAAAC,EAAAH,EAAAD,G,IAARmC,EAAA,G,OACNA,EAAU,EAAuCE,KAC5C,EAAA9rB,EAAU0qB,cAAO,oBAAA+C,mBAAAiF,UAAAC,GAAAprB,KAAAkmB,SAAAiF,YAAA9G,EAAA,E,4BAGlBlC,IAAWkC,EACA,GAAAlC,G,IACRkC,EAAA,EAAAnC,G,kBAKR,gB,oCAEO,G,KACN,c,MACA,WACA,IAAImJ,GAAO,EAEX,GAAmB,oBAAVjd,WAAUA,UAAAkd,UAAA,CACjB,IACIC,EAAiBnd,UAAAkd,UAAAE,MADP,kCAEfD,KAAAr8B,OAAA,G,4BAID,C,OACMm8B,GAAwC,OAAlCpC,KAAkCI,EAAApD,c,QAK3C,mB,4FAzUwB,G,GAiVqBwF,6BAAA,E,GAEjDC,eAAA;;;;;;;;;;;;;;;;;0CA2BI5K,GACIzqB,EAAe5I,E,CAAA6I,KACVq1B,G,qBAGC7K,E,iBAGPjzB,IAAA,kB,MAAA,SAAAizB,GACN,IAAI8K,EAAMC,IAA0DA,GAAA,cAEhEC,EAAcF,IAAAC,GAAAE,mB,GAChBjL,EAAKf,gBACA6L,GAAe5M,EAAA,mFACrB8M,GAAA,G,oBAIGD,QAGL,C,6CAEO,YAAsBhyB,EAAtBC,EAAsB6xB,EAAAK,eAAA/xB,OAAAC,cAAAC,GAAAN,EAAAC,EAAAM,QAAAC,MAAAF,GAAA,GACnB,IAAM8xB,EAAApyB,EAAA7I,MAGJi7B,GAAWA,EAAA,eAAAC,EAAAh+B,KAAA+9B,EAEvB,CAiBA,C,cAfDt0B,EAAAG,CAGA,SACU,IACIqC,GAAgC,MAAAL,EAAAQ,QAC/BR,EAAAQ,QAQZ,CAJK,QACE,GAAC5C,EACA,MAAAC,CAER,CACF,C,iCAEO,G,8BAKL,WAED,GAAIrB,KAAK61B,YAAAj9B,OAAgB,SAAAoH,KAAA61B,YAAA,GACvB,MAAK,IAAAzqB,MAAA,0B,iCAQR,W,6DCvjBH,C,KAyBsB,iB,gCAyBpB7T,IAAA,2B,sBAWAyI,KAAA81B,2B,aAQeA,6BAAA;;;;;;;;;;;;;;;;;wCCTfC,EAAEx8B,EAAAy8B,EAAAC,EAAAC,EAAAC,EAAAhL,EAAAiL,EAAA9J,EAAA+J,EAAArK,GAAFjsB,EAAsB5I,E,CAAgC6I,KAAA+1B,G,QACpDx8B,E,eACKy8B,E,oBACAC,E,oBAA6BC,E,gBAAUC,E,gBAAWhL,E,cAEjDiL,E,mBACO9J,E,KAGd+J,U,iDAEDC,oBAAG,G,YAAH,E,UACMtQ,EAA+B,KAAAhmB,KAAAzG,GAAA,K,uBACjB,IAAKg9B,GAA4BP,G,UACnD,sB,qBAOGj2B,EAAAG,E,CAAA61B,EAAA,C,KAIG,S,MAAA,WACN,IAAAlvB,EAAA7G,KAEIw2B,EAAOx2B,KAAEy2B,kBAAeC,mB,KAE1BC,MAAA,IAAAH,EAAiBx2B,KAAG42B,mBACpB52B,KAAAg2B,UAAAh2B,KAAAi2B,eAAAj2B,KAAAk2B,eAAAl2B,KAAAm2B,WAAA,KAAAn2B,KAAAgsB,e,sGAEL6K,EAAA72B,KAAA82B,iBAAA92B,KAAA22B,OC7FD32B,KAAA+2B,IAAA/2B,KAAA22B,M,gEAoCsB9O,YAAA,W,gHAOThhB,EAAMmwB,gBAAgB,KAItBnwB,EAAAowB,aAGOpwB,EAAO8vB,OAAE9vB,EAAA8vB,MAAAlH,c,QACZ5oB,EAAOunB,KAAG,wDAAKvnB,EAAA8vB,MAAAlH,cAAA,wCACf5oB,EAAQowB,YAAU,EACxBpwB,EAAA8vB,MAAAO,yBAGHrwB,EAAA8vB,OAAA9vB,EAAA8vB,MAAAzK,UDxBJ,MCwBIrlB,EAAAunB,KAAA,oDAAAvnB,EAAA8vB,MAAAzK,UAAA,uCAKWrlB,EAAOunB,KAAE,+CACXvnB,EAAO0R,SAMnB,GAAA6O,KAAAI,MAAA2P,I,2BAGHz8B,MAAA,W,MAAA,KAAAsF,KAAAzG,GAAA,IAAgByG,KAAAo3B,iB,QAEO,mB,MACtB,SAAAZ,G,8BAEDA,IAAA3vB,EAAe8vB,MAAA9vB,EAAAwwB,kBAAAC,GAAfd,IAAA3vB,EAAe0wB,gBACN1wB,EAAKunB,KAAO,8BACpBvnB,EAAA2wB,8B,4CA9CC,gB,MACD,SAAAhB,G,6CALgCA,IAmDlC3vB,EAAA4wB,IAAA5wB,EAAA6wB,0BAAA1yB,GC/EDwxB,IAAA3vB,EAAA0wB,eAAA1wB,EAAA8wB,4BAAA3yB,GAwBA6B,EAAAunB,KAAA,6B,IAkBI,C,IAIE,cACA1zB,MAAK,SAAoBk9B,GAGrB,IAAAC,EAAS,CACVC,EAAA,IAEEzG,EAAAuG,GAGA53B,KAAA+3B,UAAAF,EACL,G,8GAKJ73B,KAAAouB,KAAQ,2CAAApuB,KAAAu3B,eAAA5L,QAAR3rB,KAAA22B,MAAA32B,KAAQu3B,eACFv3B,KAAAu3B,eAAgB,K,8BASvB78B,MAAA,SAAAs9B,GAEe,G,MAAYA,EAAA,CACf,IAAAC,EAAAD,EAAS,EF1BsC,ME2B3DC,EAAAj4B,KAAAk4B,6BF3BmB,ME6BJD,GAKMj4B,KAAKouB,KAAA,wCAC1BpuB,KAAAu3B,eAAAhf,QAMqBvY,KAAS+2B,MAAK/2B,KAAAu3B,gBAAUv3B,KAAAy3B,MAAAz3B,KAAAu3B,gBAAAv3B,KAAAuY,SFzCP,ME0CtC0f,IAEej4B,KAAAouB,KAAA,0BACMpuB,KAAAm4B,8BACAn4B,KAAAk4B,6BAIrB,CAEe,GAKd,CACD3gC,IAAA,8BAEemD,MAAA,SAAuB09B,GACjC,IAAUC,EAAMC,EAAA,IAAAF,GACHhf,EAACkf,EAAuC,IACnDF,GAKC,GAAkB,MAAlBC,EAAkBr4B,KAAAu4B,oBAAAnf,OAC1B,UAAAif,EAMqC,UAAAjtB,MAAA,2BAAiBitB,GAJvDr4B,KAAAs2B,oBAAA1+B,KAAAwhB,EAIuD,CAC9C,GAGH,CACI7hB,IAAC,6BAIHmD,MAAW,WACAsF,KAACm4B,6BAAkC,GAIzCn4B,KAAAouB,KAAA,oCACZpuB,KAAAi3B,YAAA,EAEej3B,KAAAu3B,eAASL,wBACLl3B,KAAAw4B,wBASXx4B,KAAAouB,KAAA,8BACCpuB,KAAWu3B,eAAgBkB,KAAM,CACvBX,EAAC,IAKlBzG,EAAA,CAEUyG,E,IACZzG,EAAA,MASD,GAMM,CAEG95B,IAAI,sBAGTmD,MAAU,WAWdsF,KAAAu3B,eAAAmB,QAKQ14B,KAAYouB,KAAA,mCACLpuB,KAAIu3B,eAAYkB,KAAM,CACrBX,EAAA,IACAzG,EACV,CAEHyG,EF1JyD,IE2JvCzG,EAAA,CAAK,KAedrxB,KAAKouB,KAAA,kCAILpuB,KAAC22B,MAAU8B,KAAK,CAGzBX,EAAA,IAEWzG,EAAA,CACbyG,EFnL0B,IEqL3BzG,EAAA,MAMMrxB,KAAA+2B,IAAA/2B,KAAAu3B,eAGOv3B,KAAK24B,sBACV,GAIJ,CACDphC,IAAA,4BACMmD,MAAK,SAAA09B,GAGd,IAAAC,EAAAC,EAAA,IAAAF,G,sCAmBiC,MAAAC,GAAoBr4B,KAAA44B,eAAAxf,EAC5C,GAIA,CAGL7hB,IAAA,iBAEHmD,MAAA,SAAAsK,GAEehF,KAAA64B,qBAKV74B,KAAAmrB,WAAsBnmB,EAG1B,GAEA,CACDzN,IAAA,qBAEemD,MAAA,WACDsF,KAAAi3B,aACEj3B,KAAA84B,4B,oCAEI94B,KAAMouB,KAAC,kCAG3BpuB,KAAAi3B,YAAA,EAEQj3B,KAAA22B,MAAAO,yBAoBR,GAQK,CAGG3/B,IAAA,aACTmD,MAAA,SAAAs9B,GC/UA,IAAAC,EAAAK,E,IAAAN,G,yBHoDyB,M,4BG7BZ,GH2Bc,MG3BdC,EAAkB,C,sFAQrB,EAAA/8B,EAAA8E,KAAAs2B,oBAAA19B,SAAAsC,EAAA8E,KAAA44B,eAAA54B,KAAAs2B,oBAAAp7B,IAAU8E,KAAAs2B,oBAAA,GAAGt2B,KAAA24B,sBACA,KHcrB,MGdqBV,EAGVj4B,KAAA+4B,sBACP5hB,GHac,MGXH8gB,E,iBHWsB,MGT/BA,EAAsC/R,EAAA,iBAAA/O,GHSP,MGRtB8gB,GACAj4B,KAAAouB,KAAO,wBAChBpuB,KAAA64B,qBACM74B,KAAGg5B,iCACA9S,EAAgC,mCAAa+R,EACtD,C,QAMH,e,yCAMIj4B,KAAAi5B,UAAgBC,EAAAC,EAEjBn5B,KAAAg2B,UACFlM,KAAQA,EAIiB,IAAjB9pB,KAAOo5B,SACTp5B,KAAK22B,MAAQ+B,QACb14B,KAAKq5B,yBAA4Br5B,KAAA22B,MAAA2C,GAClCrL,KAAAsL,GAAA7Q,EAAA,sC,yDAQP,WACA,IAAA8N,EAAOx2B,KAAAy2B,kBAAA+C,mBAAChD,GAAKx2B,KAAAy5B,cAAQjD,E,0CAnDL,IAAX3vB,EAAA7G,K,KAAPu3B,eAAO,IAAWf,EAAAx2B,KAAA42B,mBAAA52B,KAAAg2B,UAAAh2B,KAAAi2B,eAAAj2B,KAAAk2B,eAAAl2B,KAAAm2B,WAAAn2B,KAAAi5B,W,8JAHmBj5B,KAAAu3B,eAAYlf,KAwDlDqU,EAAAgN,GClCKC,IAA8B,WAC9B9yB,EAAA0wB,iBACA1wB,EAAAunB,KAAA,gCACAvnB,EAAA0wB,eAAAhf,QAGN,GAAA6O,KAAAI,MLoCC,KKnCK,G,kCAoCOxnB,KAAAouB,KAAA,qCA2DDtE,G,sBAFmB,IAAV9pB,KAAAo5B,OAAUp5B,KAAAuY,SAQHvY,KAAA45B,oBACG55B,KAAA65B,SAEnB,G,CAlEVtiC,IAAE,2BACMmD,MAAI,SAAa87B,EAAK8C,GAEL,IAAAzyB,EAAA7G,KACRA,KAAOouB,KAGpB,oCACoBpuB,KAAA22B,MAAAH,EACAx2B,KAAAo5B,OAAA,EACIp5B,KAAAo2B,WACAp2B,KAAAo2B,SAAAkD,EAAKt5B,KAAAi5B,WACAj5B,KAAAo2B,SAAA,MAImC,IAAtCp2B,KAAA84B,2BACjB94B,KAAAouB,KAAkB,kCAEEpuB,KAAAi3B,YAAA,GAEjB0C,IAAkB,W,iCAGZ,GAAAvS,KAAAI,MJnFsB,KIoFpC,GAOA,CACAjwB,IAAc,gCACdmD,MAAkB,WAEQsF,KAAAi3B,YAAK,IAALj3B,KAAKo5B,SAEfp5B,KAAAouB,KAAA,4BACUpuB,KAAA+3B,UAAA,CACID,EAAA,IA+BhCzG,EAAa,CAMjByG,E,IAEmBzG,EAAA,M,QAUnB,6B,MAEA,W,IAAcmF,EAAGx2B,KAASu3B,e,KAAGA,eAAQ,KAAEv3B,KAAG+2B,MAAIP,GAAAx2B,KAAAy3B,MAAAjB,G,KAAGje,O,4BAYnD7d,MAAA,SAAG48B,G,KAAHX,MAAA,KAIQW,GAAU,IAAAt3B,KAAAo5B,OAQI,IAAhBp5B,KAAMo5B,QAAiCp5B,KAAAouB,KAAA,8BAPzCpuB,KAAGouB,KAAM,+BAETpuB,KAAAg2B,UAAA5L,oBACIrF,EAAiBroB,OAAA,QAAAsD,KAAAg2B,UAAAlM,MAErB9pB,KAAAg2B,UAAO/L,aAAAjqB,KAAAg2B,UAAAlM,O,oBAUT,wB,MACA,SAA4BgQ,GAC5B95B,KAAMouB,KAAK,0DAEPpuB,KAAKq2B,UAITr2B,KAAOq2B,QAASyD,GACjB95B,KAAAq2B,QAAA,M,KAED/J,cACE,KAKAtsB,KAAKuY,O,QAKL,Y,MAGA,SAAAa,GAIA,OAAApZ,KAAAo5B,OAAA,mCAIMp5B,KAAA+2B,IAAU0B,KAAerf,E,sBAQ/B,WAGD,IAAApZ,KAAAo5B,S,wDAEOp5B,KAAA45B,oBAAA55B,KAAAssB,gB,qBACGtsB,KAAGssB,cAAK,M,QAUhB,oB,MACF,W,wDAEOtsB,KAAA22B,MAAWpe,QAAXvY,KAAA22B,MAAA,MACA32B,KAAAu3B,iBACAv3B,KAAAu3B,eAAmBhf,QACnBvY,KAAAu3B,eAAgB,MAEhBv3B,KAAGg3B,kBAAwCtI,aAAa1uB,KAAAg3B,iBAAGh3B,KAAAg3B,gBAAA,K,aAwD/B,W,8CAW7Bj3B,EAAAG,E,CAA8C65B,EAAA,C,mFAapD,mB,2EAWG,kB,MAIH,SAAAC,EAAA5gB,EAAA6gB,GAAA,G,CAED1iC,IAAA,oB,MAIA,SAAOyiC,EAAA5gB,EAAA6gB,GAAA,G,yCAGgBD,EAAAC,GAAA,G,kCAEVC,GAAkB,K,EAlDK,G,GAyFrB,W,wBAKTC,GAELp6B,EAAA5I,E,CAAA6I,KAAAo6B,G,4CAEDj4B,EAAAwjB,QAAA/c,MAAAC,QAAAsxB,MAAAvhC,OAAA,+B,QAIQmH,EAAwBG,E,CAACk6B,EAAA,C,qBAU/B,SAAmBC,GAGpB,QAAAlhB,EAAAjV,UAAAtL,OAAAysB,EAAA,IAAAzc,MAAAuQ,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,I,oBAEoB,GAAbzQ,MAAAC,QAAa7I,KAAAs6B,WAAAD,IAQb,IAFF,IAACE,EAAgCx6B,EAAsB0R,EAAjD,CAAiDzR,KAAAs6B,WAAAD,IAErBn/B,EAAA,EAAAA,EAAAq/B,EAAA3hC,OAAAsC,IAAAq/B,EAAAr/B,GAAAkX,SAAAnN,MAAAs1B,EAAAr/B,GAAA2P,QAAAwa,E,QAGtC,K,eACagV,EAASjoB,EAAAvH,G,KACpB2vB,mBAAeH,G,KAChBC,WAAAD,GAAAr6B,KAAAs6B,WAAAD,IAAA,GAEDr6B,KAAKs6B,WAAWD,GAASziC,KAAK,CAC/Bwa,W,YAEc,IAAfqoB,EAAAz6B,KAAe06B,gBAAAL,GAAfI,GAAAroB,EAAAnN,MACE4F,EAAkB4vB,E,6BAWHJ,EAAAjoB,EAAAvH,G,KACX2vB,mBAAIH,G,QACJE,EAAAv6B,KAAAs6B,WAAUD,IAAA,GACTn/B,EAAA,EAAAA,EAAAq/B,EAAA3hC,OAAAsC,IAAA,GAAAq/B,EAAAr/B,GAAAkX,gBAAAvH,OAAA0vB,EAAAr/B,GAAA2P,S,YAEN0vB,EAAA/hC,OAAA0C,EAAA,EAED,G,KAOE,qB,eAGOm/B,I,EACHl4B,EAAAwjB,QAAA3lB,KAAAm6B,eAAAQ,MAAA,SAAAC,GACA,OAAMA,IAAMP,C,IACZ,kBAAIA,E,OA/EK,G,GAiHO,SAAAD,G,aAKfr6B,EAAiB6Y,E,CAAAiiB,EAAAT,G,MAEnBr6B,EAAA8Y,EAAF,CAAEgiB,G,SACJA,I,6BAEE9hB,EAAAvP,KAAAxJ,KAAA,C,YAOF86B,SAAA,EAQM,oBAAL99B,aAA0D,IAAxBA,OAAMT,mBAAkB,EAAA4F,EAAA44B,qB,OAC3Dx+B,iBAAA,qB,yBAEDsK,EAAAm0B,QAAW,a,cASTz+B,iBAA0C,sBAC/BsK,EAAAi0B,UACAj0B,EAAAi0B,SAAO,EAChBj0B,EAAAm0B,QAAA,a,iBAUAj7B,EAAUG,E,CAAA26B,EAAA,C,KAGZ,kB,MACA,SAAmBR,G,OAEnB,EAAIl4B,EAAKwjB,QAAA,WAAA0U,EAAA,uBAAAA,GAGP,CAEHr6B,KAAA86B,Q,gCAGC,WACA,OAAM96B,KAAO86B,O,4DAjEO,C,OAyGA,W,wBACpBG,EAAWC,G,qBAEJ,I,EAAK,C,aACJD,EAAgBE,MAAgB,K,UAElC,E,EACF,EAAAjgC,EAAO8E,KAAKo7B,QAAAxiC,OAAesC,IAAQ8E,KAAAo7B,QAAAlgC,GAAAtC,OAAA,I,aACnCyiC,GAAWr7B,KAAOo7B,QAAUlgC,G,kBAIrBtC,OAAOyiC,E,KAEhBC,UAAK,C,6CAKFv7B,EAAKG,E,CAAuBq7B,EAAA,C,2CAoBhB,GAKVrgC,EAAI8E,KAAMs7B,UACfpgC,EAAK8E,KAAAo7B,QAAAxiC,OACHsC,IACA,KADI8E,KAAAo7B,QAAiBlgC,KACjB8+B,GAAA,IAAiCh6B,KACrCo7B,QAAAlgC,I,OACG8+B,GAAe,G,OAjDF,G,4BA6DV,G,aAELwB,G,oBACAA,EAAAJ,QAAiBxiC,OAAW,K,EACjCwiC,QAAKI,EAAAF,U,aAMuBE,G,SAC7BJ,QAAAxiC,OAAA4iC,EAAAF,S,sBAEOE,EAAAF,U,SAAAE,EAAAJ,QAAAxiC,QAAAsiC,I,gCAMGM,G,mFAcYA,G,MACrBt3B,UAAUtL,OAAS,QAAS,IAALsL,UAAK,GACtBA,UAAC,K,SAERk3B,QAAAnhC,MAAAuhC,EAAAF,UAAAG,E,qBAEOH,WAAAE,EAAUJ,QAAAxiC,OAAA,Y,uFAIR8iC,EACN,E,aAGoBF,EAAGG,G,iBAKxBL,UAAApgC,EAAAsgC,EAAAJ,QAAAxiC,OAAAsC,IAAAwgC,EAAA9jC,KAAA4jC,EAAAJ,QAAAlgC,I,gBACe0gC,GAAQ,QAAAC,EAAAF,EAAAL,UAAAO,EAAAF,EAAAP,QAAAxiC,OAAAijC,IAAAH,EAAA9jC,KAAA+jC,EAAAP,QAAAS,S,oFAGRH,EAAe,E,aAKtBF,G,oBAEFA,EAAAJ,QAAAxiC,M,UAMRkjC,GAAAC,EAAAC,G,4CAEOC,IAAAC,EAAA,OAAAJ,GAAqBK,GAAAJ,GAAAI,GAAAH,I,UAArB5wB,MAAA,8BAAqB4wB,EAArB,8BAAqBD,EAAA,I,aAoBnBP,EAAAY,G,MAGCZ,KAAAa,GAAsCD,GAAA,S,YAC5Cd,UAAAgB,EAAAF,EAAAd,UAAApgC,GAAAsgC,EAAAJ,QAAAxiC,OAAAsC,IAAAohC,I,aAEKphC,KAAAkhC,EAAAhB,QAAAkB,GAAA,OACJ,E,qBAW0Bd,EAC1BY,G,QAGHd,U,IACDA,U,MACDE,GAAAa,GAAAD,GAAA,S,0FAMQ,SAAAG,EAAiCf,EAAKgB,G,eAE3BrlC,E,CAAK6I,KAAoBu8B,G,mCAEnBf,EAAM,GACDx7B,KAAAy8B,YAAcrV,KAAAsV,IAAA,EAAA18B,KAAA28B,OAAA/jC,Q,0BACrCA,OAAWsC,IAAA8E,KAAMy8B,cAAA,EAAAt6B,EAAAy6B,cAAA58B,KAAA28B,OAAAzhC,I,GACoB8E,K,cAoBvC68B,G,iBArNC,IAuN0C,UAAAzxB,MAAAyxB,EAAAL,aAAAK,2CAAAJ,YAAA,M,mBAxN1C,GAyN6B,UAAArxB,MAAAyxB,EAAAL,aAAAK,gGAAAC,GAAAD,G,aAKuBA,G,OACnD,I,gBAAK,G,kBACAF,OAAA5jC,KAAA,Q;;;;;;;;;;;;;;;;2FA2BQ5B,E,CAAA6I,KAAA+8B,G,kRAWpB,qBAAA/jC,SAAA,e,0DAQO,E,GACFA,SAAauD,iBAAKygC,GAA2B,W,OAC7ChkC,SAAKikC,G,IACNp2B,EAAAq2B,W,EACDA,SAASC,E,EAGVnC,QAAA,UAAAmC,G,gBAGHp9B,EAAqBG,E,CAAA68B,EAAA,C,KAEnB,kB,MACA,SAAI1C,G,SACFl4B,EAAKwjB,QAAsC,YAAtC0U,EAAsC,uBAAAA,GAC3C,CAGDr6B,KAAAk9B,S,UAID,c,MACA,W,OAA2B,IAAAH,C,eAsBJ,I,GAcgC,SAAAhD,G,aAEnDh6B,EAAO6Y,E,CAAAwkB,EAAArD,G,MACMh6B,EAAyB8Y,EAA1C,CAA4CukB,G,WAC9BpH,EAAaC,EAAIoH,EAAuBC,EAAAC,EAAAC,EAAAC,EAAAC,G,SAC9C39B,EAAoB5I,E,CAAA6I,KAAAo9B,I,IAE1B5zB,KAAOxJ,O,6BAKEi2B,E,gBAEGoH,E,EACfC,mB,iDAEOG,uBAAcA,E,gBAAdC,E,KAENN,EAAuBO,8B,OAClB3X,EAA0B,KAAAnf,EAAAtN,GAAA,K,oBAChB,G,UACX,IAAAuH,I,4FAIG,E,4BACI,G,kCAEF88B,G,uEAIA,K,4BACN,K,YACF,E,yCAGKC,UAAA,K,aAAA,K,iBACN,K,sBACmB,E,yBACI,E,kFAGJ,K,0NAIc,I,EAA/B/T,KAAKrM,QAAA,YAA6BqgB,GAAAC,cAAAC,GAAA,SAAAn3B,EAAAo3B,UAAAl+B,EAAAiT,EAAA,CAAAnM,I,SAKrC9G,EAAAG,E,CAAAk9B,EAAA,C,mBAEO1iC,MAAA,SAAAwjC,EAAsBvhC,EAAAwhC,G,IAAtBC,IAAAp+B,KAAAq+B,eACFxG,EAAK,C,EAGPuG,EAMH/jB,EAAA6jB,E,KAEoBl+B,KAAbouB,MAAA,EAAAjsB,EAAalK,WAAA4/B,K,EAAb11B,EAAAwjB,QAAA3lB,KAAAs+B,WAAA,0D,8BAEFH,IAAWn+B,KAAAu+B,eAAAH,GAAAD,E,qCAKfK,kB,MAAW,IAAO,EAAbr8B,EAAayO,U,EAGf,C,wBAFD6tB,MAAKl1B,W,6BAAA,SAAAvE,G,oCAAA0C,OAAAyP,E,yFAAAve,OAAgB,E,kFADL8lC,EAAAC,EAAAC,EAAA3E,G,kDAAbyE,EAAAD,MAAAl1B,W,+BAAaywB,EAAA,IAAA6E,G,6LAAb7+B,KAAA8+B,QAAAjgC,IAAAm7B,GAAA94B,IAAA29B,GAAA,gD,qCAMAD,IAAKA,G,KAORE,QAAMjgC,IAAOm7B,GAAQ96B,IAAA2/B,EAAAE,GACrB/+B,KAAKs+B,YAAAt+B,KAAiBg/B,YACZD,E,qCAcd,IAAAl4B,EAAA7G,KAGQi/B,EAAAj/B,KAAAk/B,iBAAiB/mC,GACvB6H,KAAMm/B,YAAoC,IAAAF,EAAA7mB,SAAA,SAAApT,UAEtC6B,EAAaq4B,iBAAK/mC,GAClB0O,EAAAu4B,uBAEA,IADEv4B,EAAKu4B,uBACPv4B,EAAaq4B,iBAAa,I,EAE1BjF,YAAagF,EAAOhF,WAAAj1B,E,WAWxB,c,MACD,SAAA+5B,G,qBAEO/E,EAAAqF,EAAgBZ,MAAAl1B,WAAhBs1B,EAAAQ,EAAAC,iBACNt/B,KAAMouB,KAAM,aAAG4L,EAAA,QAAa6E,GAC5B,IAAAU,EAAO,CACRhsB,EAAAymB,GA7wBc+E,EAAAH,MAAPW,EAAA,EAAOF,EAAAG,aACTD,EAAO,EAAIR,EAAOH,K,EAEN,EAAGG,EAAAU,S,KACjBN,Y,IAAkBI,GAAQ,SAAMv6B,G,IAC9BmS,EAAMnS,EACJ,EACF06B,EAAM16B,EAAwB,E,EAM/B26B,sBAAAxoB,EAAAkoB,IACFx4B,EAAAi4B,QAAAjgC,IAAAm7B,IAAAnzB,EAAAi4B,QAAAjgC,IAAAm7B,GAAAn7B,IAAAggC,M,+DAjPqCE,E,8BA8CxC,GCtIF,G,wBAkJyBrkC,MAAA,SAAQoc,GAAa9W,KAAJm2B,WAAUrf,E,iEAElD9W,KAAAs+B,YAAYt+B,KAAcm/B,YAAU,4BAClCn/B,KAAA4/B,uCAAiC9oB,E,iDAEpCpc,MAAA,SAAAmlC,IClI0BA,GAAA,KAAAA,EAAAjnC,S,sHFo6BX,IE/5Bd,G,KAMC,uB,wCAEDoH,KAAAouB,KAAA,6BAOApuB,KAAAk2B,eAAAl2B,KAAA8/B,cAIC9/B,KAAAs+B,YAAAt+B,KAAAm/B,YAAA,6B,QASA,U,iEAcFroB,EAAA9W,KAAAm2B,WCpED4J,GAAA,EAAA59B,EAAA69B,eAAAlpB,GAAA,eA2BampB,EAAS,C,8CAAA,iBAAAjgC,KAAA09B,gBAAAuC,EAAA,QAAAjgC,KAAA09B,e,kHAQpB72B,EAAAq5B,eAAkCR,EAAAtmB,GAEjC,G,wCAMkB,IAAnBvS,EAAA7G,UAAAs+B,YAAAt+B,KAAAk2B,gBAAmCl2B,KAAam/B,YAAA,YAC9CroB,MAAa9W,KAAbk2B,iBACD,SAAA/b,G,yBACM,OAAPulB,EAAO74B,EAAAs5B,2BAAA,EAAPt5B,EAAAu5B,mBAAOV,EAAAtmB,E,mEAOLylB,EAAWwB,EAAAf,iBACZt/B,KAAAouB,KAAA,uBAAA4L,EAAA,IAAA6E,I,wJAEO7+B,KAAAs+B,YAAAt+B,KAAAsgC,cAAAtG,EAAA6E,EAAAwB,EAAAb,aAAAZ,E,QAMN,gB,MACD,SAAA5E,EAAA6E,EAAA0B,EAAA3B,G,6CAEDrrB,EAAAymB,G,sBArCAmF,YAyCe,IAzCQI,E,QAKrB,kB,MACD,SAAAvF,EAAA5gB,EAAA6gB,G,8GAP2BD,WA4C7BA,EAEYkE,OAAA,ICzEb9kB,O,cAsDY,GADA,CACgB7hB,IAAA,oBAXRmD,MAAA,SAAmDs/B,EAAA5gB,EAAA6gB,GAa5Dj6B,KAAKw+B,kBACCx+B,KAAAs+B,WAAWt+B,KAAAwgC,kBAAA,KAAAxG,EAAA5gB,EAAA6gB,GACQj6B,KAAAygC,0BAAA7oC,KAAA,CACxBoiC,WAAWA,E,YAEb5gB,KAAUA,EAIP6gB,WAAIA,G,mCAST,SAA2BD,EAAAC,GAC3Bj6B,KAAAw+B,kBACKx+B,KAAAs+B,WAAAt+B,KAAAwgC,kBAAA,KAAAxG,EAAA,KAAAC,G,qCAEDD,WAAYA,EACZkE,OAAK,K,KAGH,KAEPjE,c,IAIL1iC,IAAA,oB,MAAA,SAAO2mC,EAAAlE,EAAA5gB,EAAA6gB,GACL,IAAI7hB,EAAK,CAIL7E,EAAAymB,EACU3I,EAAAjY,G,KAIZgV,KAAA,gBAAS8P,EAAA9lB,G,KAAE+mB,YAAajB,EAAA9lB,GAAA,SAAAsoB,GAAEzG,GAAYpS,YAAK,WAAmBoS,EAAAyG,EAAA,EAAAA,EAAA,EAG5D,GAAAtZ,KAAKI,MAAA,G,uBAMR,SAAMwS,EAAA5gB,EAAA6gB,EAAA0G,G,KACLC,YAAY,IAAM5G,EAAA5gB,EAAA6gB,EAAA0G,E,sBAKnB,SAAA3G,EAAA5gB,EAAA6gB,EAAA0G,GAED3gC,KAAA4gC,YAAc,IAAA5G,EAAA5gB,EAAA6gB,EAAA0G,E,IAGhBppC,IAAA,c,MAAA,SAAO2mC,EAAAlE,EAAA5gB,EAAA6gB,EAAA0G,GACL3gC,KAAAw+B,kBACD,IAAApmB,EAAA,C,cAED9W,IAAAq/B,IAAIvoB,EAAA,EAAAuoB,GAKF3gC,KAAM6gC,iBAAYjpC,KAAW,CACzBsmC,OAAKA,E,QAGA9lB,EAAE6hB,WAAUA,I,KAAyC6G,uBAE/D,IAAA3oC,EAAA6H,KAAA6gC,iBAAAjoC,OAAA,E,kEAGH,C,qBAGa,SAeTT,G,WAFO+lC,EAAMl+B,KAAA6gC,iBAAA1oC,GAAA+lC,OACD9lB,EAAGpY,KAAA6gC,iBAAA1oC,GAAAigB,QAKL6hB,EAAYj6B,KAAO6gC,iBAAiB1oC,GAAI8hC,WAC7Cj6B,KACH6gC,iBAAe1oC,GAAQ4oC,OAAA/gC,KAAAs+B,WACpBt+B,KACHm/B,YAASjB,EAAO9lB,GAAS,SAAApT,G,8EAoB3B,IAJF6B,EAAAi6B,uBAKEj6B,EAAkDg6B,iBAAA,IAE3C5G,GACLA,EAAWj1B,EACX,EAAKA,EAAuB,EAK/B,G,4BAMC,SAAwBk1B,G,+BAG1B9hB,EAAA,CAGA5E,EAAA0mB,GAECl6B,KAAAouB,KAAA,cAAAhW,G,oCAED,U,IAAA,CASA,IAAA4oB,EAAiBz6B,EAA+B,EAEvCM,EAAKunB,KAAA,cAAiB,wBACR4S,EAGtB,C,IAED,G,KAcC,iB,8BAKOhhC,KAAAouB,KAAA,iBAAI,EAAAjsB,EAAAlK,WAAA+M,IACN,IAAIi8B,EAAMj8B,EACZ,EAEAm5B,EAAoCn+B,KAAKu+B,eAAG0C,GAE/C9C,W,mCAKD,cAAMn5B,EAAA,0CAAAA,EAAA,MACG,MAASA,GACjBhF,KAAAkhC,YAAAl8B,EAAA,EAAAA,EAAA,G,4BAMC,SAAwBk5B,EACtBvhC,G,KAEAyxB,KAAA,sBAA2B8P,EAAAvhC,GAE9B,MAAAuhC,EAAAl+B,KAAAq9B,cAAA1gC,EAAA,EAAAA,EAAA,KAAAA,EAAA,G,kFAED,OAAAuhC,EAAAl+B,KAAAkgC,eAAAvjC,EAAA,EAAAA,EAAA,GAMO,QAAPuhC,EAAel+B,KAAUogC,mBAAyBzjC,EAAA,EAAAA,EAAA,GACnB,OAALuhC,EAAKl+B,KAAAmhC,uBAAAxkC,GACvBupB,EAA6B,gDAAA/jB,EAAAlK,WAAAimC,GAAA,qC,QAcnC,W,MACD,SAAA5E,EAAAL,G,iDAEDj5B,KAAAohC,gCAAA,IAAA3nC,MAAAkd,U,KAGQ0qB,iBAAU/H,GAChBt5B,KAAIgsB,cAAiBiN,EAGjBj5B,KAAoBshC,kBAAKthC,KAAAuhC,oBAC7BvhC,KAAKwhC,gBAGLxhC,KAAKshC,kBAAkB,EACvBthC,KAAAs9B,kBAAkB,E,IAGpB/lC,IAAA,mB,MAKA,SAEEuwB,GAEA,IAAIjhB,EAAG7G,MACP,EAAImC,EAAKwjB,SAAA3lB,KAAA69B,UAAA,0DACL79B,KAAAyhC,2BAA4B/S,aAAA1uB,KAAAyhC,2B,KAK/BA,0BAAM5Z,YAAA,WACLhhB,EAAM46B,0BACE,KAER56B,EAAM66B,sB,QAIJla,MAAMM,G,4CAaP9nB,KAAK69B,WAAW79B,KAAMshC,kBAAmBthC,KAAC2hC,iBAAY,E,uCAQ3DxE,IAAAn9B,KAAMk9B,UAAAl9B,KAAA4hC,kBAAA5hC,KAAA6hC,qBACJ7hC,KAAOouB,KAAK,2CACbpuB,KAAA4hC,gBAAAhE,G,0CAED59B,KAAAk9B,SAAAC,C,QAQE,Y,MAGA,SAAmB2E,GAGnBA,GACD9hC,KAAAouB,KAAA,wB,mEAKOpuB,KAAAouB,KAAA,8CACEpuB,KAAK69B,WAAU79B,KAAG69B,UAAAtlB,Q,QAWzB,wB,MACD,W,GACDvY,KAAAouB,KAAA,4B,4CAKO2T,0BAEN/hC,KAAKu+B,eAAiB,GACpBv+B,KAAKgiC,mBAAgB,CACrB,GAAKhiC,KAACk9B,U,yCAKV,IAAAzjC,MAGQkd,UAAA3W,KAAWohC,+BJmiBM,MIniBNphC,KAAA4hC,gBAAAhE,IACT59B,KAAOohC,+BAAgC,IAC/C,OATCphC,KAAAouB,KAAA,8CACOpuB,KAAC4hC,gBAAA5hC,KAAA6hC,mBACV7hC,KAAAiiC,4BAAA,IAAAxoC,MAAAkd,UAQA,IAAAurB,GAAA,IAAAzoC,MAAAkd,UAAA3W,KAAAiiC,2B,uDAEDjiC,KAAAouB,KAAA,0BAAA+T,EAGoB,MAAZniC,KAAA2hC,iBAAYQ,GAElBniC,KAAO4hC,gBAAmBxa,KAAMgb,IAAEpiC,KAAK6hC,mBJuhBjB,IIvhBoD7hC,KAAA4hC,gBAC3E,C,iCAMC,uB,MACA,WACA,IAAA/6B,EAAY7G,KACb,OAAAD,EAAAmF,EAAA,CAAAnF,EAAAoF,GAAAC,MAAA,SAAAC,I,4DAED,cAAAC,EAAAC,KAAAD,EAAAxB,MAKQ,OACU,IAAO+C,EAACm7B,mBAAS,CACd18B,EAAExB,KAAW,GACjC,K,CAwDY,O,sCAtDP+C,EAAAo7B,4BAAA,IAAAxoC,MAAAkd,UAAN9P,EAAMu6B,+BAAA,KACWiB,EAAgBx7B,EAAM+xB,eACzBpb,KACR3W,GAGWy7B,EACbz7B,EAAMuvB,SACJ5Y,KAAA3W,GAGY07B,EAAa17B,EAAS27B,sBAAAhlB,KAAA3W,GACxB8kB,EAAU9kB,EAAMtN,GAAM,IAClC6jC,EAAgBqF,oBAETzW,EAAmBnlB,EAAMmlB,cAEnC0W,GAAA,E,iCAtSYA,GAAK,EACHH,I,EA2SSI,EAAA,SAAA9K,I,uGAOxBtf,MAAAqqB,EAMezD,YAEbwD,GAKDra,EAAAzhB,EAAAg8B,mB,kCAEDv9B,EAAAO,GAAA9F,EAAAkS,GAQA3M,EAAOxB,KAAQ,GACFkE,QAAAtQ,IAAA,CACZmP,EAAA22B,mBAAAnV,SAAAC,G,uCAED,QAOAhjB,EAAOw9B,GAAQx9B,EAAAE,KACDu9B,GAAA,EAAAz9B,EAAAO,IAAAP,EAAAw9B,GAAA,GACbhX,EAAAiX,EAAA,G,SAYMjd,EAAA,0CAVPA,EAAA,8CAGKjf,EAAAsvB,WAAArK,KAAAvC,YACM1iB,EAAAqvB,eAAArK,KAAA/U,MACVksB,EAAA,IAAAC,GAAAtX,EAAA9kB,EAAAmvB,UAAAnvB,EAAAovB,eAAApvB,EAAAqvB,eAAArvB,EAAAsvB,WAAAkM,EAAAC,EAAAC,GAAA,SAAAzI,G,iDJ0b4B,cIxb7B,GAAA9N,IAIc1mB,EAAAxB,KAAA,GACb,M,kBAEDwB,EAAA49B,GAAA59B,EAAA,UAQAuB,EAAAunB,KAAA,wBAAgD9oB,EAAA49B,IACjCR,IACd77B,EAAAmvB,UAAAnM,WAEDnB,EAAApjB,EAAA49B,IAQAN,KAEC,Q,0BAED,GAAAv9B,EAAA,KAAM,CACG,CACR,G,SAxHA,E,oBA8HD3K,MAAA,SAAMo/B,G,EAAA,uCAAAA,GACJ95B,KAAAmjC,kBAASrJ,IAAA,EACV95B,KAAA69B,UAAA79B,KAAA69B,UAAAtlB,S,iCAEDmW,aAAA1uB,KAAAyhC,2BAGAzhC,KAAAyhC,0BAAM,MAELzhC,KAAAs+B,YAAAt+B,KAAAwiC,wB,GACF,CAEDjrC,IAAA,S,kBAIauuB,EAWyB,mCAAAgU,UAC1B95B,KAAAmjC,kBAAArJ,I,uCADW95B,KAAA4hC,gBAAehE,GAC1B59B,KAE6D69B,WAAA79B,KAAA2hC,iBAAA,G,iCAYrE,SACOrI,GAKR,IAAA8J,EAAA9J,GAAA,IAAA7/B,MAAAkd,U,iGAiBD,QAAAzb,EAAA,EAAAA,EAAA8E,KAAA6gC,iBAAAjoC,OAAAsC,IAAA,CAOA,IAAAmoC,EAAArjC,KAAU6gC,iBAAA3lC,GACAmoC,GAAA,MAAAA,EAAAjrB,SAAAirB,EAAAtC,SACGsC,EAAKpJ,YAAMoJ,EAAApJ,WAAA,qBACTj6B,KAAO6gC,iBAAI3lC,GACnB8E,KAAG8gC,uB,CAQP,IAAA9gC,KAAA8gC,uBAAA9gC,KAAA6gC,iBAAA,G,2BAIHnmC,MAAA,SAAAs/B,EAAAsJ,GAME,IAAIzE,EAIFA,EADFyE,EACaA,EAAAzqC,KAAW,SAAM0qC,GAC5B,OAAO1c,EAAQ0c,E,SACb,KAHoB,U,MAIlBvjC,KAAIwjC,cAAaxJ,EAAA6E,G,GACjB4E,EAAQxJ,YAAWwJ,EACjBxJ,WAAW,oB,uCAUGD,EAAA6E,G,QACC,IAAAjD,GAAA5B,GAAAzwB,W,QAEpBu1B,QAAA59B,IAAAwiC,GAAA,CACF,IAAAC,EAAA3jC,KAAA8+B,QAAAjgC,IAAA6kC,GAEDD,EAAUE,EACR9kC,IAAAggC,GAEH8E,EAAAxyB,OAAA0tB,G,wCAED4E,OAAAniC,E,OAGAmiC,C,yBAIA/oC,MAAA,SAAAkpC,EAAAC,G,EAGK,uBAAAD,EAAA,IAAAC,GACH7jC,KAAAm2B,WAAkB,KACnBn2B,KAAA6iC,oBAAA,E,sEAOA7iC,KAAA8jC,yB,6BJoQmC,IIlQpC9jC,KAAA4hC,gBJ4Pc,IIvPb5hC,KAAAw9B,mBAAAuG,yBAED,G,KAWC,qB,2DAED/jC,KAAAk2B,eAAA,K,KAQA2M,oBAAA,E,+CAWE7iC,KAAOmgC,6BAORngC,KAAAmgC,4BJoNmC,GIpNnCngC,KAAAy9B,uBAAAsG,wB,QAMC,yB,MAOD,SAAApnC,G,kIAED,G,KAWC,gB,iBAEiBqD,KAAlBgkC,U,KAAAlE,cAGE,IAAAj8B,GAAW,EAAAzC,GACJ,EACLC,OACKC,EAEL0Z,GACA,EAAAG,GAAA,EAAAC,OAAA9Z,EACH,I,gGApND,IC7jBF,QAAAuZ,EAAAC,EAAAmpB,EAAAvgC,SAAAC,OAAAC,cAAAC,GAAAgX,EAAAC,EAAAhX,QAAAC,MAAAF,GAAA,GAsBS,IAAAk7B,EAAgBlkB,EAAOngB,MAC/BsF,KAAAg/B,YAAAD,EAEe,CCmBZ,CDlBK,MAAAv9B,GACTJ,GAAA,EC3BAC,EAAAG,CA0BgB0iC,SACdC,IACDtgC,GAAA,MAAAiX,EAAA9W,QAEY8W,EAAmB9W,QAahB,CATO,QAErB,GAAA5C,EAEF,MAAAC,CAKgB,CACZ,CAOA,CCqBA,C,SDfF8Z,GAAA,EAIFC,EAAA5Z,CC7DA,SAoCA,I,mBA4BkEgC,EAAAQ,QAG9D,C,QAHiB,GAAMmX,EACF,MAAbC,CAER,CAKA,C,2MAIFhD,EAAU8lB,OAAA9lB,EAAA4hB,WAAA5hB,EAAAgB,KAAAhB,EAAA6hB,W,CACR,QAAOmK,EAAK,EAAAA,EAAApkC,KAAAk/B,iBAAAtmC,OAAAwrC,IAAApkC,KAAAk/B,iBAAAkF,IAAApkC,KAAAqkC,SAAAD,E,kCAMb,W,qBAGDvX,eAAeyX,EAAftkC,KAAAg2B,UAAAnM,UAAoC,aACd,Q,6FAItB0a,mBAAArK,EAAA,4B,KAAAsK,YAAAtK,E,QAOC,mB,qEAGOuK,SAARzkC,KAAAmjC,oBAAArB,C,UAQC,wB,qEACD,IAAA4C,GAAA,EAAQviC,EAAAwiC,SAAAxtB,EAAA,KACN,GAAOvO,MAAMC,QAAA67B,OAAAjnB,QAAA,aACd,IAAAmnB,EAAA,gBAAAC,EAAAC,aAAAC,WAAAx7B,WAAA,I,2NPq1BwD,C;;;;;;;;;;;;;;;;MO70BzDo0B,4BAA0D,E,GAMtC8E,kBAA0B;;;;;;;;;;;;;;;;;UA+BvC,W,wBACEr/B,EAAM4hC,GACdjlC,EAAA5I,E,CAAA6I,KAAAilC,G,+BAGDllC,EAAWG,E,CAAA+kC,EAAA,M,KAEV,O,4CAPM,G,GA4B4B,W,0BAS3BllC,EACI5I,E,CAAI6I,KAAAklC,E,QAIZnlC,EAAiBG,E,CAAAglC,EAAa,C,kBAKlCxqC,MAAA,W,OAIAsF,KAAAmlC,QAAQ3nB,KAAAxd,K,6CAUQolC,EAAqCC,G,IAClDC,EAAA,IAAAC,GAAA/e,EAAA4e,GACFI,EAAA,IAAAD,GAAA/e,EAAA6e,G,oDAUC,WAEA,OAAIE,GAA0BE,G,OA/CG,G,GAsErB,SAAAP,G,8CAEdQ,I,OAAA3lC,EAAkB5I,E,CAAA6I,KAAA0lC,G,EACZzgC,MAAKjF,KAASkE,U,QAGhBnE,EAAoCG,E,CAAAwlC,EAAA,C,KAKrC,U,MAGF,SAAArrB,EAAAC,G,+BA/ND,c,MACE,SAAO0qB,GAJP,QAAA7iC,EAAAwjC,gBAAA,kD,kDAOF,QAImC,GAAa,CAAkBpuC,IAAA,UAA3DmD,MAAA,WC9BLypC,UAAesB,GAEH,GAEf,CAEeluC,IAAA,UACd4sC,iB,4JAIA,G,iCASC,Y,UAEC,e,IACD,W,WACDjlC,IAAA,SAAAQ,G,GAAoBA,C,OD+MN,C,OC5MP,IAAAkmC,G,sCAgBPZ,EAAQa,EAAAC,EAAAC,G,MACC7hC,UAAYtL,OAAA,YAAAsL,UAAA,GAAAA,UAAA,QACpBnE,EAAA5I,E,CAAA6I,KAAAgmC,G,6DAGU,IAtCsB,IAAAC,EAAA,GAsCtBjB,EAAAP,W,GCjDPwB,EAAAJ,EAAAC,EAASd,EAAAztC,IAAAsuC,GAAf,EAAME,IAKQE,IAAc,G,6BAGPjB,EAAOkB,UAAuB,QAAAD,EAAA,C,KACbE,WAASvuC,KAAMotC,GAAwB,KACrE,CAEMhlC,KAAGmmC,WAAavuC,KAAKotC,GACHA,EAAlBhlC,KAAI+lC,WAAmBf,EAAAkB,M,eAGnCnmC,EAAYG,E,CAAA8lC,EAAA,C,KAEV,U,MACA,WACA,GAAc,IAAdhmC,KAAOmmC,WAAOvtC,OAAA,YACf,I,EAAAosC,EAAAhlC,KAAAmmC,WAAAp3B,MAwBK,G,8DAvBPxX,IAAAytC,EAAAztC,IAEDmD,MAAAsqC,EAAAtqC,OAqBQsF,KAAiB+lC,WAKjB,IADQf,EAAOA,EAAOoB,MACDpB,EAAAP,WACdzkC,KAAAmmC,WAAAvuC,KAAAotC,GACKA,EACdA,EAAOkB,WAIA,IADDlB,EAAQA,EAAMkB,OACTlB,EAAAP,WAONzkC,KAAAmmC,WAAAvuC,KAAAotC,G,SAIC,OAAKz+B,CACX,G,CASDhP,IAAA,UACDmD,MAAA,WAEI,OAAAsF,KAAmBmmC,WAAnBvtC,OAAA,CACA,GAEJ,CAEMrB,IAAA,OACJmD,MAAS,WACH,GAAa,IAATsF,KAAGmmC,WAAMvtC,OAAA,YACnB,IAAKosC,EAAIhlC,KAAUmmC,WAAAnmC,KAAAmmC,WAAAvtC,OAAA,GACb,OAAAoH,KAASqmC,iBAAwBrmC,KAAMqmC,iBAAMrB,EAAAztC,IAAAytC,EAAAtqC,OACjC,CACTnD,IAAMytC,EAAQztC,IACvBmD,MACEsqC,EAAItqC,MAUF,K,QAOH,W,sBAGE4rC,EAAS/uC,EAAMmD,EAAO6rC,EAAOH,EAAKF,GACvBnmC,EAAsB5I,E,CAAA6I,KAAAsmC,G,gBAEpC5rC,MAAMA,E,KACN6rC,MACE,MADOA,EACMA,EAAAD,EAAWE,I,UACnB,MAAAJ,IAAAK,GAAAC,W,0CAGL3mC,EAAwBG,E,CAAAomC,EAAc,C,CCrHxC/uC,IAAA,OAEOmD,MAAA,SAAAnD,EAAQmD,EAAA6rC,EAARH,EAAAF,G,sHAmBD,C,6BAMP,OAAAlmC,KAAAomC,KAAAO,QAAA,EAAA3mC,KAAAkmC,MAAAS,O,wBAWC,WAEH,Q,iCAeC,SAA4BzI,GAC5B,OAAMl+B,KAAOomC,KAAAQ,iBAAiB1I,MAAYA,EAAAl+B,KAAAzI,IAAAyI,KAAAtF,QAAgBsF,KAAAkmC,MAAAU,iBAAA1I,E,iCAgB1D,SAAyBA,GACzB,OAAMl+B,KAAAkmC,MAAkBW,iBAAA3I,IAAKA,EAAWl+B,KAAAzI,IAAAyI,KAAAtF,QAAAsF,KAAAomC,KAAAS,iBAAA3I,E,QAK1C,O,MAGA,W,gCAIQl+B,KAAaomC,KAAAU,M,8CAUXA,OAAMvvC,G,8CAUP2uC,M,mBAEClmC,KAAOkmC,MAAAa,Q,QAehB,S,iCAEDd,EAAAH,EAAAvuC,EAAA+R,EAAA/R,K,OAGA+R,EAAA28B,EAAA,EAAA38B,EAAA09B,KAAA,KACE,UACA19B,EAAA88B,KAAAa,OAAA1vC,EAAyCmD,EAAAorC,GAAA,MAEtB,IAAbG,EAAa38B,EAAA09B,KAAA,KAAAtsC,EAAA,gBAGX4O,EAAA09B,KAAA,UAAoB,UAAA19B,EAAA48B,MAAAe,OAAA1vC,EAAAmD,E,KAEtBwsC,Q,2BAaJ,WACF,GAAAlnC,KAAOomC,KAAI3B,UAAS,OAAYgC,GAAgBC,WACjD,IAAAp9B,EAAAtJ,K,+HAjJU,G,oBAWT,SAAOzI,EAAAuuC,GACR,IAAAx8B,EAAA69B,E,qGAsIF79B,IAAA09B,KAAA,eAAA19B,EAAA88B,KAAA1pC,OAAAnF,EAAAuuC,GAAA,UCrLD,C,GA8CIx8B,EAAA88B,KAAAgB,WAAyB99B,IAAA+9B,gBAE7B/9B,EAAA48B,MAAAzB,WAAAn7B,EAAA48B,MAAAkB,UAAA99B,EAAA48B,MAAAE,KAAAgB,WAAA99B,IAAAg+B,iB,gBAKa,GAmBQh+B,EAAA48B,MAAkCzB,UAClC,OACTgC,GAAmBC,WAFVS,EAAkC79B,EAAA48B,MAAAY,OACrBx9B,EAAbA,EAAA09B,KAAAG,EAA0B5vC,IAAA4vC,EAAAzsC,MAAA,UAAA4O,EAAA48B,MAAAqB,aAnB5B,CAsBfj+B,IAAA09B,KAAA,oBAAA19B,EAAA48B,MAAAxpC,OAAAnF,EAAAuuC,GASQ,C,yBAWT,S,wEAQDx8B,EAAAtJ,KAOC,OANKsJ,EAAA48B,MAAKkB,WAAU99B,EAAO88B,K,8BAExB98B,EAAA88B,KAAWgB,UAAC99B,EAAA88B,UAAAgB,WAAA99B,IAAA+9B,gB,EAEZjB,KAAAgB,UAAW99B,EAAA48B,MAAakB,WAAK99B,EAAWA,EAAAk+B,cAE3Cl+B,C,4CAQGA,EAAMtJ,KAAAwnC,a,OACNl+B,EAAA48B,MAAOE,KAAKgB,W,GAEf99B,GADEA,IAAA09B,KAAA,oBAAA19B,EAAA48B,MAAAmB,iBACFI,e,uFAaDn+B,EAAA88B,UAAAgB,WAEC99B,GADCA,EAAOA,EAAA+9B,gBACRG,c,4CAUGE,EAAI1nC,KAAAgnC,KAAA,KAAa,KAASV,EAAEE,IAAA,KAAAxmC,KAAAkmC,MAAAE,M,YAC1BF,MAAAc,KAAc,KAAK,KAAAhnC,KAAUumC,MAAOmB,EAAA,K,4CAcvCC,EAAA3nC,KAAAgnC,KAAA,UAAAV,EAAAE,IAAAxmC,KAAAomC,KAAAF,MAAA,MACF,OAAAlmC,KAAAomC,KAAAY,KAAA,UAAAhnC,KAAAumC,MAAA,KAAAoB,E,0CAQGvB,EAAApmC,KAAAomC,KAAAY,KAAA,WAAAhnC,KAAAomC,KAAAG,MAAA,WAIAL,EAAMlmC,KAAAkmC,MAAAc,KAAoB,KAAK,MAAAhnC,KAAAkmC,MAAkBK,MAAO,W,OAIxDvmC,KAAOgnC,KAAK,WAAAhnC,KAAAumC,MAA0BH,EAAEF,E,QAO3C,iB,qDAGD,EAAA0B,IAAW5nC,KAAA2mC,QAAA,C,oDAOX3mC,KAAGomC,KAAAgB,SAAA,UAAAh8B,MAAA,0BAAApL,KAAAzI,IAAA,IAAAyI,KAAAtF,MAAA,K,GAAHsF,KAAAkmC,MAAGkB,SAAC,MAAsB,IAAAh8B,MAAA,mBAAApL,KAAAzI,IAAA,IAAAyI,KAAAtF,MAAA,YACxB,IAAIktC,EAAY5nC,KACdomC,KAAOyB,SAGT,GAAMD,IAAmC5nC,KAAAkmC,MAAA2B,SAAA,UAAAz8B,MAAA,uBACrC,OAAOw8B,GACA5nC,KACTonC,SAAA,EAAiB,E,OFtEhB;;;;;;;;;;;;;;;;MEgFAZ,KAAA,E,GAEEsB,OAAgB,E,+CASd/nC,EAAA5I,E,CAAA6I,KAAA+nC,E,QAILhoC,EAAWG,E,CAAA6nC,EAAA,C,kBAMb,SAASxwC,EAASmD,EAAW6rC,EAAAH,EAAAF,G,OAC3BlmC,I,gCAqBmBzI,EAAvBmD,EAAAorC,G,OAAA,IAAAkC,GACEzwC,EACAmD,EAAA,K,uBAeA,SAAiBnD,EAAAuuC,GACjB,OAAO9lC,I,gBAQTtF,MAAA,W,OAAA,C,kBASAA,MAAA,W,OAGA,C,iCAYE,SACawjC,G,OAEX,C,QAeH,mB,0BAED,G,KAIC,S,4BAED,G,KAKE,S,wBACoD,I,2DAetDxjC,MAAA,W,OAAA,C,aAgBiB,W,wBAERutC,G,MACL/jC,UAAMtL,OAAe,QAAW,IAAVsL,UAAU,GAAAA,UACvB,GAAKgkC,EACZxB,WAEE3mC,EAAuB5I,E,CAAA6I,KAAAkoC,G,iBACpBD,E,oBAGNloC,EAAAG,E,CAAAgoC,EAAA,C,6BASW3wC,EAAAmD,G,OAEP,IAAIwtC,EAAMloC,KAAAioC,YAAsBjoC,KAAAmoC,MACrClB,OAAO1vC,EAAEmD,EAAAsF,KAAAioC,aAAAjB,KAAA,UAAAgB,GAAAF,MAAA,W,gCAcJvwC,G,OACL,IAAM2wC,EAAWloC,KAAOioC,YAAWjoC,KAAAmoC,MACjCzrC,OAAAnF,EAAeyI,KACXioC,aACJjB,KAAA,UAAAgB,GAAAF,MAAA,W,gCAQJ,IADI,IAAN7B,EAAAjB,EAAAhlC,KAAAmoC,OACMnD,EAAKP,WACP,C,GAGK,K,EAFIzkC,KAAMioC,YAAY1wC,EAC3BytC,EAAOztC,MACF,OAAAytC,EAAAtqC,MACCurC,EAAA,EAAAjB,EAAoBA,EAAsBoB,KACvCH,EAAC,IAAAjB,EAAcA,EAAMkB,M,uDAmBV3uC,G,UACnBytC,EACChlC,KAAOmoC,MAAMC,EAAA,MAEhBpD,EAAAP,WAAA,C,QACFwB,EAAAjmC,KAAAioC,YAAA1wC,EAAAytC,EAAAztC,M,qBAaU,OAAK6wC,EAAcA,EAAgB7wC,IAE7C,KARO,IALRytC,IAAAoB,MAKQpB,EAAAkB,MACNzB,WAAAO,EAAsBA,EAAAkB,MAElB,OAAelB,EAAKztC,G,wBAnZfytC,EAAUA,EAAAkB,MACnB,CAQD,UAAA96B,MAAA,wE,IAkZU7T,IAAA,U,6EASF,OAATyI,KAASmoC,MAAAxB,O,iBAQTjsC,MAAA,W,OAAAsF,KAAAmoC,MAAME,Q,QAKN,S,MAAA,WACE,OAAOroC,KAAKmoC,MAAApB,Q,iCASb,SAAA7I,G,wCAhC0B,CAwD1B3mC,IAAA,mBACAmD,MAAA,SAAAwjC,GAEH,OAAAl+B,KAAAmoC,MAGAtB,iBAAA3I,EACA,GAEAoK,CCzeM/wC,IAAI,cAIJmD,MAAW,SAAiB6tC,GAIhC,WAAAC,GAAMxoC,KACJmoC,MAAQ,KAASnoC,KACfioC,aAAO,EAAaM,EAMpB,GAKA,CACIhxC,IAAA,kBACNmD,MAAW,SAAAnD,EAAQgxC,GACpB,WAAAC,GAAAxoC,KAAAmoC,MAAA5wC,EAAAyI,KAAAioC,aAAA,EAAAM,EAEK,GAEJ,CACMhxC,IAAA,yBACNmD,MAAA,SAAmBnD,EAAAgxC,GACb,OAAI,IAAAC,GAAyBxoC,KAAAmoC,MAAA5wC,EAAAyI,KAAAioC,aAAA,EAAAM,E,4CAMXA,G,OACnB,IAAAC,GAAAxoC,KAAAmoC,MAAA,KAAAnoC,KAAAioC,aAAA,EAAAM,E,KAQLL,C,CDyRe;;;;;;;;;;;;;;;;;SCrPVO,GACFrC,EAAAF,G,OACAxf,EAAA0f,EAAArsC,KAAAmsC,EAAAnsC,K,UAGJ2uC,GAAAtC,EAAAF,GACF,OAAAxf,EAAA0f,EAAAF,EAED;;;;;;;;;;;;;;;;MArC6BQ,WAAA,IAAAiC,G,kCCxD3B,iBAAWC,EAAA,UAAAC,EAAAD,G,UAAXA,C,sBAGAE,aAAO,C,QAAPppC,O,IACEimB,QAAM,iBAAAjmB,GAAA,iBAAAA,GAAA,iBAAAA,IAAA,EAAAyC,EAAAuiB,UAAAhlB,EAAA,8C,UACAimB,QAAMojB,IAAAC,IAAAD,EAAAtE,UAAA,iC,YAERsE,IACyBC,IAAQD,EAAAE,cAAAxE,UAAA,qD,KAkBpB,W,4IAvCUzkC,KAAAkpC,SC3B/BlpC,KAAAmpC,gB,uNAwBE,G,CAEc5xC,IACV,c,iBAIH,OAAAyI,KAAAmpC,a,IACD5xC,IAAA,iB,MACE,SAAY6xC,GACb,WAAAC,EAAArpC,KAAAkpC,OAAAE,E,IACD7xC,IAAA,oB,MACE,SAA8B+xC,G,+EAEhC,G,CAEU/xC,IAAA,W,MACT,SAAAikC,G,yDACM6N,EAAAE,0BAAA7C,U,QAGN,W,yBAED,G,CAEanvC,IAAA,0B,MACZ,SAAA+xC,EAAAE,G,eAMgBjyC,IAAC,uB,MACjB,SAAA+xC,EAAAG,G,kLAlC6B,GCvBhC,CA4BMlyC,IAAU,cAGVmD,MAAA,SAAa8gC,EAAOiO,GAEpB,IAAAC,EAAAC,GAAoBnO,GAEpB,cAAAkO,EAAiBD,EAEvBA,EAAAhF,WAAA,cAAAiF,EAAA1pC,O,qFAiBuBA,KAAA4pC,qBAAAF,EAAAL,EAAAE,0BAAA7C,WAAAmD,YAAA1N,GAAAX,GAAAiO,I,IAMclyC,IAAA,UAE5BmD,MAAA,WACC,QACN,GAGA,CACyBnD,IAAA,cACvBmD,MAAA,W,YAKFnD,IAAA,eAEImD,MAAK,SAAwBvC,EAAA+lC,GAE5B,Q,IAOH3mC,IAAM,MAGNmD,MAAA,SAAmBovC,GACpB,OAAAA,IAAA9pC,KAAAipC,cAAAxE,UAAA,CACY,SAAUzkC,KACnB+pC,WAEJ,YAAA/pC,KAAAipC,cAAAvpC,OAGAM,KAAA+pC,UACC,GAGC,CAEKxyC,IAAA,OAEHmD,MAAmB,WACb,GACG,OADCsF,KAAIgqC,UACL,CAEE,IAAKC,EAAK,GAEPjqC,KAAKmpC,cACnB1E,YAAUwF,GAAU,YAAAC,GAAAlqC,KAAAmpC,cAAAzpC,OAAA,KAGX,IAAGqM,EAAAhM,EAAaoqC,EAAb,CAAanqC,KAAAkpC,QACnBe,GAAAl+B,EAAA,IACWk+B,GAAA,WAALl+B,EAAK88B,EAAA7oC,KAAAkpC,QACtBlpC,KAAAkpC,OAEYlpC,KAAMgqC,UAAKI,EAAAH,EAEZ,C,wBAUN,CAKN1yC,IAAA,WAEFmD,MAAA,WACa,OAAAsF,KAAAkpC,MACJ,GAIH,CAGM3xC,IAAG,YACJmD,MAAO,SAAkB0hC,G,iLAc9B7kC,IAAK,qBACHmD,MAAK,S,GAEA,IAAK2vC,EAAAtqC,EAAeoqC,EAAf,CAAeG,EAAApB,QAEjBqB,EAAiBxqC,EAAAoqC,EAAF,CAAEnqC,KAAAkpC,QACjBsB,EAASnB,EAAAoB,iBAAAhtB,QAAA4sB,GACtBK,EAAArB,EAAAoB,iBAAAhtB,QAAA8sB,G,kGAOsB,WAAHA,EACtB,ECnIevqC,KAAAkpC,OAAAoB,EAAApB,QAAA,EAAoBlpC,KAAYkpC,SAAAoB,EAAApB,OAAA,EAAG,EAGlCwB,EAAAF,CAIP,GAAgC,CAAcjzC,IAAS,YAAGmD,MAAA,WAClE,OAAAsF,IAEe,GAIL,CAAgCzI,IAAA,YAAcmD,MAAA,WAAY,QACpE,GAOC,CACMnD,IAA0B,SAC9BmD,MAAA,SAAY0hC,GACZ,GAAAA,IAASp8B,KAAA,SACT,GAAOo8B,EAAA0M,aAAA,CACP,IAAAwB,EAAAlO,EACH,OAAAp8B,KAAAkpC,SAAAoB,EAAApB,QAAAlpC,KAAAmpC,cAAAwB,OAAAL,EAAAnB,cAEe,SAIP,I,CAA8C,CAAY5xC,IAAA,4BACnEsH,IAAA,WCjFA,OAAA+rC,E,MAqCa,SACkBlrC,G,IAAM,K,EJ4BhB,G,wEI8CL,SAAAwlC,G,eAEatsB,E,CAAQiyB,EAAuB3F,G,MAC3CnlC,EAAyB8Y,E,CAC5BgyB,G,oBASH9qC,EAAA5I,E,CAAA6I,KAAA6qC,G,EAEN5lC,MAAAjF,KAAAkE,U,QAEFnE,EAAAG,E,CAAA2qC,EAAA,C,eACDnwC,MAAA,SAAc2f,EAAAC,G,IAAdwwB,EAAAzwB,EAAA2qB,KAAAiE,cACM8B,EAAQzwB,EAAA0qB,KACViE,c,EAEO6B,EAAQE,UAAeD,GAEjC,WAAAE,EAAAvkB,EAAArM,EAAAtgB,KAAAugB,EAAAvgB,M,SAEC,c,MACD,SAAAirC,G,wCAEC,sB,MACD,SAAAI,EAAAC,G,sDAEC,U,MACD,W,gBCjJH,C,oBAgCa,W,6CAUL,GAEJ,CACI9tC,IAAC,W,4EAGP,G,gBAIAmD,MAAA,W,MAAA,W,OD4Dc,C,OCxDS,IAAAwwC,G,GAmCC9jB,KAAC9uB,IAAA,G,sCAGjBM,GACEmH,EAAa5I,E,CAAA6I,KAAgBmrC,G,IACzBC,E,YAAAA,EAUdxyC,EAAA,E,SANEwuB,KAAO9uB,IAAK8yC,GAAAC,GACH,K,sCAOFrrC,KAAQ2mC,M,uCAChB2E,MAAA1yC,EAAA,EAAA2yC,C,0CAEC,W,qCAEc,O,gBAAhBhlC,C,aAY0B,SAAailC,EAAAvF,EAAAwF,EAAAC,G,EAEtCroB,KAAA4iB,G,wBAEc0F,E,WACT,I,EAAM,OAAO,K,GACT,I,WACNH,EAAcI,G,EACfH,EACCA,EAAOE,GAAeA,EAEzB,IAAA3D,GAAAzwC,EAAAo0C,EAAA3G,KAAAgD,GAAAF,MAAA,W,yBACF1B,EAAAyF,EAAAD,EAAAE,GCzID5F,EAAA2F,EAAAC,EAAA,EAAAC,G,gBAuCaN,EAAaA,EASZE,GAAmBA,E,iCAGf,SAAkBK,G,IAChC,IAAIhH,EAAC,K,kCAEP,IAAW4G,EAAXzzC,EAAW8zC,E,EAAX9zC,E,GAQO8zC,E,IAGLC,EAASL,EAAqBD,EAAE,EAAOG,GAErCJ,EAAYH,EAAAI,G,EACPH,EAASA,EAAAE,GAAgBA,E,EAY9B,IAAO3D,GAELzwC,EACAo0C,EACA3G,KAAMuB,EACN,KAAA2F,G,mBAIQlH,EAAdoB,KAAA+F,E,EAAAA,IAMEC,EAAID,EAEFnH,EAAAmH,E,IAOE,EAAAjxC,EAAA8wC,EAAWrF,QAAAzrC,EAAA,C,yBAGFksB,KAAAC,IAAQ,EACf2kB,EAAQrF,OAA4BzrC,EAAC,I,IAKzBmxC,EAAyBrE,GAChBF,Q,EAMfuE,EAAOrE,GAAmBF,O,EAC5BuE,EAAArE,GAAQxB,K,kBAUFgF,EAAA5yC,S,cAMP8yC,GAAAzF,EAAAqG,E,KAkBQ,CAAQ,E,GACF,W,0BAEXC,GACPxsC,EAAA5I,E,CAAA6I,KAAAwsC,G,cAEGC,E,eACAF,C,UAEmBrsC,E,CAACssC,EAAA,C,0BAKhBE,G,OAEF,EAAOvqC,EACTwiC,SAAQ3kC,KAAAysC,SAAAC,G,MAER,MAAQ,IAAGthC,MAAQ,wBACjBshC,G,oBAILjG,GAAAkG,EAMN,I,qCAGC,OAAO,EAAAxqC,EAAQuiB,UAAA1kB,KAAAusC,UAAAK,EAAArjC,W,IAEjBhS,IAAA,W,MAAA,SAAAq1C,EAAYC,IACV,EAAA1qC,EAAWwjB,QAACinB,IAAAE,GAAA,uE,IACb,IAIDC,EAJCvB,EAAA,G,8BACD1nC,EAAAmF,EAAA+jC,UAAAlpC,GACEmpC,EAAYA,GAAcL,EAAmBM,YAAAppC,EAAAkhC,MAC9CwG,EAAA5zC,KAAAkM,G,cACOipC,EAARE,EAAQE,GAAA3B,EAAAoB,EAAAQ,cACMC,GACb,IAAAC,EAAAV,EAAArjC,W,0CAE4B,IAArBgkC,EAAAjzC,OAAqBgI,OAAA,GAAAtC,KAAAysC,U,SAArBa,GAAAP,E,uCAYL,SACmBpB,EAAUkB,GAE9B,IAAMhmC,EAAA7G,K,OAgEC,IAAIwsC,GA/DX,EAAArqC,EAAAtJ,KAAAmH,KAAAysC,UAAuC,SAAKe,EAAYF,GAClD,IAAAn1C,GAAA,EAAAgK,EAAoBwiC,SAAkC99B,EAAC0lC,UAAAe,GAIvD,IAHA,EAAAnrC,EAAAwjB,QAAcxtB,EACiB,oCACAm1C,GAC/BE,IAAeH,GAAyC,CAEtD,GAAAl1C,EAAA+0C,YAAevB,EAAc3G,MAAA,CAajC,IANA,IAAAwG,EAAiB,G,uCAML1nC,GAMGA,EACf/J,OAAS4xC,EAAY5xC,MAAOyxC,EAAS5zC,KAAEkM,GACnCA,EAAemF,EACnB+jC,UAOA,OALIxB,EAAA5zC,KAAA+zC,GAKGwB,GAAmC3B,EAAUrzC,EAAWi1C,aAChE,CACC,OAAIC,E,CASJ,IAAMI,EAAAZ,EACShuC,IAAI8sC,EAAS5xC,MACxB2zC,EAAAF,E,OACFC,IAAIC,EAAqBA,EACvBhxC,OAAA,IAAkB6oC,GAChBoG,EAAA5xC,KAAA0zC,KAGJC,EAAOzG,OAAc0E,IACnB3G,K,8DAmBH2G,EAAAkB,GC/NI,WAAWL,GDgOT,EAAArqC,EAAatJ,KACjBmH,KAAAysC,UACqB,SAAAe,G,GACzBA,IACaH,GAEf,OACCG,E,wDAGLA,C,IC1OuBxtC,KAAAusC,U,KAGtB,CACch1C,IAAA,UACPsH,IAEP,WAOM,OANA,EAAAsD,EAAKwjB,QAAA0nB,IAAAM,GAAA,uCACFC,GAAMA,IAAA,IAAApB,EAAA,CACC,YAAmBa,IACpB,CACD,YAAmBM,I,OD4ER,G,sCCjDrBE,EAAY1E,EAAS2E,GAExB/tC,EAAA5I,E,CAAA6I,KAAA+tC,G,2CAEDD,Y,eAGA,K,2CAKA9tC,KAAA6tC,UAAApJ,YAAA,EAAAtiC,EAAAwjB,SAAA3lB,KAAAmpC,eAAAnpC,KAAAmpC,cAAA1E,UAAA,uC,QAKE1kC,EAAAG,E,CAAA6tC,EAAO,C,CAIEx2C,IAAA,a,MAEV,W,YAGaA,IAAQ,c,MACrB,W,iCAMCA,IAAA,iB,MACA,SAA2B6xC,GAC5B,OAAAppC,KAAA6tC,UAAApJ,U,2CAED,G,CAMWltC,IAAW,oB,eAGX+xC,G,6CAIX,IAAA0E,EAAQhuC,KAAA6tC,UAAAhvC,IAAAyqC,GAAR,OAAQ,OAAR0E,EAAQC,GAAAD,C,IAIRz2C,IAAA,W,MAGA,SAAAikC,GACE,IAAAkO,EAAYC,GAAmCnO,GAChD,cAAAkO,EAAA1pC,K,6CAMCzI,IAAA,W,MACA,SAAmB+xC,GACpB,cAAAtpC,KAAA6tC,UAAAhvC,IAAAyqC,E,IAED/xC,IAAQ,uB,MACN,SAAmB+xC,EAAAG,G,IACpB,EAAAtnC,EAAAwjB,QAAA8jB,EAAA,8C,8CAED,IAAAiE,EAAAQ,EAAAvC,EAAY,IAAApG,GAAA+D,EAAAG,GACDA,EAAKhF,WACfiJ,EAAA1tC,KAAA6tC,UAAAnxC,OAAA4sC,G,uDAEDoE,EAAS1tC,KAAA6tC,UAAA5G,OAAAqC,EAAAG,GAATyE,EAASluC,KAAA8tC,UAAAK,aAAAxC,EAAA3rC,KAAA6tC,YAER,IAAAO,EAAAV,EAAAjJ,UAAAwJ,GAAAjuC,KAAAmpC,c,mBAED,G,CAEgB5xC,IAAG,c,MACjB,SAAmBikC,EAAOiO,GAC1B,IAAAC,EAAKC,GAA2BnO,GAChC,GAAK,OAALkO,EAAK,OAAmBD,GAExB,EAAKtnC,EAAAwjB,QAAA,cAAAgkB,GAAAnO,IAAA,IAAAa,GAAAb,GAAA,8CACL,IAAK6S,EAAsBruC,KAACsuC,kBAAA5E,GAAAG,YAAA1N,GAAAX,GAAAiO,GAC5B,OAAKzpC,KAAA4pC,qBAAsBF,EAAe2E,E,IAK9B92C,IAAA,U,MACb,W,kCACF,CAEeA,IAAA,cACVmD,MAAW,WAEJ,OAAAsF,KAAY6tC,UACrBlH,OAEA,GAeY,CAIepvC,IAAK,MAClCmD,MAAU,SAAiBovC,GACjB,GAAM9pC,KAAGykC,UAAS,YAClB,IAAAr8B,EAAS,GACHmmC,EAAC,EAAAxH,EAAA,EAAAyH,GAAA,EAWV,GAVRxuC,KAAAyuC,aAAAd,IAAA,SAAAp2C,EAAAiyC,GAEephC,EAAA7Q,GAAAiyC,EAAA9pC,IAAAoqC,GAIIyE,IACCC,GAAQT,EAAAW,gBAAAhlC,KAAAnS,GAAAwvC,EAAA3f,KAAAsV,IAAAqK,EAAA1gB,OAAA9uB,IACRi3C,GAAS,CAClB,KACO1E,GAAA0E,GAAAzH,EAAA,EAAAwH,EAAA,CAGH,IAAAI,EAAA,GAMJ,IAAS,IAAG9/B,KAAKzG,EAAAumC,EAAA9/B,GAAAzG,EAAAyG,GACb,OAAK8/B,CAGT,CAEE,OADK7E,IAAA9pC,KAAAipC,cAAAxE,YAAAr8B,EAAA,aAAApI,KAAAipC,cAAAvpC,OACL0I,CAEL,GAEL,CACD7Q,IAAA,OACMmD,MAAA,WACR,UAAAsF,KAAAgqC,UAAA,CAEe,IAAAC,EAAA,GAKUjqC,KAAAipC,cAAAxE,YAAAwF,GAAA,YAAAC,GAAAlqC,KAAAipC,cAAAvpC,OAAA,KACRM,KAAAyuC,aAAWd,IAAW,SAAAp2C,EAAAiyC,GACzB,IAAAoF,EAAepF,EACxB7I,OAEO,KAAAiO,IAAA3E,GAAA,IAAmB1yC,EAAA,IAAaq3C,EACpC,IACe5uC,KAACgqC,UAAA,KAAAC,EAAA,GAAAG,EAAAH,EACd,CAGL,OAAQjqC,KAAGgqC,SAEb,GAEF,CACczyC,IAAA,0BACfmD,MAAA,SAAA4uC,EAAAE,EAAArxC,GAEe,IAAA02C,EAAA7uC,KAAA8uC,cAAA32C,GAKR,GAAY02C,EAAA,CACR,IAAUE,EAAKF,EAAAG,kBAAA,IAAAzJ,GAAA+D,EAAAE,IACX,OAAKuF,EACjBA,EAAkBh1C,KAAA,IAEV,QAAciG,KAAG6tC,UAAWmB,kBAAA1F,EAC/B,GAEL,CACK/xC,IAAA,oBACLmD,MAAU,SAAoBkyC,GAC9B,IAAUiC,EAAA7uC,KAAa8uC,cAAMlC,GAC9B,GAAAiC,EAAA,CACe,IAACxG,EAAAwG,EAAAxG,SAClB,OAAAA,KAAAtuC,IAEe,QAAAiG,KAAA6tC,UAAAxF,QAKV,GAEA,CACE9wC,IAAA,gBAGJmD,MAAS,SAAAkyC,GACJ,IAAAvE,EAAAroC,KAAAivC,kBAAArC,GACE,OAAIvE,EACD,IAAG9C,GAAS8C,EAAAroC,KAAA6tC,UAAAhvC,IAAAwpC,IAET,IAEb,GAEF,CAIc9wC,IAAA,mBAIRmD,MAAS,SAAsBkyC,GAC3B,IAAMiC,EAAG7uC,KAAM8uC,cAAAlC,GAClB,GAASiC,EAAC,CAClB,IAAA9H,EAAA8H,EAAA9H,SAED,OAAAA,KAAAhtC,IAQiD,QAAAiG,KAAA6tC,UAAA9G,QAE3C,GAKA,CAEGxvC,IAAI,eAEJmD,MAAI,SAAuBkyC,GAE3B,IAAA7F,EAAA/mC,KAAAkvC,iBAAAtC,GACL,OAAA7F,EAAA,IAAAxB,GAAMwB,EAAC/mC,KAAY6tC,UAAMhvC,IAAAkoC,IACf,IACX,GAGG,CACAxvC,IAAA,eACEmD,MAAA,SACAvC,EAA+B+lC,GAGpC,IAAA2Q,EAAA7uC,KAAA8uC,cAAA32C,GAEG,OAAY02C,EAASA,EAAAjI,kBAAA,SAAAuI,GACrB,OAAAjR,EAA6BiR,EAAGp1C,KAAAo1C,EAAAnK,KAC9B,IAILhlC,KAAA6tC,UAAAjH,iBAAA1I,EAEG,G,CAMH3mC,IAAA,cAEMmD,MAAG,SAAAkyC,GACX,OAAA5sC,KAAAovC,gBAAAxC,EAAAyC,UAAAzC,EAEe,GAIV,CAC4Cr1C,IAAA,kBAE1CmD,MAAA,SAC2C40C,EAAA1C,GAGhD,IAAAiC,EAAA7uC,KAAA8uC,cAAAlC,GACG,GAAYiC,EAAA,OAASA,EAAAO,gBAAAE,GAAA,SAAA/3C,GACqB,OAAAA,CACxC,IAMQ,IAFE,IAAAqM,EAAW5D,KAAA6tC,UAAAuB,gBAAAE,EAAAv1C,KAAAwrC,GAAAgK,MACSzrC,EAAAF,EAAG4rC,OACX,MAAX1rC,GAAY8oC,EAAUzH,QAAArhC,EAAAwrC,GAAA,GACzB1rC,EAAOopC,UACblpC,EAAYF,EAAA4rC,OAKjB,OAAA5rC,CAEF,GAEG,CAGGrM,IAAI,qBACbmD,MAAA,SAAAkyC,GCrbA,OAAA5sC,KAAAyvC,uBAAA7C,EAAA8C,UAAA9C,E,QAsCa,yB,8DAyCD6C,uBAAAE,GAAA,SAAAp4C,GAVS,OAATA,CACa,IAxBvB,IA+BgC,IAAAqM,EAAA5D,KAAtB6tC,UAAA4B,uBAA6CE,EAAA51C,KAAAwrC,GAAAgK,M,WA/BvD,MAAAzrC,GAAA8oC,EAAAzH,QAAArhC,EAAA6rC,GAAA,G,2FAqCAvT,EAAAqI,UAEE,G,EAIMrI,EAAa0M,cAAY1M,EAAQqI,UAAG,EACjCrI,IAACwT,IAAgD,EAGpD,C,QAQN,Y,eAIsBhD,G,GAElBA,IAAmBE,IAAA9sC,KAAA8tC,UAAA+B,SAAAjD,GAAA,OAAA5sC,K,IAEjBkuC,EAAaluC,KAAA8tC,UAAAgC,SAAAlD,EAAA5sC,KAAA6tC,W,OACd,IAAAE,EAAA/tC,KAAA6tC,UAAA7tC,KAAAmpC,cAAA+E,E,mCAaY/1C,G,WAGX20C,IAAyB9sC,KAAA8tC,UAAA+B,SAAA13C,E,+CAOjC,YAAAikC,EAAA0M,aAA4B,OAAoB,EAE9C,IAAOiH,EAAc3T,EACtB,GAAAp8B,KAAAipC,cAAA0B,OAAAoF,EAAA9G,e,kDAGO,I,2BADL+G,EAAAD,EAAAE,YAAAtC,IAAHuC,EAAuBC,EAAAnD,U,cACfkD,GAAwBE,GAAA,CAIxB,GAAUF,EAASn2C,OAAMq2C,EAAWr2C,OAAAm2C,EAAAlL,KAAA2F,OAAAyF,EAAApL,MAAA,SAE5BkL,EAAOC,EAAAnD,UAEhBoD,EACHJ,EAAahD,SAGP,CAEA,OAAe,OAAVkD,GAAU,OAAAE,C,CACjB,OAAO,CAAK,CAlBnB,Q,QAoCA,gB,0CAGDtC,UAAAjvC,IAAA+tC,EAAgBrjC,W,uBAIhB1K,IAAA,W,OAIQovC,KAGoDA,GAAA,IAAAF,EAAA,IAAAtH,GAAAiC,IAAA,KAAA2H,GAAAC,S,aAMnD5B,gBAAuB,iB,IChMlCkB,GAAA,IDiM2C,SAAAW,G,6BACxBxwC,EAAyB8Y,E,CACpC23B,G,oBAMIzwC,EACY5I,E,CAAsB6I,KAAAwwC,G,EAQxChnC,KAAKxJ,KAAK,IAAAymC,GAAmCiC,IAAA+H,GAAA/J,WAAA2J,GAAAC,Q,QAE7CvwC,EAAyBG,E,CAAAswC,EAAA,C,gCAQXpU,G,WACVp8B,KAAc,E,iCAWZo8B,G,6DAeJp8B,I,QAKL,oB,8CAvMC,U,wBAGE,C,OAyIqC,C,mGCpKxC0wC,aAAAD,GAAA/J,W,+CLyEgBhnC,G,GAEIA,C,EKzEPkwC,I,SCuDNe,GAAmCC,G,IACzChI,EAAO1kC,UAAAtL,OAAA,QAAmB,IAAnBsL,UAAa,GAAMA,UAAA,Q,GAC1B,OAAA0sC,EAAA,OAAAH,GAAkC/J,W,GACnC,iBAAAkK,GAAA,cAAAA,IAAAhI,EAAAgI,EAAA,eACF,EAAAzuC,EAAAwjB,QAAA,OAAAijB,GAAA,iBAAAA,GAAA,iBAAAA,GAAA,iBAAAA,GAAA,QAAAA,EAAA,0CAAAA,EAAA,YAAA7oC,EAAAoqC,EAAA,CAAAvB,KAED,iBAAAgI,GAAA,WAAAA,GAAA,OAAAA,EAAA,YAAAA,IAAA,WAWI,iBAAAA,GAA2B,QAAKA,EAAA,CAChC,IAAAC,EAAAD,EACA,OAAO,IAAIE,GAACD,EAAAF,GAAA/H,G,IAEZgI,aAAIhoC,MAmDF,CACC,IAAAo8B,EAAAyL,GAAA/J,W,OAENqK,EAAAH,GAAA,SAAAr5C,EAAAy5C,GAED,MAAA7uC,EAAAuiB,UAAAksB,EAAAr5C,IAUsC,MAApCA,EAAmBwvB,UAAS,KAAS,CAElC,IAAAyiB,EAAAmH,GAAAK,IACLxH,EAAAV,cAAAU,EAAA/E,YAAAO,IAAA4E,qBAAAryC,EAAAiyC,GChLA,C,gCD4GMyH,EAAI,GAEFC,GAAa,E,EACRN,E,KACSO,GAAmB,SAAM55C,EAAA65C,G,GACf,MAAxB75C,EAAAwvB,UAAA,KAA2B,C,IAGzByiB,EAAAmH,GAAAS,GACC5H,EAAA/E,YAEHyM,EAAOA,IAAA1H,EAAyBP,cAAoBxE,UACrDwM,EAAAr5C,KAAA,IAAA2tC,GAAAhuC,EAAAiyC,IAED,C,IAEI,IAAJyH,EAAIr4C,OAAmB,OAAA63C,GAAwB/J,W,MACvCyG,GAAe8D,EAAAxI,IACY,SAASkD,G,OAG1CA,EAAI5xC,I,UAKNm3C,EAAO,CACR,IACCG,EAAYlE,GAAA8D,EAAAtD,GAAAP,cAEf,WAAAqD,GAAAa,EAAAX,GAAA/H,GAAA,IAAAyH,GAAA,CACF,YAAAgB,GAED,CAYM,YAAmB1D,KAInB,CAAM,OAAO,IAAI8C,GAAgBa,EAAUX,GAAc/H,GAAAyH,GAAAC,Q,WN7D/C5wC,G,GACZA,C;;;;;;;;;;;;;;;;;AOrDH,I,MAAA6xC,GAAA,SAAArM,GC5CD,aA0BAnlC,EAAA6Y,EAAA,CAAA44B,EAAAtM,GACA,IAAAnsB,EAAAhZ,EAAA8Y,EAAA,CAAA24B,GACM,SAAAA,EAAAC,GAGN,IAAA5qC,E,OAFM9G,EAAuB5I,EAAvB,CAAiC6I,KAAAwxC,IAGjC3qC,EAAAkS,EAAAvP,KAAAxJ,OAEOyxC,c,mGAAA5qC,C,QAI6C9G,EAAeG,E,CAAAsxC,EAAA,CAFvE,CAGMj6C,IAAC,eAECmD,MAAO,SACXg3C,GAEF,OAAAA,EAAAC,SAAA3xC,KAAAyxC,W,IAGMl6C,IAAA,c,MAAA,SAAYytC,G,oDAKlB,U,eACe3qB,EAAIC,G,MACfta,KAAA4xC,aAAsBv3B,EAAA2qB,M,EACtBhlC,KAAA4xC,aAAoBt3B,EAAK0qB,M,EAC1B6M,EAAA7G,UAAA8G,G,OACA,IAAA7G,EAAAvkB,EAAArM,EAAAtgB,KAAAugB,EAAAvgB,MAECkxC,C,mDAUPjG,EAAAyL,GAAA/J,WAAAmD,YAAA7pC,KAAAyxC,WAAAM,GCrED,WAAAxM,GAAAyM,EAAAhN,EAuBY,GAEV,CACAztC,IAAA,UACAmD,MAAA,WAJU,IAAAsqC,EAAAyL,GAAA/J,WAAAmD,YAKX7pC,KAAAyxC,WAAA7B,IAsBe,WAAArK,GAAsB9e,EAAAue,EAC7B,GAEL,CACAztC,IAAS,WACTmD,MAAQ,WACR,OAAAu3C,GAAAjyC,KAAAyxC,WAAA,GAAA14C,KAAA,IACH,KAIGy4C,C,CFjBH,C,gCGFyCzxC,EAAwB6Y,E,CAAAs5B,EAAAhN,G,IACpCnsB,EAAehZ,EAAA8Y,EAAT,CAASq5B,G,sBARlC/6C,E,CAAA6I,KAAAkyC,G,4DAWP,SAAK73B,EAAAC,G,IACH2wB,EAAA5wB,EAAA2qB,KAAAgG,UAAA1wB,EAAA0qB,M,OAIW,IAAXiG,EAAuBvkB,EACrBrM,EAAatgB,KAAKugB,EAAAvgB,MAIXkxC,C,QAOV,c,eACuBjG,G,OACtB,C,kDAGL,OAAAI,EAAAuF,OAAAtF,ECpED,G,eAyB2B3qC,MAAA,W,UAFlB+qC,G,IAIPluC,IAAA,U,MAAA,W,OAIIguC,GAA+B4M,G,mBAGpCz3C,MAAA,SAAA03C,EAAAC,GClCD,IAAAN,EAAApB,GAAAyB,G,qBA2BW,C,6DAeR,IAAAE,G,GCDD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SCNqBC,GAAWC,G,MAAG,CACpCzmC,KAAA,QAEKymC,aAAUA,E,CAYV,SAAUC,GAAAnJ,EACdkJ,GAKA,MAAO,CAIRzmC,KAAA,cAEKymC,aAAUA,EAGdlJ,UAAOA,EAKH,C,SAGJoJ,GAA6BpJ,EACzBkJ,GAEN,OC5EAzmC,KAAA,gBA8BAymC,eAKMlJ,UAACA,E,CAQP,SAAAqJ,GAGarJ,EAAAkJ,EAAAI,G,YAAA,gB,aAcLJ,E,YAJYI,QAAKA,E;;;;;;;;;;;;;;;;;OA+CU,W,6BAEXz7C,E,CAAA6I,KAAA6yC,G,qBAMnB9yC,EAAAG,E,CAAA2yC,EAAA,C,gDAGH,EAAA1wC,EAAAwjB,QAAA+rB,EAAAoB,UAAA9yC,KAAA+yC,QAAA,qD,IAIAC,EAAAtB,EAAApD,kBACE/2C,G,SAEiEo6C,SAAIsB,GAAAtI,OAAAuI,EAAAvB,SAAAsB,K,0BAOjEvB,GAGY,MAAdyB,IACMD,EAASzO,UACXiN,EAAS0B,SAAS77C,GACpB47C,EAAyBE,iBAAAX,GAA4Bn7C,EAAAy7C,KAErD,EAAO7wC,EAAIwjB,QAAA+rB,EAAA5I,aAAA,uEAEdkK,EAAAvO,UAAA0O,EAAAE,iBAAAZ,GAAAl7C,EAAA27C,IACFC,EAAAE,iBAAAV,GAAAp7C,EAAA27C,EAAAF,K,8BASDtB,EAAA9H,qBAAwBryC,EAAe27C,GAAAI,UAAAtzC,KAAA+yC,Q,wCAMZH,EAAIW,EAAAJ,G,OACF,MAAzBA,IACAP,EAAW9J,cAAc8J,EAAUnE,aAAad,IAAE,SAAAp2C,EAAAiyC,GACnD+J,EAAAH,SAAA77C,IAAA47C,EAAAE,iBAAAX,GAAAn7C,EAAAiyC,GACF,I,mEAED,IAAAwJ,EAAAJ,EAAAtE,kBAAA/2C,GAMAy7C,EAAOrI,OAAkBnB,IAAA2J,EAAAE,iBAAAV,GAAAp7C,EAAAiyC,EAAAwJ,GACnB,MAAAG,EAAAE,iBAA2BZ,GAAAl7C,EAAAiyC,GAC7B,KAKK+J,EAAAD,UAAAtzC,KAAA+yC,O,wCAKaH,EAAAxE,G,SACZ3J,UAAkBgM,GACQ/J,W,EAE5B8M,eAAmBpF,E,QAUxB,e,MACF,W,gBASC,mB,wBAGEpuC,I,QAOD,W,MACF,W,yBA9GgC,G,GAiJjC,W,wBAOawb,GACNzb,EACH5I,E,CAAC6I,KAAiDyzC,G,oBAC1C,IAAQC,GAAoBl4B,EAAAupB,Y,YAEpCvpB,EAAAupB,W,gBACQ0O,EAAWE,cAAYn4B,G,KAClCo4B,SAAAH,EAAAI,YAAAr4B,E,0CAMC,WACD,OAAAxb,KAAA8zC,U,2BAOC,WACA,OAAI9zC,KACF4zC,Q,iCAMQ5O,G,YACF+N,OAAA5N,QACFnlC,KAAO+zC,eAAU/O,IACf,GAAAhlC,KAAA+yC,OAAA5N,QAAAH,EAAahlC,KAAAg0C,eACb,C,QAQT,c,4BAEY,O,6CAAbh0C,KAAAi0C,eAAapK,YAAA6H,EAAAn6C,EAAA27C,EAAAD,EAAAv8B,EAAAy8B,E,+CAOLI,EAAAzK,e,EAAA2H,GAEN/J,YAGA,IAAIwN,EAAAX,EAAAD,UAAAtzC,KAAY+yC,Q,EAGVmB,EACFV,eAAE/C,GAAiC/J,Y,IAErCx+B,EAAMlI,K,SACAyuC,aAAYd,IAAyB,SAAAp2C,EAAAiyC,GACvCthC,EAAAisC,QACF,IAAO5O,GACLhuC,EAAAiyC,MAAA0K,EAAaA,EAAAtK,qBACbryC,EAAAk5C,GAA+B/J,Y,IAMpC1mC,KAAAi0C,eAAAG,eAAAxB,EAAAsB,EAAAf,E,IAGH57C,IAAA,iB,MAMA,SAAyCq7C,EAAAxE,GAExC,OAAAwE,C,6BAMC,W,OACE,C,4CAOQ,OAAZ5yC,KAAAi0C,c,QAMK,W,MAEJ,W,4BAxTC,gB,MACA,SAAIz4B,G,GACFA,EAAO64B,WAAS,CACf,IAAAC,EAAA94B,EAAA+4B,oBACH,OAAW/4B,EAACupB,WAAAyP,SAAAh5B,EAAAi5B,qBAAAH,EACb,QAAA94B,EAAAupB,WAAAsK,S,IAoTF93C,IAAA,cCzWDmD,MAAA,SAAA8gB,G,eAsCa,IAAAk5B,EACQl5B,EAA+Bm5B,kB,oDAArB,QAAVn5B,EAA+BupB,WAAA2K,S,ODiNlD,G,GCxLwB,W,sBAEpBkF,EAAWp5B,GACZzb,EAAA5I,E,CAAA6I,KAAA40C,GACF50C,KAAA60C,cAAA,IAAAC,GAAAt5B,GACFxb,KAAA+yC,OAAAv3B,EAAAupB,WAEe/kC,KAAA+0C,OAAAv5B,EAAAw5B,WAKVh1C,KAAAi1C,UAAWz5B,EAAa05B,gBAC5B,CCqKA,ODpKan1C,EAAAG,E,CAAA00C,EAAgC,CAC1C,CACIr9C,IAAA,cACRmD,MAAA,SAAAg3C,EAAAn6C,EAAA27C,EAAAD,EAAAv8B,EAAAy8B,GAcK,OAZNnzC,KAAA60C,cAAAV,QAAA,IAAA5O,GAAAhuC,EAAA27C,QAAAzC,GAAA/J,YAYMgL,EAAApD,kBAAY/2C,GAAKozC,OACnBuI,GACKxB,EACaA,EAAGyD,cAAcn1C,KAAA+0C,OAC7B/0C,KACA60C,cAAAO,mBAAAvL,YACJ6H,EAAAn6C,EAAA27C,EAAAD,EAAAv8B,EAAAy8B,GACSnzC,KAAAq1C,sBAAc3D,EAAAn6C,EAAA27C,EAAcx8B,EAAAy8B,EACxC,GAGH,CAYS57C,IAAA,iBACRmD,MAAA,SAAAk4C,EAAAW,EAAAJ,GAED,IAAAe,EAYgB,GAAGX,EAAAzK,cAAyByK,EAAA9O,UAC9ByP,EACVzD,GACO/J,WAAS4M,UACbtzC,KAAS+yC,aAEA,KAAA/yC,KAAA+0C,OAAAxB,EAAA4B,eAAA5B,EAAAT,UAAA9yC,KAAA+yC,QAAA,CAcD,IAAAnvC,EAVfswC,EAAAzD,GAAA/J,WAAA4M,UAAAtzC,KAAA+yC,Q,sFAaIQ,EAAAnE,gBAAApvC,KAAA60C,cAAAd,eAAA/zC,KAAA+yC,QAIc,IAJJ,IAAApM,EACP,EAGiB/iC,EAAI0xC,WAAA3O,EAAA3mC,KAAS+0C,QAAC,CAE9B,IAAAjxC,EAAAF,EAAAopC,UAWU,KANShtC,KAAIi1C,SACPj1C,KAAI+yC,OAAA5N,QAAAnlC,KAAA60C,cAAUd,eAAqBjwC,IAAQ,EAG7D9D,KAAA+yC,OAAA5N,QAAArhC,EAAA9D,KAAA60C,cAAAb,eAAA,GASA,MANLE,IAAAtK,qBAAA9lC,EAAA/J,KAAA+J,EAAAkhC,MAEe2B,GAMP,CACC,MASV,IAAA2I,EAKsBK,EACrB1J,EAEDsP,EAUS,GApBRrB,GAHYA,EAAIX,EAAAD,UAAAtzC,KAAA+yC,SAGhBS,eAAA/C,GAAA/J,YAoBQ1mC,KAAAi1C,SAAA,CACRM,EAAArB,EAAAsB,mBAAAx1C,KAAA+yC,QAEQzD,EAAAtvC,KAAA60C,cACPb,aAImBrE,E,kCAEL,IAAY8F,EAAcz1C,KAAA+yC,OAAU3F,aAC3CnH,EAAA,SAAA5rB,EAAAC,GACe,OAAKm7B,EAAAn7B,EAAAD,EACf,CACJ,M,iEAGFs1B,EAAA3vC,KAAA60C,cAAAb,aAIA/N,EAAajmC,KAAG+yC,OAAU3F,aAUpB,IAFP,IAAAsI,EAAA,E,KAEeH,EAACD,WAAc,CAMrB,IAAApnC,EAAAqnC,EAAAvI,WACb2I,GAAA1P,EAAAqJ,EAAAphC,IAAA,IACHynC,GAAA,GCzPAA,GAAAD,EAAA11C,KAAA+0C,QAAA9O,EAAA/3B,EAAAyhC,IAAA,EAoES+F,IACRxB,IAAAtK,qBAAA17B,EAAAnU,KAAA02C,GAAA/J,WAED,CAYE,CAIW,OAAK1mC,KAAA60C,cACJO,mBAAKhB,eAAAxB,EAAAsB,EAAAf,EAEjB,GAEE,CACA57C,IAAA,iBACAmD,MAAA,SAAOk4C,EAAAxE,GAGE,OACTwE,CAMF,GAGF,CASEr7C,IAAA,eAIAmD,MAAU,WACR,OAAI,CACJ,GAEA,CACCnD,IAAA,mBAEHmD,MAAU,WAKA,OAAAsF,KAAc60C,cAAQO,kBACjC,GAMM,CACG79C,IAAA,WACFmD,MAAO,WAGZ,OAAAsF,KAAA+yC,MACM,GAGT,C,4DAgBc,GAAA/yC,KAAUi1C,SAAU,CACrB,IAAOhK,EAAKjrC,KAAQ+yC,OAAA3F,aAC5BnH,EAAA,SAAA5rB,EAAAC,GACH,OAAA2wB,EAAA3wB,EAAAD,EACM,CACI,MAAS4rB,EAACjmC,KAAU+yC,OAAK3F,aAE/B,IAAAwI,EAAyBlE,GACzB,EAAAvvC,EAAAwjB,QAAAiwB,EAAAT,gBAAAn1C,KAAA+0C,OAAA,IAEI,IAAAc,EAA0B,IAAKtQ,GAAAuQ,EAAAC,GAEhCC,EAA2Bh2C,KAAKi1C,SAAEW,EAAAK,cAAAj2C,KAAA+yC,QAAA6C,EAAAM,aAAAl2C,KAAA+yC,QACjCoD,EAAen2C,KAAA60C,cAAsBV,QAAC0B,GACxC,GAAAD,EAAsBxC,SAAA0C,GAAA,CAOjB,IALJ,IAAOM,EACRR,EAAAtH,kBAAAwH,GAGAO,EAAsB3/B,EAAS4/B,mBAAAt2C,KAAA+yC,OAAAiD,EAAAh2C,KAAAi1C,UACtB,MAAAoB,MAAat8C,OAAA+7C,GAAoBF,EAAiBxC,S,UAK3DiD,EAAA3/B,EAAA4/B,mBAAAt2C,KAAA+yC,OAAAsD,EAAAr2C,KAAAi1C,UACL,IAAAsB,EAAA,MAAAF,EAAA,EAAApQ,EAAAoQ,EAAAR,GAIU,GADFM,IAAMJ,EAAAtR,WAAA8R,GAAA,EAGb,O,uCAAAX,EAAAhM,qBAA+BkM,EAAAC,GAE1B,MAAAS,KAAAnD,iBAAAX,GAAAoD,EAAAM,I,8CAOE,OAJqB,MAAhBC,GAAgBr2C,KAAA60C,cAAAV,QAAAkC,IAKc,MAAvBG,GAAuBA,EAAAnD,iBAAAZ,GAAA4D,EAAAt8C,KAAAs8C,EAAArR,OACxCyR,EAAe7M,qBAAsByM,EAAAt8C,KAAAs8C,EAAArR,OACzByR,CAKb,QAAAV,EAAAtR,UACWiN,EACbyE,GACFlQ,EAAA+P,EAAAH,IAAA,GAEQ,MAAAW,IAKLA,EAAOnD,iBAAAX,GAAqCsD,EAAAj8C,KAAAi8C,EAAAhR,OACvCwR,EAAAnD,iBAAAZ,GAAAqD,EAAAC,KAGWH,EAAShM,qBACrBkM,EAAAC,GAAAnM,qBAAaoM,EAAAj8C,KAAA02C,GAAwC/J,aAK5CgL,CACd,KAODkD,C,CDlLwB,G,GCkOA,W,sBAQnB8B,IACK32C,EAAA5I,E,CAAa6I,KAAsB02C,G,gBACrC,E,gBACA,E,oBAKS,E,qBACT,E,cACA,E,kBAMO,E,oBACC,E,sDAGE,K,qBACN,G,oBAKD,K,mBACF,G,YAGF/I,E,CAuaP,OAnaG5tC,EAAAG,E,CAAAw2C,EAAA,CACF,CACMn/C,IAAA,WACRmD,MAAA,WAcD,OAAAsF,KAAA22C,SAcO,GAKH,C,IAEO,gBACLj8C,MAAM,WAIF,OAAAsF,KAAA42C,c,QASF,e,MACA,WACD,OAAA52C,KAAA62C,aACF,GAED,C,qBAQEn8C,MACG,W,MAKI,KAAAsF,KAAA82C,UAUC92C,KAAA22C,UAKe,MAAf32C,KAAY82C,S,IAO1Bv/C,IAAA,qBASMmD,MAAA,WAKA,OAJE,EAAWyH,EAAGwjB,QAAA3lB,KACR22C,UAAa,oCAGR32C,KAAA+2C,gBACX,G,0CAiBJ,OAJM,EAAQ50C,EAAAwjB,QAAA3lB,KACF22C,UAAA,oCAGZ32C,KAAAg3C,cACEh3C,KAAAi3C,gBAEezwB,CAIb,G,CAOJjvB,IAAA,SACEmD,MAAA,WAIC,OAAAsF,KAAAk3C,OACH,G,CAQA3/C,IAAA,mBACEmD,MAAA,WAKK,OADJ,EAAAyH,EAAAwjB,QAAA3lB,KAAAk3C,QAAA,kCACIl3C,KAAAm3C,cACR,GAGH,C,sBA6BWz8C,MAAK,W,OACP,EAAAyH,EAAAwjB,QAAA3lB,KAAAk3C,QAAA,kC,oCAEczwB,CAIf,G,yDAUF,CAQNlvB,IAAA,mBAUYmD,MAAG,WACP,OAAasF,KAAGo3C,WAAA,KAAAp3C,KAAA82C,SAIlB,GAGF,C,IASC,WAGFp8C,MAAA,WAGH,OAFC,EAAAyH,EAAAwjB,QAAA3lB,KAAAo3C,UAAA,oCAEDp3C,KAAA+0C,MASS,GAGT,CAaMx9C,IAAe,WACbmD,MAAQ,WAIR,OAAasF,KAAG+yC,MAClB,G,CAMKx7C,IAAG,eAEZmD,MAAY,WACP,QAAUsF,KAAS22C,WAAe32C,KAAAk3C,SAAcl3C,KAAAo3C,UAC7C,GAEN,CAGI7/C,IAAI,YACRmD,MAAW,WACL,OAAIsF,KAAMq3C,gBACZr3C,KAAM+yC,SAAWpF,EAEnB,GAEF,CAEAp2C,IAAA,OAEHmD,MAAA,WAEe,IAAA48C,EAAA,IAAAZ,EAqEhB,OApESY,EAAAF,UAAAp3C,KAAAo3C,UACLE,EAAavC,OAAE/0C,KAAA+0C,OACfuC,EAAaX,UAAA32C,KAAA22C,UACbW,EAAaP,iBAAE/2C,KAAA+2C,iBACfO,EAAAN,cAAAh3C,KAAAg3C,cACHM,EAAAL,gBAAAj3C,KAAAi3C,gBAwBDK,EAAAJ,QAAAl3C,KAAAk3C,QAcSI,EAAAH,eAAAn3C,KAAAm3C,eAORG,EAAAC,YAAAv3C,KAAAu3C,YAEDD,EAAAE,cAAAx3C,KAAAw3C,cASSF,EAAAvE,OAAA/yC,KAAA+yC,OAKRuE,EAAAR,UAAA92C,KAAA82C,UAEDQ,CAsBS,KAmBAZ,C,CA7ciB;;;;;;;;;;;;;;;;YCpNxBe,GAAgBC,G,oBACRC,c,WAGChK,GAAAiK,EAAA,Y,EACC7E,SAAU8E,GACkBD,EACxB,S,EAEV7E,SAAOjG,GAAA8K,EAA8B,S,IAExCjyB,QAAA+xB,EAAA3E,kBAAAxB,GAAA,4B,yBACD,WAAkBpvC,EAAAlK,WAAA2/C,G,EAAlBjB,Y,EAKQ,SAAkB,EACtBx0C,EAAKlK,WAAAy/C,EAEDX,kB,EACAC,gBAAQc,EAAA,cAA4B,EACxC31C,EAAKlK,WAMLy/C,EAAAT,mB,cAMH,SAAA90C,EAAAlK,WAAAy/C,EAAAP,gB,8EACFO,EAAAxC,iBAAA4C,EAAA,aAAAJ,EAAA3C,OCjHD+C,EAAA,YAAAJ,EAAA3C,SD+EsB+C,C,UCLrBC,GAAAL,GAEe,IAAAtvC,EAAA,G,GAIdsvC,EAAAf,YAIAvuC,EAAA,GAAAsvC,EAAAX,iBAIDW,EAAAV,gBAAA5uC,EAAA,GAAAsvC,EAAAT,kBASOS,EAAWR,UACb9uC,EAA8B,GAACsvC,EAAAP,eAC/BO,EAAcH,cAAKnvC,EAAc,GAAAsvC,EAAWF,gBAE9CE,EAAIN,UAAiB,C,EAUd,EAAAM,EAAA3C,O,IACLiD,EAAAN,EAAAZ,U,yCAOe,GAAAkB,C,QAYjBN,EAAc3E,SAAmBpF,KAAAvlC,EAAA,EAAAsvC,EAAA3E,OAAAxpC,YACjCnB,C;;;;;;;;;;;;;;;;GAqEF,IAAM6vC,GAAoC,SAAAle,GAC1C,aACQh6B,EACa6Y,E,CAAGs/B,EAAoCne,G,IAC1DhhB,EAAwBhZ,EAAA8Y,EAAlB,CAAkBq/B,G,SAEtBA,EAAkBliB,EACjBqH,EAAaG,EAAWC,GAS9B,IAAA52B,E,OADE9G,EAAA5I,EAAA,CAAA6I,KAAAk4C,IAGHrxC,EAASkS,EAAAvP,KAAAxJ,OAQDg2B,UAAeA,EACjBnvB,EAAAw2B,gBAEFx2B,EAAO22B,mBAAUA,E,EACZC,yBACyB52B,EAAAunB,KAAApI,EAAA,WAO5Bnf,EAAIsxC,SAAU,G,EAuVpB,O,aAlVQ,c,MAIA,SAAMje,GAIN,UAAA9uB,MAAgB,0B,IAejB7T,IAAA,SACFmD,MAAM,SAAA09C,EAAAzZ,EAAAC,EAAA3E,GACC,IAAApzB,EAAW7G,KACbg6B,EAAaoe,EAAW3Z,MAAEl1B,WAC5BvJ,KAAAouB,KAAA,qBAAA4L,EAAA,IAAAoe,EAAA9Y,kBAKA,IAAA+Y,EAAaH,EAAqBI,aAAWF,EAAAxZ,G,KAE7C5+B,KAAMm4C,SAAAE,GAAkBE,EAMxB,IAAIC,EAAuBf,GAEvBW,EACAtT,c,6CAIF,IAAA1rB,EAAa7S,GAEV,MAAAwB,IACCqR,EAAA,K,QAGW,OAAbrR,GAAalB,EAAAw2B,cAA2BrD,EAAG5gB,GAAA,EAAAwlB,IAC7C,EAAAz8B,EAAawiC,SAAA99B,EAAAsxC,SAAAE,KAAAE,IAkBbte,EAVIlyB,E,4BAOc,cAAaA,EAPP,KAUR,K,OAqBfxQ,IAAA,WAMRmD,MAAA,SAAA+9C,EAAA7Z,GACF,IAAAyZ,EAAAH,EAAAI,aAAAG,EAAA7Z,UAEQ5+B,KAAAm4C,SAAAE,EAUD,GAEA,CAGF9gD,IAAA,MAMGmD,MAAI,SAAag+C,G,WAEhBF,EACHf,GACqCiB,EAAA5T,cACxC9K,EAAiB0e,EAAaja,MAAAl1B,WAKzBoH,EAAA,MAAAxO,EAAAyO,UAuCA,OAtCC5Q,KAAQ24C,aAAG3e,EAAA,QAAAwe,GAAyB,SAAAzwC,EAAAxB,GAEvC,IAAA6S,EAAc7S,EAIK,MAAbwB,IAEHqR,EAAkB,KACNrR,EAAA,MAED,OAALA,GAMVlB,EAAiBw2B,cAAarD,EAC5B5gB,GAAc,EAEd,MAMLzI,EAAAlJ,QAAA2R,IACoBzI,EAAAjJ,OAAA,IAAA0D,MAAAgO,GAMT,IAKLzI,EAAAK,OAQR,GAWO,CACYzZ,IAAa,mBACzBmD,MAAS,SAAIoc,GAMjB,GAWD,C,IAOG,eAMDpc,MAAM,SAAAs/B,GACC,IAAAwe,EAAkBt0C,UAAAtL,OAAA,QAAyB,IAAbsL,UAAC,GAAYA,UAAA,MAAAkO,EAAAlO,UAAAtL,OAAA,EAAAsL,UAAA,UAC3C2C,EAAW7G,KAEb,OADAw4C,EAAS,gBACTxwC,QAAAtQ,IAAA,CAEMsI,KAAGw9B,mBAAYnV,UAAA,GAClBroB,KAAAy9B,uBAAApV,UAAA,KACLtpB,MAAM,SAAY65C,GACd,IAAAC,EAAiB94C,EAAAkS,EAAJ,CAAI2mC,EAAA,GAAA9sB,EAAA+sB,EAAA,GAAAhtB,EAAAgtB,EAAA,GAEjBC,EAAAjyC,E,yCAKAglB,GAAqBA,EAAA/U,QAAA0hC,EAAA,GAAA3sB,EAAA/U,O,OAErBjQ,EAAWmvB,UAAU1L,OAAA,WAAY,WAAiBzjB,EAAamvB,UAAAlM,KAAAkQ,EAA/D,OAA+DnzB,EAAAmvB,UAAAxM,WAAA,EAAArnB,EAAA42C,aAAAP,G,sCAIjE,IAAQQ,EAAG,IAAAC,eAEdD,EAAA5mB,mBAAA,WACI,GAAShgB,GAAkB,IAAX4mC,EAAWlsB,WAAA,CACxBgsB,EAAe1qB,KAAA,qBAAqBwD,EACxC,qBAAsBonB,EACtBtZ,OACA,YACAsZ,EAAAE,cAIF,IAAe/+B,EAAA,KAOf,GAAY6+B,EAAGtZ,QAAA,KAAasZ,EAAAtZ,OAAA,KAE/B,IACFvlB,GAAA,EAAAhY,EAAA+xB,UAAA8kB,EAAAE,aAIM,CAHa,MAAA18C,GACrBksB,EAAA,qCAAAkJ,EAAA,KAAAonB,EAAAE,aAEQ,CAIqB9mC,EAAA,KAAA+H,EAC7B,M,qHAiBiB6+B,EAAG3gC,KAAA,MAAUuZ,GAAA,GACbonB,EAAAvgB,MACR,GACF,IAaN,CACE,CACIlhC,IAAC,eAWJmD,MAAA,SAAAy+C,EAAAva,GAEI,YAAat9B,IAAbs9B,EAAa,OAAAA,IAGb,EAAAz8B,EAAAwjB,QAGmBwzB,EAAArU,aAAA6S,YAAA,kDAEXwB,EAAA1a,MAAcl1B,WAE1B,KAII2uC,C,CA7XmC,C,OA2avB,W,sBAWhBkB,IACmBr5C,EAAkB5I,EAAxC,CAAyC6I,KAAwBo5C,GAC/Dp5C,KAAMq5C,UAAA5I,GACmB/J,U,CA8C3B,OA3CU3mC,EAAwBG,E,CAC3Bk5C,EACkB,C,CAMrB7hD,IAAA,UAUDmD,MAAA,SAAA8gC,GACA,OAAAx7B,KAAAq5C,UAAA1H,SAAAnW,EAEI,GAGT,CASMjkC,IAAA,iB,oBAKEyI,KAAAq5C,UAAmBr5C,KAAUq5C,UAAWxP,YAAWrO,EAAG8d,E,KAKxDF,C,CA5De;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAqGfG,K,MAMC,CACH7+C,MAAO,KAURu2C,SAAA,IAAAnwC,IAGH,CAiCE,SAAI04C,GAA2BC,EAAsBje,EACnDpiB,G,MACKoiB,GACLie,EAAmB/+C,MAAA0e,EAKnBqgC,EAAmBxI,SAAGyI,aACtB,GAAkB,OAAdD,EAAc/+C,MAAA++C,EAAA/+C,MAAA++C,EAAA/+C,MAAAmvC,YAAArO,EAAApiB,OAClB,C,IACE08B,EAAWnM,GAACnO,GACZie,EAAcxI,SAAY/vC,IAAA40C,IAAkB2D,EAChCxI,SAAA/xC,IAAA42C,EAAAyD,M,GAILE,EAAAxI,SAAApyC,IAAAi3C,G,KAC4Bta,GACjCpiB,E,iDCtrBN,SAA6CqgC,EAAA52B,GAC9C42B,EAAAxI,SAAAvkC,SAAA,SAAAitC,EAAApiD,GAEKsrB,EAAUtrB,EAAAoiD,EACd,G;;;;;;;;;;;;;;;;wBAVSA,EAAL,IAAA/d,GAAKge,EAAArwC,WAAA,IAAAhS,GAAAsrB,E,WCSPg3B,GDkDAC,GAA8B,W,sBAE5BC,EAAgBC,GACFj6C,EACM5I,E,CAAU6I,KAAA+5C,G,KAE7BC,cACJh6C,KAAAi6C,MAAA,IAED,CAmBF,OAlBiBl6C,EAAMG,E,CAAA65C,EAAA,CACnB,CACExiD,IAAM,MACNmD,MAAK,W,IAEEw/C,EAAIl6C,KAAAg6C,YAAkBn7C,M,sBAM1B,OAJDmB,KAASi6C,OAAGlJ,EAAsB/wC,KAAAi6C,OAAoB,SAAUE,EAAIz/C,GACpE0oC,EAAM+W,GAAA/W,EAAA+W,GAAAz/C,CACP,IACFsF,KAAAi6C,MAAAC,EACI9W,CAEL,KAKJ2W,C,CA5BkC,GAoGlCK,GAAS,WAMP,a,SACKC,EAAiBC,EAAAC,GACbx6C,EAAoB5I,EAAzB,CAAyB6I,KAAAq6C,GAC7Br6C,KAAOu6C,UAMTv6C,KAAAw6C,eAAA,GCnRAx6C,KAAAy6C,eAAA,IAAAX,GAAAQ,GA8CA,IAAAxyB,ED0MG,IC1MH,IAAAV,KAAA4G,S,sDAWEjuB,EAAAG,EAAA,CAAAm6C,EAAA,CAOD,CAEe9iD,IAAA,eAGdmD,MAAA,WAIAggD,WACDxgB,EAAAl6B,KAAAy6C,eAAA57C,MAEQ87C,EAAA,GACPC,GAAA,EACOF,cAAqBP,EAAAz/C,GAC7BA,EAAA,MAAAyH,EAAAuiB,UAAA7d,EAAA2zC,eAAAL,KAEeQ,EAAAR,GAAAz/C,EACGkgD,GAAiB,EAGpB,IAMEA,GAAiB56C,KAAQu6C,QAAA/V,YAAAmW,GAE7BhhB,GAAgC35B,KAAA66C,aAAAr9B,KAAAxd,MAAAonB,KAAAI,MAAA,EAAAJ,KAAA4G,SDqK7C,KCpKG,KAQAqsB,C,CD8JK;;;;;;;;;;;;;;;;YCtGRS,GAAAjc,GAED,OAkBQkc,UAAO,EAOTC,YAAW,E,UAIfC,QAAA,E;;;;;;;;;;;;;;;;IA/EEpB,G,KAqBuCqB,GAAC,KApBzCrB,GAAA,yBACFA,MAAA,iBAEDA,MAAA,mCAgBEA,GAAgBA,GAAuB,qC,IC2fjCsB,G,GD3ZD,W,+BAX2Bp7C,EAAA5I,EAAzB,CAAyB6I,KAAAo7C,GAAzBp7C,KAAAw7B,O,kCAAAx7B,KAAA+L,KAAAmvC,GAAyBG,eAAAr7C,KAAA0W,O,CAjF9BqkC,UAAI,EAIJC,YAAI,EACJnc,QAAI,K,QAEG,E,CAyGT,O,sGAdI,OAFW,EAAA18B,EAAUwjB,QAAM3lB,KAAAs7C,aAAArK,SAAAxM,UAAA,4DAEZzkC,KAIb,IAAAksC,EAAgBlsC,KAAOs7C,aAASC,QAAA,IAAA3f,GAAA0N,I,gCAGhC,CAXC,O,+EAAA,IAAA8R,EAAAjf,GAAAn8B,KAAAw7B,MAAAx7B,KAAAs7C,aAAAt7C,KAAAw7C,O,KAkBHJ,C,CApBC,GAgCAK,GAAU,W,6BAAV17C,EAAA5I,E,CAAU6I,KAAA07C,G,YAAVhlC,E,gDAAA3W,EAAUG,E,CAAAw7C,EAAA,C,2CAKR,OAAOC,GAAA37C,KAAAw7B,MAAA,IAAAkgB,EAAA17C,KAAA0W,OAAAklC,MACf,IAAAF,EAAA17C,KAAA0W,OAAAylB,GAAAn8B,KAAAw7B,MAED,K,EARiB,G,2BAoBf,SAAOqgB,EAAYnlC,EAAA8kB,EAAAkW,GACpB3xC,EAAA5I,EAAA,CAAA6I,KAAA67C,GAEe77C,KAAA0W,SAIR1W,KAAAw7B,KAASA,EACXx7B,KAAA0xC,KAAOA,EAEJ1xC,KAAA+L,KAAAmvC,GAAAY,S,CAiBH,OAfK/7C,EAA6BG,E,CAAA27C,EAAA,CACrC,CACFtkD,IAAA,oBAEemD,MAAA,SAAA4uC,GAIP,OAAAqS,GAAqB37C,KAACw7B,MAAgB,IAACqgB,EAAS77C,KAAA0W,OAAAklC,KAAA57C,KAAA0xC,KAAApD,kBAAAhF,IACxD,IAAAuS,EAAA77C,KAAA0W,OAAAylB,GAAAn8B,KAAAw7B,MAAAx7B,KAAA0xC,KAEe,KAIAmK,C,OACC,W,4CAKf77C,KAAO0W,OAAKA,EACd1W,KAAAw7B,OCxTAx7B,KAAAixC,WA2EgBjxC,KAAA+L,KAAAmvC,GACWa,KAEzB,CAmHA,OA/GAh8C,EAAAG,EAAA,CAA0B87C,EAAA,CAC3B,CAEQzkD,IAAA,oBACPmD,MAAA,SAAA4uC,GACO,GAAAqS,GAAqB37C,KAAAw7B,MAAA,CAC7B,IAAA0Q,EAAAlsC,KAAAixC,SAAAsK,QAAA,IAAA3f,GAAA0N,IAaD,OAAA4C,EAAAzH,UAKA,K,yCAsBE,IAAAuX,EAAAh8C,KAAA0W,OAAAklC,KAAA1P,EAKA,CAMS,OADA,EAAa/pC,EAA4BwjB,QAAMgkB,GAAA3pC,KAAAw7B,QAAA8N,EAAA,kEACV,IAAI0S,EAAMh8C,KAAA0W,OAAAylB,GAAAn8B,KAAAw7B,MAAAx7B,KAAAixC,SAS1D,GAaE,CAQK15C,IAAO,WAGVmD,MAAO,WAKV,mBAAAsF,KAAAw7B,KAAA,KAAAx7B,KAAA0W,OAAAnN,WAAA,WAAAvJ,KAAAixC,SAAA1nC,WAAA,GAED,KAcQyyC,C,CDiHS,GC5CTC,GAA0B,WAEhC,aAID,SAAAC,EAAAC,EAAAC,EAAAC,GAEDt8C,EAAA5I,EAAA,CAAA6I,KAAAk8C,GASEl8C,KAAOm8C,QAIRn8C,KAAAo8C,oBAEDp8C,KAAAq8C,WAUE,C,OACct8C,EAAAG,EAAd,CAAcg8C,EAAA,CACZ,CAIA3kD,IAAM,qBAINmD,MAAO,W,6BAGA,GAIX,CAoBQnD,IAAI,aACJmD,MAAA,WACF,OAAwBsF,KAAGq8C,S,IAK7B9kD,IAAA,oBAIMmD,MAAA,SAAmB8gC,GAMrB,GAAAmgB,GAAiBngB,GAAA,OACnBx7B,KAAAs8C,uBAA0Bt8C,KAASq8C,UAG/B,IAAOvG,EAAGnM,GAAyBnO,GACzC,OAAex7B,KAAAu8C,mBAAwBzG,EAEnC,G,CASFv+C,IAAM,qB,MAGF,SAA0BA,GACzB,OAAAyI,KAAAs8C,uBAAAt8C,KAAAq8C,WAAAr8C,KAAAm8C,MAAA/I,SAAA77C,EACL,G,CAMAA,IAAI,U,MACF,W,wBAnH0B,G,GA2JG,SAAAilD,EACvBC,G,aAKP18C,EAAA5I,E,CAAA6I,KAAAw8C,G,KACFC,S;;;;;;;;;;;;;;;;4BAgED,IAAAC,EAAUC,EAAAjrC,QAAA,SAAAkrC,GAEb,OAAAA,EAAA7wC,OAAAsuB,CAED,I,EASEhX,MAAiB,SAAjBhJ,EAAAC,GAEM,O,SAqBauiC,EAAAxiC,EAAAC,G,GAClB,MAAAD,EAAAivB,WAAA,MAAAhvB,EAAAgvB,UAAA,QAAAnnC,EAAAwjC,gBAAA,sCAED,IAAImX,EAAA,IAAAvX,GAAoBlrB,EAAAivB,UAAAjvB,EAAAm4B,cACpBuK,EAAW,IAAIxX,GACSjrB,EAACgvB,UAAAhvB,EAAAk4B,c,OACtBqK,EAAA9J,OAAA5N,QAAA2X,EAAAC,E;;;;;;;;;;;;;;;;GA3BMC,CAAYH,EAAAxiC,EAAAC,EAEzB,IACAoiC,EAAIhwC,SAAA,SAA2BkwC,G,eAS5BC,EAAAD,EAAAK,GACH,MAAgB,UAAZL,EAAA7wC,MAAwC,kBAAnB6wC,EAAA7wC,OAEvB6wC,EAAAM,SAAgBD,EAAAE,wBAAYP,EAAAtT,UAAAsT,EAAApK,aAAAqK,EAAA9J,SAFoB6J,C,gCAPzCv/C,EAAe+/C,WAAAR,EAAkB7wC,OAAEsxC,EAACzlD,KAAAyF,EAAuBigD,YAAAC,EAAAV,EAAAJ,QAClE,G,aAiDDe,GAAAP,EAAAQ,GACD,MAAM,CACFR,WAASA,EAQTQ,YAACA,E,UAGJC,GAAAC,EAAAC,EAAAhuC,EAAAskC,GACD,OAAOsJ,GAAO,IAAAvB,GAAA2B,EAAAhuC,EAAAskC,GAAAyJ,EAAAF,Y,CAGhB,SAAAI,GAAAF,EAAAG,EAAAluC,EAAAskC,GAgBE,OAAMsJ,GAAyBG,EAAAV,WAAA,IAAAhB,GAAA6B,EAAAluC,EAAAskC,G,UAEzB6J,GACJJ,G,OAEEA,EAAMV,WAAeX,qBAAAqB,EAAgBV,WAAWe,UAAM,I,UAKtDC,GACqBN,G,OAGvBA,EAAAF,YAAAnB,qBAAAqB,EAAAF,YAAAO,UAAA,I;;;;;;;;;;;;;;;;GA8CF,IAAAE,GAAO,WAGT,OAFC/C,QAAA,IAAA1U,GAAA7f,IAEDu0B,E,EAkCMgD,GACF,W,sBAOMC,EAAY1jD,G,kEAGHqF,EAAyB5I,EAAxC,CACE6I,KAAAo+C,GAGFp+C,KAAItF,MAAkBA,EACtBsF,KAAMixC,SAAYA,C,QAEHlxC,EAAiBG,E,CAAak+C,EAAA,CAC7C,C,IAKE,UAQD1jD,MAAA,WAEG,OACa,OAAfsF,KAAAtF,OACEsF,KAAAixC,SAAAxM,SAIJ,GAEH,CAyBGltC,IAAI,mCAUHmD,MAAA,SAAA2jD,EAAAC,GAEC,GACa,MAAft+C,KAAMtF,OACJ4jD,EAAAt+C,KAAAtF,OAAA,OAIU8gC,KAAAogB,KACflhD,MAAAsF,KAAAtF,OAOa,GAAAihD,GAAoB0C,GAAe,OAAE,KAGvC,IAAK3U,EAAAC,GAAA0U,GACGE,EAAAv+C,KAAAixC,SAAApyC,IAAA6qC,GACF,GAAQ,OAAP6U,EAAO,CACrB,IAAAC,EAAAD,EAAAE,iCAAAtiB,GAAAkiB,GAAAC,GACW,OAA4B,MAA3BE,EAGA,CAEAhjB,KAJUkjB,GAAA,IAAA9iB,GAAA8N,GAAA8U,EAAAhjB,MAMd9gC,MAAA8jD,EAAA9jD,O,IAGC,CAAQ,WAQjB,GAEJ,CAWAnD,IAAA,2BAEDmD,MAAA,SAAA2jD,GAIS,OAAMr+C,KAAMy+C,iCAAyBJ,GAAiB,WAC9D,QAED,GAOS,GAGT,CAYE9mD,IAAO,UACLmD,MAAS,SAAgB2jD,GACnB,GAAI1C,GAAc0C,GAAU,OAAYr+C,KAEjD,IAAA0pC,EAAAC,GAAA0U,GAEDnS,EAAAlsC,KAAAixC,SAAApyC,IAAA6qC,GAQoB,OAAS,OAATwC,EAA4BA,EAAWqP,QAAApf,GAAAkiB,IACzD,IAAAD,EAAA,KAKO,GAGT,C,IAWK,M,oBAEK,GAAAzC,GAAmB0C,GAAA,WAAAD,EAAAO,EAAA3+C,KAAAixC,UAIvB,IAAAvH,EAAAC,GAA8B0U,GAE3BnL,GADalzC,KAAOixC,SAAUpyC,IAAE6qC,IAAA,IAAA0U,EAAA,OAChCl/C,IAAAi9B,GAAAkiB,GAAAM,GACSjR,EAAC1tC,KAAAixC,SAAAhK,OAAAyC,EAAAwJ,GACd,WAAAkL,EAAAp+C,KAAAtF,MAAAgzC,EAEJ,GAQK,CAUNn2C,IAAS,SACEmD,MAAO,SAAY2jD,GACpB,GAAA1C,GAA0B0C,GAC3B,OAAAr+C,KAAaixC,SAAYxM,UAAiB,IAAA2Z,EAAA,M,0BAGvC,IAAA1U,EAAeC,GAA8B0U,GAC1CO,EAAA5+C,KAAcixC,SAAOpyC,IAAA6qC,GACtB,GAACkV,EAAA,CACV,IACFlR,EADEwF,EAAA0L,EAAAliD,OAAAy/B,GAAAkiB,IAQI,OANR3Q,EAAAwF,EAAAzO,UAAAzkC,KAAAixC,SAAAv0C,OAAAgtC,GAED1pC,KAGAixC,SAAShK,OAAAyC,EAAAwJ,GACA,OAAAlzC,KAAAtF,OAAAgzC,EAAwBjJ,UAAA,IAAA2Z,EAAA,MAChC,IAAAA,EAAAp+C,KAAAtF,MAAAgzC,EAED,QAAA1tC,IAWW,GAGH,C,UAiBEtF,MAAA,SAAgB2jD,GAGhB,GAAC1C,GAAY0C,GACb,OAAAr+C,KAAAtF,MAG6D,IAAAgvC,EAAAC,GAAA0U,GACxDQ,EAAA7+C,KAAAixC,SAAApyC,IAAA6qC,G,sBAE2B,I,QAgBpC,UACAhvC,MAAA,SAAwB2jD,EAAcS,GAIvC,GAAAnD,GAAA0C,GAAA,OAAAS,EAEW,I,EAAApV,EAAAC,GAAA0U,GCv+BhBnL,GDw+BAlzC,KAAAixC,SAAApyC,IAAA6qC,IAAA,IAAA0U,EAAA,OCx+BAW,QAAA5iB,GAAAkiB,GAAAS,GA0C4B,OAAMpR,EAD5BwF,EAAAzO,UAC4BzkC,KAAAixC,SAAAv0C,OAAAgtC,G,0BAAA,IAAA0U,EAAAp+C,KAAAtF,MAAAgzC,E,iCAO5B,OAAA1tC,KAAAg/C,MAAApD,KAAA3zC,E,gBAGLvN,MAAA,SAAAukD,EAAAh3C,GAEK,IAAAi3C,EAAA,GAKG,O,8CALHA,EAAApJ,GAIQ5J,EAAoB8S,MAAUN,GAAAO,EAAAnJ,GAAA7tC,E,IAC1BA,EAAGg3C,EAASj/C,KAAAtF,MAAAwkD,EACtB,G,wBAIJ,SAAkB1jB,EAAAvU,GAClB,OAAOjnB,KAAIm/C,YAAA3jB,EAAAogB,KAAiD30B,E,IAG9D1vB,IAAA,c,MAAA,SAAI6nD,EAAAH,EAAAh4B,GACF,IAAA1gB,IAAOvG,KAAAtF,OAAAusB,EAAAg4B,EAAAj/C,KAAAtF,OACR,GAAA6L,EAAA,OAAAA,E,qBACF,IAAAmjC,EAAAC,GAAAyV,GAED/I,EAAAr2C,KAAAixC,SAAApyC,IAGO6qC,GAKc,OAAG2M,IAAA8I,YAAAhjB,GAAAijB,GAAAV,GAAAO,EAAAvV,GAAAziB,GACO,IAI/B,GAYE,CAEI1vB,IAAO,gBAEJmD,MAAI,SAAwB8gC,EACjCvU,GAEA,OAAAjnB,KAAAq/C,eAAA7jB,EAAAogB,KAAc30B,EAEhB,GAOA,CACE1vB,IAAK,iBACHmD,MAAO,SAAwB0kD,EAA+BE,EAAAr4B,GAChE,GAAA00B,GAAAyD,GAAA,OAAAp/C,KAEDA,KAAAtF,OAAAusB,EAAAq4B,EAAAt/C,KAAAtF,OACD,IAAAgvC,EAAAC,GAAAyV,GAEI/I,EAAAr2C,KAAAixC,SAAApyC,IAA2B6qC,GAKvB,OAAA2M,EACNA,EAAAgJ,eAAAljB,GAAAijB,GAAcV,GAAmCY,EAAuB5V,GAACziB,GAE7C,IAAAm3B,EAAA,KAKxB,G,CAkBN7mD,IAAO,UACPmD,MAAA,SAAAusB,GAEFjnB,KAAAu/C,SAAA3D,KAAA30B,EAaS,GAOT,CAUS1vB,IAAA,WAKPmD,MAAA,SAAA4kD,EAAAr4B,GAEOjnB,KAAAixC,SAAArK,kBAAA,SACG0C,EACV4C,GAGeA,EAAKqT,SAAiBb,GAK1BY,EAAAhW,GAAAriB,EACG,IAKIjnB,KAAAtF,OAAAusB,EAAAq4B,EAAAt/C,KAAAtF,MAEV,GAEN,CAMEnD,IAAK,e,MAKL,SAAY0vB,GAETjnB,KAAAixC,SAAArK,kBAAA,SAAA0C,EAAA4C,GACaA,EAAwBxxC,OAAAusB,EAAAqiB,EAAA4C,EAAAxxC,MACnC,GACH,I,EAYDnD,IAAA,aACHmD,MAAO,SAAQ0N,GAChB,IAAAuxC,EAAA,IAAAyE,EAAA,MCtMU,ODuMbrN,EAAA3oC,GAAA,SAAAo3C,EAAAzJ,GCpPA4D,IAAAz6C,IAAA,IAAA08B,GAAA4jB,GAAAzJ,E,IA6Ca4D,CAEoB,K,EFmoB7B,GEhmBH8F,GAAA,WAED,aAME,SAASC,EAAcC,GACvB5/C,EAAuB5I,EAAvB,CAAwB6I,KAAA0/C,GACzB1/C,KAAA2/C,YAED,C,OAImB5/C,EAAeG,EAAhC,CAAgCw/C,EAAA,MACjC,CAEDnoD,IAAA,QAISmD,MAAA,WACR,WAAAglD,EAAA,IAAAvB,GAAA,MAED,KAWKuB,C,CArCJ,GAwCD,SAAAE,GAAAC,EAAArkB,EAAAwJ,GAeE,GAAI2W,GACFngB,GAAO,OAAM,IAAAikB,GAAA,IAAAtB,GAAAnZ,IAIb,IAAA8a,EAAAD,EAAAF,WAAAI,yBAAyCvkB,GACxC,SAAAskB,EAAA,CAEC,IAAAE,EAAeF,EACjBtkB,KAEH9gC,EAAAolD,EAAAplD,MAED2jD,EAAAviB,GAAAkkB,EAAAxkB,GAcS,OADC9gC,EAAGA,EAAWmvC,YAAUwU,EAAYrZ,GAC5B,IAAIya,GAAEI,EAAAF,WAAAzgD,IAAA8gD,EAAAtlD,GACpB,CAGI,IAAG6gD,EAAW,IAAC4C,GAAAnZ,GACpBib,EAAAJ,EAAAF,WAAAZ,QAAAvjB,EAAA+f,GACM,OAAM,IAAAkE,GAAAQ,E,UAgCdC,GAAAL,EAAArkB,EAAA2kB,GAED,IAAAC,EAAAP,EAgBE,OAZA9O,EACEoP,GAAA,SAAArK,EAAA9Q,GAEHob,EAAAR,GAAAQ,EAAA1B,GAAAljB,EAAAsa,GAAA9Q,EAED,IAOQob,C,UASJC,GAAwBR,EAAArkB,G,GACzBmgB,GAAAngB,GAAA,OAAAikB,GAAAa,QCtOH,IAAAC,EAAAV,EAAAF,WAAAZ,QAAAvjB,EAAA,IAAA2iB,GAAA,OA8CA,WAAAsB,GAAAc,EAWO,CAiBH,SAAAC,GAAyDX,EAAArkB,GAG3D,OAAqC,MAA9BilB,GAA6BZ,EAACrkB,E,CA6BrC,SAAAilB,GAAAZ,EAAArkB,GAEF,IAAAskB,EAAAD,EAAAF,WAAAI,yBAAAvkB,GAQE,OACO,MADDskB,EACaD,EAAAF,WAAI9gD,IAAGihD,EAAItkB,MAAAmW,SAAA7V,GAAkCgkB,EAAStkB,SAEjE,I,CA4CR,SAAQklB,GAA8Bb,G,IACpC5O,EAAI,GACJjM,EAAI6a,EAAiBF,WAAMjlD,M,OAC3B,MAAAsqC,E,EAGS8D,cAAY9D,EAAAyJ,aAAkBd,IAAY,SAAArE,EAAAE,G,EAC/C5xC,KAAA,IAAc2tC,GAAQ+D,EAAAE,G,MAYvBmW,WAAA1O,SAAArK,kBAAA,SAAA0C,EAAA4C,GAED,MAAAA,EAAAxxC,OAAAu2C,EAAAr5C,KAAA,IAAmB2tC,GAAW+D,EAAA4C,EAAAxxC,O,eAKhCimD,GAEId,EACErkB,G,GAKPmgB,GAAAngB,GAAA,OAAAqkB,EAGH,IAAAe,EAAAH,GAGaZ,EAAArkB,GAIP,OAAiB,IAAAikB,GAAA,MAAdmB,EAAc,IAAAzC,GAAAyC,GACmBf,EAAAF,WAAApE,QAAA/f,G,UAiBrCqlB,GAAAhB,G,OACFA,EAAAF,WAAAlb,S,UAQCqc,GAAwBjB,EAAA7a,G,OACxB+b,GAAyBnF,KACvBiE,EAAeF,WACb3a,E,UAQL+b,GAAA1C,EAAA2C,EAAAhc,GACD,SAAAgc,EAAAtmD,MAEF,OAAAsqC,EAAA6E,YAAAwU,EAAA2C,EAAAtmD,OAcQumD,MAAcC,KAyBpB,OAvBIF,EAAU/P,SAAOrK,kBAAkB,SAAUkP,EAAQ5J,GAM3B,cAAxB4J,IAGJ,EAAA3zC,EAAAwjB,QAAA,OAAAumB,EAAAxxC,MAAmD,6CAC/CymD,EAAAjV,EAAAxxC,OACGsqC,EAAA+b,GACHrC,GAEIL,EAAAvI,GAAA5J,EACAlH,E,IAOPA,EAAA2M,SAAA0M,GAAA5Z,WAAA,OAAA0c,IAAAnc,IAAA6E,YAAA6U,GAAAL,EAAA,aAAA8C,IACHnc,CAGK;;;;;;;;;;;;;;;;GAqFP,SAAAoc,GAGaJ,EAAAxlB,GACX,OAAI6lB,GAAkB7lB,EAAKwlB,E,CCnT7B,SAAAM,GAAAN,EAAAO,GAcE,QAAArmD,EAAA,EAAAA,EAAA8lD,EAAAQ,UAAA5oD,OAAsBsC,IAAA,CACtB,IAAA2Q,EAAAm1C,EAAAQ,UAAAtmD,G,KACEqmD,YAAA,OAAU11C,C,CAEb,WAED,CA2BE,SAAA41C,GAA6BT,EAAAO,G,MAMzBP,EAAMQ,UAAYnoD,WAAe,SAAA8/B,G,OACjCA,EAAIooB,UAAUA,C,iBAEZ1S,GAAA,kD,MAEAmS,EAAeQ,UAAC3S,G,EAEnB2S,UAAAhpD,OAAAq2C,EAAA,GAQJ,I,IAPE6S,EAAAC,EAAAxkB,QAEGykB,GAC0B,EAG9B1mD,EAAA8lD,EAAWQ,UAAiB5oD,OAAC,EAC9B8oD,GAAAxmD,GAAA,IAOD,IAAA2mD,EAAAb,EAAAQ,UAAAtmD,GAIW2mD,EAAW1kB,UACZjiC,GAAS2zC,GAAGiT,GAAoBD,EAAAF,EAAAnmB,MAClCkmB,GAAoB,EACbK,GAAkBJ,EAAAnmB,KAAAqmB,EAAArmB,QAC3BomB,GAAwC,I,OAM3CF,EACH,IAAAE,ECDA,O,SA4C+BZ,G,EAE5BgB,cAAAC,GAAAjB,EAAAQ,UAAAU,GAAAtG,M,8FA/FHuG,CAAAnB,IAiDA,E,kDAgC6BjQ,EADF4Q,EAAhB1Q,UACA,SAAqC3H,GACpB0X,EAAAgB,cAAjB3B,GAAwCW,EAAAgB,cAAAtD,GAAAiD,EAAAnmB,KAAA8N,GA1BlC,IAMf,Q,CDbC,Q,6CCwBD9N,GAGA,IAAqB,IAAA8N,KAAA8Y,EAAoCnR,S,sEA2BzD,SAAKiR,GAASxxB,GAEd,OAAIA,EAAKyM,O,UAgBP8kB,GAAWI,EAAA3wC,EAAA4wC,G,UAAM7C,GAAmBa,QAAoCplD,EAAE,EAAAA,EAAAmnD,EAAAzpD,SAAAsC,EAAA,CAC3E,IAAMw1B,EAAA2xB,EAAAnnD,G,GAQHwW,EAAIgf,GAAA,C,IACF6xB,EAAA7xB,EAAA8K,KACA6iB,OAAU,E,GACV3tB,EAAMghB,KACPqQ,GAAAO,EAAAC,GAGE1C,EAAqBD,GAAOC,EAFhCxB,EAAAviB,GAAAwmB,EAAAC,GAKC7xB,EAAAghB,MAMEqQ,GAAuBQ,EAAgBD,KAExCjE,EAA0BviB,GAAAymB,EAAAD,GACzBzC,EAAAD,GAAyCC,EAAAjE,KAAAlrB,EAAAghB,KAAAC,SAAA0M,SAGzC,KAAA3tB,EAAAugB,SA0BQ,MAAO,EAAA9uC,EAAAwjC,gBAAA,8CAxBZ,GAAAoc,GACAO,EACLC,GAIH1C,EAAAK,GAAAL,EADaxB,EAAQviB,GAAsBwmB,EAAAC,GAC3C7xB,EAAAugB,eAEI,GAAkB8Q,GAAwBQ,EAAQD,GAEpD,GAAA3G,GADW0C,EAACviB,GAAwBymB,EAAAD,IACpCzC,EAAAK,GAAAL,EAAAjE,KAAAlrB,EAAAugB,cAEE,CACU,IAAAuR,GAAA,EAAqBrgD,EAAOwiC,SAAMjU,EAAAugB,SAAAtH,GAAA0U,IAC9C,GAAAmE,EAAA,C,wBAImB3C,EAAAD,GACfC,EACLjE,KAAA6G,EAAU,CACV,CAGmB,CACjB,C,sBAcQzB,EAAA0B,EAAAC,EAAAC,EAAAC,G,MACPA,E,KAmBFC,EAAAnC,GAAAK,EAAAgB,cAAAU,GACD,IAAAG,GAAgBhC,GAAciC,GAAA,OAAAH,EAG7B,GAAAE,GAAA,MAAAF,GAAAnC,GAAAsC,EAAAlH,MACJ,CAWD,OAAAkF,GAHgCmB,GAAOjB,EAAAQ,WANvC,SAAA9wB,GAIkB,OAAQA,EAAAyM,SAAkB0lB,MAAID,KAAKA,EAA2BnlC,QAAAiT,EAAA6wB,YAAAQ,GAAArxB,EAAA8K,KAAAknB,IAAAX,GAAAW,EAAAhyB,EAAA8K,MAClE,GACyBknB,GACtCC,GAAAlS,GAAA/J,WAMQ,CAhBJ,W,KAtBCka,EAAOH,GAAWO,EAAAgB,cAAAU,G,GACnB,MAAA9B,EAAA,OAAAA,EAEA,IAAAmC,EAAApC,GAAAK,EAAAgB,cAAAU,GACH,OAAA7B,GAAgCkC,GAASJ,EAEd,MAAtBA,GAAsBnC,GAASuC,EAAAnH,MAI9BkF,GAAAiC,EADeJ,GAAyBlS,GAAA/J,YAF5C,I,6BA0VAsc,GAAmCC,EAAMjC,UAAiBiC,EAAMP,SAAAC,EAAAC,EAAAC,E,CAOpE,SAAAK,GAAAD,EAGSE,GACP,OArTA,SAAkCnC,EAAA0B,EAAAS,GAClC,IAAIC,EAAQ3S,GACH/J,WAEL2c,EAAY5C,GAAAO,EAAAgB,cAAAU,GAChB,GAAIW,E,OACEA,EAASva,c,EACL2F,aAAiBd,IAAA,SAAArE,EAAAyM,G,EAEHqN,EAAAxZ,qBAAiBN,EAAAyM,E,IAErCqN,EAMD,GAAMD,EAAA,C,IAQNL,EAAAnC,GAAAK,EAAAgB,cAAAU,GAcF,O,EAbmBjU,aAAAd,IAAA,SAAArE,EAAAE,GACZ,IAAAxE,EAAA8b,GAAkBH,GAETmC,EAAA,IAAAlnB,GAAA0N,IAAAE,G,EAAK4Z,EAAAxZ,qBAAiBN,EAAAtE,E,IAOtC0b,GAAMoC,GAAAp2C,SAAA,SAAAi/B,GACCyX,EAAOA,EAAAxZ,qBAAmB+B,EAAA5xC,KAAA4xC,EAAA3G,KAChC,IACDoe,CACD,CAkBA,OAZA1C,GAFiBC,GAAkCK,EAAAgB,cAAAU,IAEVh2C,SAAW,SAAEi/B,GACvDyX,IAAAxZ,qBAAA+B,EAAA5xC,KAAA4xC,EAAA3G,KAUD,IACEoe,C,CA2PAE,CAAoCL,EAAAjC,UAAAiC,EAAAP,SAAAS,E,CAwCpC,SAAKI,GAAgEN,EAAIznB,EAAAgoB,EAAAC,G,OA1QzE,SAA2BzC,EAAA0B,EAAAlD,EAAAgE,EAAAC,IAC5B,EAAAthD,EAAAwjB,QAAA69B,GAAAC,EAAA,6DAED,IAAAjoB,EAAAkjB,GAAAgE,EAAAlD,G,yBAsBE,OAAI,KAQA,IAAAkE,EAAA/C,GAAAK,EAAAgB,cAAAxmB,GAaA,OAAIqlB,GAAgB6C,GAChBD,EAAmB9R,SAAA6N,GAqChBsB,GAAK4C,EAAAD,EAAA9R,SAAA6N,G,CAuLdmE,CAC2BV,EAAKjC,UAAoBiC,EAACP,SAAAlnB,EAAAgoB,EAAAC,E,UAiB/CG,GACFX,EAAAznB,G,OAhKN,SAEuBwlB,EAAAxlB,G,OAEnBilB,GAAgCO,EAAAgB,cAAAxmB,E,CA8JhCqoB,CAA2BZ,EAAMjC,UAAkBtC,GAAeuE,EAAAP,SAAAlnB,G,CAatE,SAAKsoB,GAEQb,EAAiBc,EACnBzU,EAAW3I,EAAI73B,EAAA3W,G,gBAjKxB6oD,EAAA0B,EAAAqB,EAAAzU,EAAA3I,EAAA73B,EAAA3W,GACF,IAAM6rD,EACNlB,EAAAnC,GAA0CK,EAAAgB,cAAAU,G,aAE1C,SAAA9B,EAAAoD,EAAApD,MACD,UAAAmD,EAQC,SARDC,EAAAlD,GAAAgC,EAAAiB,EAQC,C,MAAgCC,EAAK1Q,UAAUn7C,IAASssC,WAAeuf,EAAAlb,aAgBlE,MAAO,GAXN,IALqE,IAAAmb,EAAA,G,iBAGvEh7C,EAAQ6F,EAAKk1C,EAAAvU,uBAAAH,EAAAn3C,GAAA6rD,EAAA5U,gBAAAE,EAAAn3C,GACX2L,EAAAmF,EAAe+jC,UACflpC,GAAAmgD,EAA2CrrD,OAAC+tC,GAC7C,IAALV,EAAAniC,EAAAwrC,IAAK2U,EAAiBrsD,KAAAkM,GACpBA,EAAQmF,EAAM+jC,UAOb,OAAAiX,C,CAuICC,CACEjB,EAAAjC,UAAgCiC,EAAaP,SAAQqB,EAASzU,EAAA3I,EAAA73B,EAAA3W,E,CAapE,SAAIgsD,GAAAlB,EAAQnN,EAAgBsO,G,OAlOxB,SAEMpD,EAEV0B,EAAmC5M,EACnC2N,GAEA,IAAAjoB,EAAAkjB,GAAqBgE,EAAA5M,GACnB8K,EAAWH,GAAUO,EAAAgB,cAAAxmB,G,OACR,MAAbolB,EAAaA,EAEZ6C,EAAAlH,mBAAAzG,G,2DAIe,I,CAoNhBuO,CAAIpB,EAAAjC,UAAAiC,EAAAP,SAAuE5M,EAAAsO,E,CAK7E,SAAKE,GAEHrB,EAAe3Z,G,OAEb+X,GACE3C,GAAsBuE,EAAoBP,SAAsBpZ,GAAA2Z,EAAAjC,U,aAE9DxlB,EAAAwlB,G,MAKC,CAEL0B,SAAAlnB,EAEFwlB,YAGY;;;;;;;;;;;;;;;;GAkDf,IAAAuD,GAAA,WAEK,aACJ,SAASC,IAGVzkD,EAAA5I,EAAA,CAAA6I,KAAAwkD,GAsCDxkD,KAASykD,UAAA,IAAA3jD,GAAoB,C,OAAqBf,EAAAG,E,CAAAskD,EAAA,EAC5CjtD,IAAS,mBACLmD,MAAC,SACEkiD,GAEX,IAAA7wC,EAAA6wC,EAAA7wC,KAAU+pC,EAAA8G,EAAAtT,WAAE,EAAAnnC,EAAAwjB,QAAY,gBAAZ5Z,GAAY,kBAAAA,GAAA,kBAAAA,EAAA,8CACzB,EAAA5J,EAAAwjB,QAAA,cAAAmwB,EAAA,mDAEe,IAAA4O,EAAA1kD,KAAAykD,UAAA5lD,IAAAi3C,GAMF,GACV4O,EAAA,CACY,IAAKC,EACbD,EAAe34C,KACV,mBAAAA,GAAA,kBAAA44C,EAAA3kD,KAAAykD,UAAAvlD,IAAA42C,EAAAnD,GAAAmD,EAAA8G,EAAApK,aAAAkS,EAAAlS,oBACS,GAAU,kBAAVzmC,GAAiC,gBAAA44C,EAAA3kD,KAAAykD,UAAAtzC,OAAA2kC,QACpC,GAAQ,kBAAL/pC,GAAK,kBAAA44C,EAAA3kD,KAAAykD,UAAAvlD,IAAA42C,EAAApD,GAAAoD,EAAA4O,EAAA9R,eACf,GACK,kBAAP7mC,GAA8B,gBAAA44C,EAAA3kD,KAAAykD,UAAAvlD,IAAA42C,EAAArD,GAAAqD,EAAA8G,EAAApK,mBAGlB,IAAU,kBAANzmC,GAAe,kBAAA44C,E,qFAAA3kD,KAAAykD,UAAAvlD,IAAA42C,EAAAnD,GAAAmD,EAAA8G,EAAApK,aAAAkS,EAAA9R,S,CAGhC,MAAkB5yC,KAAGykD,UAAKvlD,IAAA42C,EAAA8G,EAC3B,GAED,CAENrlD,IAAA,aAEDmD,MAAA,WAmBE,OAAAkO,MAAAM,KAAQlJ,KAAIykD,UAAE/gD,S,KAKZ8gD,C,CAvGH,GA4JGI,GAEiB,I,WAjCnB,aACA,SAAAC,IACe9kD,EAAgC5I,EAAzC,CAAgD6I,KAAA6kD,EACtD,C,eAEE,CACAttD,IAAA,mBACAmD,MAAW,SAACo7C,GACR,OAAW,IAGV,G,CAQLv+C,IAAA,qBACMmD,MAAA,SAAYvC,EAAA2G,EAAYgQ,GACxB,OAAS,IACf,K,SAqBO,W,sBAILg2C,EAA8BC,EAAAC,G,IAC/BC,EAAA/gD,UAAAtL,OAAA,YAAAsL,UAAA,GAAAA,UAAA,QAEiBnE,EAAG5I,EAArB,CAAqB6I,KAAyB8kD,GAC9C9kD,KAAM+kD,UACN/kD,KAAMglD,WAAUA,EAKhBhlD,KAAAilD,wBAAYA,C,QAEAllD,EAAiBG,E,CAAA4kD,EAAyB,CAEtD,CAOAvtD,IAAA,mBAEAmD,MAAA,SAAAo7C,GACD,IAAA9Q,EAAAhlC,KAAAglD,WAAA/H,WACF,GAAAjY,EAAAuX,mBAAAzG,GAAA,OAAA9Q,EAAAgZ,UAAA1P,kBAAAwH,GAWG,IAAAoP,EAAoC,MAApCllD,KAAAilD,wBAAoC,IAAAhJ,GACpCj8C,KAAAilD,yBAAY,GAAC,GACbjlD,KAAAglD,WAAAvH,YACH,OAAA0G,GAAAnkD,KAAA+kD,QAAAjP,EAAAoP,EAa6B,GAGxB,CAIA3tD,IAAA,qBACImD,MAAK,SAAGvC,EAAAgtD,EAAAr2C,GACd,IAAAi1C,EAAO,MAAP/jD,KAAAilD,wBAAajlD,KAAMilD,wBAAMhH,GAAyCj+C,KAAAglD,YAEtDf,EAASH,GACM9jD,KAAA+kD,QAAAhB,EAAAoB,EAAA,EAAAr2C,EAAA3W,G,OAAuB,IAAlB8rD,EAAArrD,OAAkB,KAChDqrD,EAAA,E,KAQAa,C,CA7EK;;;;;;;;;;;;;;;;eA+HGM,EAAAC,EAAAC,EAAAC,EAAAC,G,IAGRC,EAAwBC,E,EAFrB,IAAAnB,G,GAGHe,EAAUv5C,OAASmvC,GAAEY,UAAA,C,UAMXplC,OAAGqkC,SAAM0K,EAA+BE,GAAAP,EAAAC,EAAAn+C,EAAAs0B,KAAAt0B,EAAAwqC,KAAA6T,EAAAC,EAAAI,K,EAI9CzjD,EAAIwjB,QAAQze,EAAAwP,OAAAskC,W,qBASR9zC,EAAAwP,OAAAukC,QAAAoK,EAAA5H,YAAAoI,eAAAlK,GAAAz0C,EAAAs0B,M,EAEKsqB,GAAYV,EAAAC,EAAAn+C,EAAAs0B,KAAAt0B,EAAAwqC,KAAA6T,EAAAC,EAAAE,EAAAE,G,wDAyR/B,SAASR,EACGzH,EAEVniB,EAAoBuqB,EAAAR,EAAA9H,EAAAmI,GActB,IAAAI,EAAArI,E,OAOEoI,EAAcE,SAAA,SAAA5H,EAAa7U,GACvB,IAAA+Y,EAAO7D,GAAAljB,EAAA6iB,GACL6H,GAAOvI,EAAAhU,GAAA4Y,MAAAyD,EAAAL,GAAAP,EAAAY,EAAAzD,EAAA/Y,EAAA+b,EAAA9H,EAAAmI,G,MAGCK,SAAI,SAAY5H,EAAA7U,G,IACxB+Y,EAAK7D,GAAAljB,EAAA6iB,GACN6H,GAAAvI,EAAAhU,GAAA4Y,MAAAyD,EAAAL,GAAAP,EAAAY,EAAAzD,EAAA/Y,EAAA+b,EAAA9H,EAAAmI,G,IAGHI,C,iCA3UI,EAAK7jD,EAAKwjB,QAAMm9B,EAAApsC,OAAAskC,WAAA,mBAoBhB0K,EAAA5C,EAAApsC,OAAAukC,QAAAoK,EAAA5H,YACMoI,a,6CAMNP,EAAAv5C,OAAAmvC,GAAoCG,eAAgB,C,QAMrDoK,EAHCU,EAAc3K,O,SCrmCY4J,EAAAzH,EAAAniB,EAAA+pB,EAAA5C,EAAAiD,G,SAIG,M,GAAAL,EAAsB/pB,GAAf,OAAAmiB,E,IARrClH,E,gBAAAb,EAAa+H,EAAAV,WAAAe,U,0CAAbP,YAAAnB,qBAAajX,EAAA+gB,GAAAb,EAAAtH,GAAAN,QAAb,C,4GAAAtY,EAAA6d,GAAaqC,EAAAc,E,uCAWX,IAAAvQ,EAAQnM,GAAAnO,GAChB0X,EAAAiR,GAAAoB,EAAAzP,EAAA6H,EAAAF,aAEY,MAAAvK,GAAAyK,EAAgBF,YAAhBlB,mBAEXzG,KAAkB5C,EAAA0C,EAAAtH,kBAAAwH,KAEAW,EAAA,MAAZvD,EAAYkS,EAAiB1zC,OACjCm4B,YAAY+L,EAAUE,EAAU5C,EAAA/W,GAAAX,GAAA9kB,EAAAkvC,GAEpBjI,EAAWV,WAAAe,UACvB5K,SAAA0C,G,kDASwBF,GASxBnR,WAAAkZ,EAAAF,YAAAnB,uBAKK1sC,EAAAw2C,GAAAb,EAAAtH,GAAAN,KACS7U,eAAA2N,EACZ2O,EACA1zC,OAAU0iC,eACVqC,EACA7mC,EACAg2C,GAKF,CAGS,OAFXh2C,EAAA+tC,EAAAF,YAAAnB,sBAAA,MAAAsH,GAAA2B,EAAA3J,MAEW8B,GAAAC,EAA6BlH,EAAe7mC,EAAAw1C,EAAA1zC,OAAA40C,e;;;;;;;;;;;;;;;;GDijC5CC,CAAAnB,EAAAC,EAAAc,EAAA3qB,KAAA+pB,EAAAC,EAAAI,G,SAiXgBR,EAAAzH,EAAA6I,EAAAlL,EAAAiK,EAAAC,EAAAI,G,GAGjB,M,GADFL,EAAAiB,GACO,OAAA7I,E,MAUVA,EAAAF,YAAAoI,aAIDpI,EAAAE,EAAAF,Y,4HAOF,GAAA9B,GAAA6K,GAAA,CASJ,IAAAT,EAAA,IAAA5H,GAAA,MClhDW,OAxBXV,EAAAO,UAAAvP,aAAA3B,IAAA,SAAA2Z,EAAAzhB,GAsBM+gB,EAAuBA,EAAA7mD,IAAA,IAAA08B,GAAA6qB,GAAAzhB,EACrB,IACU0hB,GACYtB,EAAAzH,EAAA6I,EAAAT,EAAAR,EAAAC,EAAAE,EAAAE,EACxB,CAAI,OAAQjI,C,KAGVgJ,EAAY,IAAAxI,GAAA,MAOpB,OANM7C,EAAA2K,SAAqB,SAAMW,EAAMlsD,GAClC,IAAAmsD,EAAAnI,GAAA8H,EAAAI,GAEInJ,EAAiBqJ,kBAACD,KAAAF,IAAAznD,IAAA0nD,EAAAnJ,EAAAO,UAAArM,SAAAkV,IAC1B,IAEDH,GAGStB,EAAYzH,EAAmB6I,EAAAG,EAAApB,EAAAC,EAAAE,EAAAE,E,CD8mCImB,CACnB3B,EAAcC,EAAAc,EAAA3qB,KAAA2qB,EAAA7K,aAAAiK,EAAAC,EAAAI,E,2CAI/B,EAAIzjD,EAAMwjC,gBAAgB,2BAAA2f,EAAAv5C,M,WC9mCdq5C,EAAbzH,EAAaniB,EAAA+pB,EAAAK,G,oBAAlBoB,EAAKnJ,GAAAF,EAAAsJ,EAAAjJ,UAAaiJ,EAAb3K,sBAAAX,GAAyCngB,GAAAyrB,EAAApB,c,UAA5BT,EAAA4B,EAAAxrB,EAAA+pB,EAAAX,GAAAgB,E,iBD8mCc,C,MACxBA,EAAcsB,a,gBAcb7B,EAAA8B,EAAAvB,G,MACFuB,EAAAlK,W,KAEDX,qBAAA,C,IACD8K,EAAAxJ,EAAAI,UAAAlV,cAAA8U,EAAAI,UAAAvZ,UAEH4iB,EACAtJ,GAAAsH,IACHO,EAAAhtD,OAAA,IAAAysD,EAAApI,WAAAX,sBAAA8K,IAAAxJ,EAAAI,UAAArT,OAAA0c,KAAAzJ,EAAAI,UAAA/U,cAAA0B,OAAA0c,EAAApe,iBAAA2c,EAAAhuD,KAAA26C,GAAAwL,GAAAoJ,IAED,C,EApBsD9B,EAAAI,EAAA9I,G,WAI5C8I,E,QAGA9I,E,UA6BF2K,GAA4ClC,EAAAzH,EAAA4J,EAAAhC,EAAA7uC,EAAAkvC,GAElD,IAMFnP,EAAAyO,EANQsC,EAAQ7J,EAAAV,WACd,GAA6C,MAA7C2G,GAA8B2B,EAAcgC,GAE5C,OAAO5J,E,MA+BgC4J,GAGjC,IADE,EAAAplD,EAAAwjB,QAAeg4B,EAAkCF,YAAMnB,qBAAA,8DACzDqB,EAAAF,YACFoI,aAAA,CAQA,IAAApI,EAAcQ,GAAwBN,GAQ7B8J,EAAkBvE,GAAAqC,EANzB9H,aAAAhN,GACsBgN,EACRhN,GAGd/J,YAEE+P,EAAY2O,EAAc1zC,OAAA0iC,eAAAuJ,EAAAV,WAAyBe,UAAAyJ,EAAA7B,E,KACrD,CACA,IAAA8B,EAActB,GAAWb,EAAAtH,GAAAN,IACzBlH,EAAgB2O,EACd1zC,OAAA0iC,eAAAuJ,EAAAV,WACOe,UAAA0J,EACL9B,E,UAMJ9P,EAAMnM,GAAc4d,G,GAKR,cAAZzR,EAAY,EACZ,EAAM3zC,EAAOwjB,QAAG,IAAA0W,GAAAkrB,GAAA,yDAChB,IAAII,EAAYH,EAAWxJ,UAOzB4J,EAAMrE,GAGJgC,EAAAgC,EAAAI,E,EATFhK,EAAAF,YAAAO,WAUwBvH,EAAnB,MAALmR,E,6BAKMJ,EAAaxJ,S,UASnB6J,EAPAC,EAAM3rB,GAAkBorB,G,GAQxBC,EAAYjL,mBAAiBzG,GAAA,C,0BAE7B,IAAAiS,EAAoBxE,GAAqCgC,EAAAgC,EAAAC,EAAAxJ,UAAAkH,GAEvD2C,EAAA,MADFE,EACEP,EAAAxJ,UAAA1P,kBACOwH,GACLjM,YAAYie,EACZC,GAQCP,EAAAxJ,UAAA1P,kBAAAwH,E,MACL+R,EAAmB1D,GAAKoB,EAAAzP,EAAA6H,EAAAF,aACDhH,EAAT,MAAdoR,EAAuBzC,EAAA1zC,OAAAm4B,YAAA2d,EAAAxJ,UAAAlI,EAAA+R,EAAAC,EAAApxC,EAAAkvC,GAQxB4B,EAAAxJ,S,EAGL,OAAAN,GAAAC,EAAyClH,EAAiB+Q,EAAUlL,sBAAAX,GAAA4L,GAAAnC,EAAA1zC,OAAA40C,e,sCAIzDjB,EAAM5H,Y,iGAKduK,EAAU1B,iBAAS2B,EAAApC,aAAA,C,MAERoC,EAAWjK,UAAAnU,YAAA0d,EAAAW,G,EAEVF,EAAU5T,eAAA6T,EAAAjK,UAAAmK,EAAA,K,eAGcZ,G,MAC/BT,kBAAAS,IAAAlrB,GAAAkrB,GAAA,E,eAGAprB,GAA8BorB,G,EAC9BU,EAAAjK,UAAA1P,kBAAAwH,GAELjM,YAAAie,EAAAI,GACFE,EAAA,cAAAtS,EAAAkS,EAAAxU,eAAAyU,EAAAjK,UAAAvU,GACFue,EAAAne,YAAAoe,EAAAjK,UAAAlI,EAAArM,EAAAqe,EAAAlD,GAAA,KAvID,C,yGAQIe,GAAqBP,EAAAC,EAAAkC,EAAAW,EAAA3C,EAAAC,EAAAI,G,IAEnByC,EAAc5R,E,eAClB//B,EAAS,IAAA4xC,GAAiC/C,EAAAF,EAAAG,G,GACzC7J,GAAA4L,GACG9Q,EAAe2O,EAAe1zC,OAAC0iC,eAAIiR,EAAApI,WAAAe,UAAAkK,EAAAtC,GACvCyC,EAAS3K,GAAe2H,EAAA5O,GAAA,EAAA2O,EAAA1zC,OAAA40C,oBACvB,CACE,IAAIxQ,EAAOnM,GAAqB4d,G,mBA0HrC9Q,EAAA2O,EAAA1zC,OAAA8hC,eAAA6R,EAAmDpI,WAAAe,UAAsBkK,G,oDAG/D,C,IAMXhV,E,QADCF,EAAAwU,EAAAxJ,UAAA1P,kBAAqCwH,GAGvC,GAAA6F,GAAAmM,GAYM5U,EAAMgV,M,6BAORhV,EAHyB,MAAvB1J,EACuB,cAAnB+e,GAAmBT,IAAAte,EAAAmI,SAAA6W,GAAAV,IAAArjB,UAEP+E,EACXA,EAAAK,YAAmBie,EAAAI,GAE3BzX,GAAA/J,UAEM,CACR,GAAAsM,EAAArI,OAAAuI,GAcOmV,EAAqChD,O,OAZ7CD,EAAA1zC,OAAAm4B,YAAA2d,EAAAxJ,UAAAlI,EAAA5C,EAAA4U,EAAApxC,EAAAkvC,G,+CAaE,C,CAOA,OAAAyC,C,UAAmDnC,GAAAvI,EAAA7H,GAEnD,OAAO6H,EAAAV,WAAiBV,mBAAAzG,E,UAwCxB2S,GAAuBrD,EAAYpgB,EAAA8d,GAKrC,O,EAJImD,SAAA,SAAA5H,EAAA7U,GACCxE,IAAA6E,YAAAwU,EAAA7U,EACJ,IAEDxE,C,UAUQ0hB,GAA8BtB,EAAKzH,EAAqBniB,EAAOuqB,EAACR,EAAA9H,EAAAiI,EAAAE,G,GAInEjI,EAAAF,YAAAO,UAAAvZ,YAAAkZ,EAAAF,YAAAnB,qBAAA,OAAAqB,EAWL,IASQ+K,EATR1C,EAAArI,EAUa+K,EAAP/M,GAAOngB,GAAAuqB,E,0GAIT,GAAMb,EAAS9R,SAAM0C,GAAA,C,2DAIjBkQ,EAAqBF,GAAAV,EAAAY,EAAA,IAAApqB,GAAAka,GAAA5C,EAAAqS,EAAA9H,EAAAiI,EAAAE,EACzB,C,MAEM3U,SAASrK,kBAAM,SAAAkP,EAAA6S,G,OAEChL,EAAMF,YAA6BlB,mBAAAzG,IAAA,OAAA6S,EAAAjuD,M,MACrD04C,SAAA0C,KAAA8S,EAAA,C,WAIajL,EAAAF,YAAAO,UAAA1P,kBAAAwH,G,KAEJgQ,GAA4CV,EAAAY,EAAA,IAAApqB,GAAAka,GAAA5C,EAAAqS,EAAA9H,EAAAiI,EAAAE,E,iBCr2ChB,W,sBAKnCiD,EAAApM,EAAAqM,GACF/oD,EAAkC5I,EAAtC,CAAsC6I,KAAA6oD,G,KAE/BpM,OAAIA,E,KAEJsM,oBAAA,G,IX+kBXrR,E,2BW7kBMsR,EAAe,IAAKtV,GAAal4B,EAAAupB,YACjCrzB,GX4kBNgmC,EW5kB0Dl8B,GXwlBjD67B,eAAA,IAAA3D,GAELgE,EAAY3S,YAOf2S,EAAAuR,WAAA,IAAAC,GAAAxR,GAED,IAAA5C,GAAA4C,G,KWlmBMyR;;;;;;;;;;;;;;;;;kBDo7BF,CAIDz3C,S,CCx7BiB03C,CAAsB13C,G,oBAEpC23C,EAAYP,EAAU7L,W,mDAGpBW,EAAQlsC,EAAW0iC,eACT3D,GAAkB/J,WAAA2iB,EAAArL,UAAA,MAEjCoK,EAAA,IAAAnM,GAAA6B,EAAAwL,EAAAhN,qBAAA0M,EAAA1C,gBAEM7P,EAAA,IAAAwF,GAAA2B,EAAAyL,EAAA/M,qBAAA5qC,EAAA40C,gBACLtmD,KAAIglD,WAAAxH,GAAA/G,EAAA2R,GACJpoD,KAAIupD,gBAAA,IAAAC,GAAAxpD,KAAAy8C,O,QAEJ18C,EAASG,E,CAAA2oD,EAAA,CACT,CACAtxD,IAAA,QACAsH,IAAA,WACA,OAAAmB,KAASy8C,MACT,K,EAjCyC,G,qDCzFzCgN,MAAI3kB,aAAcuS,iBACTsE,GAAUngB,KAAAkuB,EAAApb,kBAAA3E,GAAAnO,IAAAiJ,WAAAilB,EAAA/X,SAAAnW,G,2BAKT,I,EAAAutB,oBAAAnwD,M,UAKX+wD,GAAAC,EAAAC,EAAAC,G,kBACD3nD,EAAAwjB,QAAA,MAAAkkC,EAAA,mD,MAAAD,EAAAH,MAAAhrB,M,sBAES/xB,SAAU,SAAUrP,G,IAM5B0sD,EAAA1sD,EAAA2sD,kBAAAF,EAAAtuB,G,gBACF,GAAAquB,EAAA,C,IAEY,IAAAI,EAAA,G,4CAAAC,EAEFN,EAAAb,oBAEA7tD,G,iBAFiB,GAAA2uD,EAAjBM,iBAAoC,CAEhCF,EAAMA,EAAAlyD,OAAA6xD,EAAAb,oBAAA9uD,MAAAiB,EAAA,I,wBAEnB6tD,oBAAOkB,C,4BAAA,G,kBAGPG,GAAYR,EAAAtE,EAAAC,EAAA5C,G,SAAZzH,GAAYa,OAAA,OAAAuJ,EAAA5uC,OAAAmoB,W,IACVlZ,QAAOs4B,GAAA2L,EAAA5E,YAAA,8D,IACRr/B,QAAAo4B,GAAA6L,EAAA5E,YAAA,4D,yBACDqF,GAAcT,EAAAT,WAAA9D,EAAAC,EAAAC,EAAA5C,G,SAAAiH,EAAAT,W,EAAA5iD,EAAAo3C,WFkgCd,EAAIx7C,EAACwjB,QAAWg4B,EAGKV,WAAAe,UAAAlL,UAAAsS,EAAA1zC,OAAAqzB,YAAA,2B,EACjB5iC,EAAAwjB,QAAAg4B,EAA0CF,YAAAO,UAAAlL,UAAAsS,EAAA1zC,OAAAqzB,YAAA,4B,YErgCOx+B,EAAAo3C,UAAAF,YAAAnB,uBAAA+I,EAAA5H,YAAAnB,qBAAA,2D,aACpD/1C,EAAAo3C,U,+DCvDkB2M,GAA8BV,EAAAjN,EAAAM,EAAA4M,G,IAC9BU,EAAcV,EAAA,C,yCR+YehN,EAAQF,EAAAM,EAAAuN,G,IACtDnN,EAAW,GAKXoN,EAAO,G,oCAGG,kBAAH7N,EAAG7wC,MAAA8wC,EAAA9J,OAAA2X,oBAAA9N,EAAAhK,QAAAgK,EAAApK,eAAAiY,EAAA7yD,M,EAAAglD,EAAAtT,U,MP3YZ,c,aO2YYsT,EAAApK,a,UPvYVlJ,IOyYH,IAEDqhB,GAAA9N,EAAAQ,EAAA,gBAKgBV,EAAA6N,EAAAvN,GAMd0N,GAAiB9N,EAAqCQ,EAAE,cAAAV,EAAA6N,EAAAvN,GACxD0N,GAAc9N,EAAAQ,EAAA,cAAAoN,EAAAD,EAAAvN,G,GACqBJ,EAAUQ,EAAA,gBAAAV,EAAA6N,EAAAvN,G,GAErBJ,EAAAQ,EAAA,QAAAV,EAAA6N,EAAAvN,GACtBI,C;;;;;;;;;;;;;;;;GQ7YH,I,GAAAuN,GAAA,SAAAC,ICjFD,a,6CA8EEC,G,OAMM,I,EAANC,MAAA75B,I,aAEuB45B,EAAAxF,EAAAC,EAAAyF,G,MACrB1F,EAAA5uC,OAAAmoB,Q,GAMA,O,EAAO,C,MACRisB,EAAAC,MAAAlsD,IAAAggC,G,6FAqBD,G,GACE,EAAAz9B,GAAqB,EAAAC,OAAgCC,E,QAErD,IAAqBiC,EAAfC,EAAWsnD,EAAIC,MAAArnD,SAAAC,OAAAC,cAAAC,GAAiBN,EAAAC,EAAAM,QAAAC,MAAAF,GAAA,GACtC,IAAAonD,EAAA1nD,EAAA7I,MAMA2iD,EAAOA,EAAStlD,OAAOqyD,GAACa,EAAA3F,EAAAC,EAAAyF,G,gBAG1B3pD,EAAAG,C,aAeEqC,GACE,MADFL,EAAAQ,QAMAR,EAAAQ,Q,SAUA,GAAA5C,EACD,MAAAC,C,WChKH,SAAA6pD,GAAAJ,EAAAK,EAAA5F,EAAA9H,EAAA2N,G,2BAmGaN,EAKAC,MACAlsD,IAAWggC,G,OAAX,IAAKoe,EAALmJ,GAAWb,EAAA6F,EAAA3N,EAAA,MACC4N,GAAZ,EACcpO,EAAAoO,GAAS,E,oCAGlC5a,GAAO/J,W,GACD,G,MAKL8W,GAAA,IAAAvB,GAAAgB,EAAAoO,GAAA,OAAApP,GAAAwB,EAAA2N,GAAA,I,qCAUAE,GAAAR,EAAAS,EAAA1B,EAAAtE,EAAA9H,EAAA2N,G,uGHpDuBxB,EAAAC,G,sBACvBjyD,KAAAiyD,E,EGqDDD,EAAAC,G,SHvBQD,EAAAvsD,G,MAARusD,EAAA5E,WAAQ/H,W,EACC,G,SACRe,UAAAlV,c,0DACF,I,mDC1D8D8gB,EAAA4B,EAAA5N,EAAAI,UAAA3gD,E,EEkFpDusD,EAAAC,E,aAc4CiB,EAAAW,EAAA5B,EAAAC,G,MACpD2B,EAAAnsB,iB,YAEKosB,GAAAZ,G,GAAA,EAAA1pD,GAAA,EAAAC,OAAAC,E,GACJ,Y,EAAY,I,kHAGdqqD,EAAQA,EAAA5zD,OAAA4xD,GAAAC,EAAAC,EAAAC,I,GAAAF,KACNkB,EAAOC,MAAK55C,OAAMy6C,G,uDAErB,MAAApqD,GAEDJ,GAAA,EAIMC,EAAMG,CAGX,SAED,IAIeqC,GAAQ,MAAAL,EAAAQ,QACVR,EAAQQ,QAejB,CAXE,QAIA,GAAO5C,EACH,MAAAC,CAMN,C,UAOCwqD,EAAAf,EAAAC,MAAAlsD,IAAAggC,GACGgtB,IACFF,EAAgBA,EAAO5zD,OAAA4xD,GAAkBkC,EAAAhC,EAAAC,IACrCgC,GAAYD,K,EAELd,MAAO55C,OAAO0tB,GAIZgtB,EAACpC,MAAU3kB,aAAKuS,gBAAA0U,EAAAn0D,KAAgBi0D,EAAApC,Q,CA2BlD,OAVGuC,IACgBN,GACNZ,I,EAOXlzD,KAAA,K,IDzJA+tB,QAAAsmC,GAAA,oC,ICyJAR,EAAAS,MAAAT,EAAAhtB,QACF,CAEDstB,UAKI1O,OAAOsO,EAWX,C,sMASY,E,EAAVnqD,C,aAKCqC,GAAA,MAAAL,EAAAQ,Q,wBAGC,MAAI3C,C,kCAsBK,K,uBAYA,IAAG,IAAmBkC,EAAnBC,EAAmBsnD,EAAAC,MAAArnD,SAAAC,OAAAC,cAAAC,GAAAN,EAAAC,EAAAM,QAAAC,MAAAF,GAAA,GAChB,IAAA+lD,EAANrmD,EAAa7I,M,0BAWZ,E,EARZ8G,C,aAWCqC,GAAA,MAAAL,EAAAQ,Q,wBAYC,MAAA3C,C,uBAKgCypD,EAAAqB,G,GACjCA,EAAArnB,a,gCAEDjG,EAAAstB,EAAA7sB,iB,SAYAyrB,MAAAlsD,IAAKggC,E,aAIkBisB,EAAWsB,G,OAIjC,M,GAAAtB,EAAAsB,E,uBACD,M,GAAAtB,E,aAK+BA,G,OAC9B,EAAA1pD,GAAA,EAAAC,OAAAC,E,iFAED,IAAAsoD,EAAArmD,EAAA7I,MAUA,GAASkvD,EAATH,MAAA3kB,aAASuS,eAAA,OAAAuS,C,cAER,E,mBAoBsD,MAAApmD,EAAAQ,Q,wBAOrD,MAAA3C,C;;;;;;;;;;;;;;;;YAgJFgrD,GAAW,SAAAC,EAAcC,GAC1B,aAEDxsD,EAAA5I,EAAA,CAAA6I,KAAAssD,GAQEtsD,KAAGusD,gBAAGA,EAQRvsD,KAAAwsD,eAAA,IAAArO,GAAA,MA6BEn+C,KAAAysD,kBL+BE,CACAzK,cAAavC,GAEIa,Q,UAEP,G,aACD,GKpCXtgD,KAAM0sD,cAAM,IAAA5rD,IACZd,KAAM2sD,cAAO,IAAA7rD,G,yBAcb,OP/MF,SAAAkgD,EAAAxlB,EAAAkW,EAAA6P,EAAApkB,ICnZA,EAAAh7B,EAAAwjB,QAAA47B,EAAAP,EAAA4L,YAAA,qD,gCAoCapxB,OAEXkW,OAID6P,UAEDpkB,YAQMA,IAAQ6jB,EAA0BgB,cAAApC,GAAAoB,EAAAgB,cAAAxmB,EAAAkW,IACtCsP,EAAU4L,YAAUrL,C,CM2iBpBsL,CAAgBC,EAAAL,kBAAqCjxB,EAAAuxB,EAAAxL,EAAApkB,GAEjDA,EACK6vB,GACMF,EAAU,IAAAG,G,CX9dvBlS,UAAI,EAIJC,YAAI,EACJnc,QAAI,K,QAEG,GWud4BrD,EAAAuxB,IAFD,E,CAiEpC,SAAAG,GACWJ,EACLvL,GAKN,IAAA/F,EAAOt3C,UAAgBtL,OAAC,YAAAsL,UAAA,IAAAA,UAAA,GACzBwsB,EAAA4wB,GAAAwL,EAAAL,kBAAAlL,GAED4L,EAAA1L,GAAAqL,EAAAL,kBAAAlL,GAgBE,GAAG4L,EACH,CACA,IAAA7R,EAAA,IAAA6C,GAAwC,MAgCxC,OA/BqB,MAAfztB,EAAQghB,KACd4J,IAAAp8C,IAAA08C,MAEE,GAKK7K,EAAiBrgB,EAAAugB,UAAA,SAAAjX,GACzBshB,IAAAp8C,IAAA,IAAA08B,GAAA5B,IAAA,EAED,IAoBEgzB,GAA4CF,EAAO,IAAAM,GAAA18B,EAAA8K,KAAA8f,EAAAE,GACnD,CAnCM,Q,CAkDP,SAAA6R,GAAAP,EAAAtxB,EAAAuxB,GAED,OAAAC,GAAAF,EAAA,IAAAG,G,WX5lBM,E,YACD,EACDpuB,QAAM,KAINoc,QAAO,GWslBXzf,EAAAuxB,G,aAgG8ED,EAAAQ,EAAAzD,EAAAC,G,MAE3E5lD,UAAAtL,OAAA,YAAAsL,UAAA,IAAAA,UAAA,G,YAED4oD,EAAAN,eAAiB3tD,IAAA28B,G,EAAjB,G,mEAQA+xB,GAAOC,KAAAV,EAAAN,eAAAM,EAAAN,eAAA9vD,OAAA8+B,I,MAAPiyB,EAAQ1B,Q,KACA0B,EAAiBpQ,Q,EAEL,C,OAQpB,IAAA0O,EAAc1yD,WAAA,SAAAq0D,GACZ,OAAOA,EAAK5oB,aAAeuS,c,mEAE9B,GAAAsW,IAAAC,EAAA,CAED,IAAArS,EAAAuR,EAAAN,eAAAjR,QAGa/f,G,oBAGc,IAAAqyB,EAAfC,GAAuCvS,G,yCAGjD/yB,EAAUulC,GAAAjB,EAAAlD,GAAVkD,EAAAP,gBAA4ByB,eAAAC,GAAAC,GAAAC,GAAArB,EAAAoB,GAAA1lC,EAAAiX,OAAAjX,EAAAyR,WACtB,C,QAON8xB,EAAAnzD,OAAiB,IAAakxD,EAM7B,GAAA6D,EAAA,C,WAEDb,EAAAP,gBAAW6B,cAAAH,GAAAX,GAAAe,E,MAAXtC,EAAAr/C,SAAW,SAAiB4hD,GAC1B,IAAAC,EAAAzB,EAAAH,cAAA9tD,IAAA2vD,GAAiCF,IAC3BxB,EAAQP,gBAAG6B,cAAAH,GACXK,GAAcC,EAGpB,G,8BAgB+BzB,EACxBtxB,EAAAkW,EAAwB9S,G,MACzB6vB,GAAA3B,EAAAluB,G,GAEP,M,EAAA,C,iCAEDyf,EAAOviB,GAAA4yB,EAAAlzB,G,UAEHsxB,EACO4B,E,IAHXzB,GAAgCnS,GAAAjc,GAAAwf,EAAA3M,G,mBAsC5Bid,GAA8C7B,EAAA8B,EAAA/E,G,MAC9C3lD,UAAAtL,OAAA,YAAAsL,UAAA,IAAAA,UAAA,GACFs3B,EAAAozB,EAAanwB,MACbgf,EAAa,KACboR,GAAwB,EAO1B/B,EAAMN,eACJsC,cAAqBtzB,GACb,SAAAuzB,EAAAC,GAEV,IAAA3Q,EAAAviB,GAAmCizB,EAAcvzB,GACjDiiB,EAAOA,GAAAwR,GAAAD,EAAA3Q,G,EAAMwQ,GAAAnD,GAA8DsD,E,IAC5E,IAuWC5D,EAvWDN,EAAAgC,EAAAN,eAAA3tD,IAAA28B,GA8WA,GA5QesvB,GAoId+D,EAAOA,GAELnD,GAEAZ,GAGHrN,KAAAwR,GAAAnE,EAAAlP,QArICkP,EAAO,IAAAF,GAORkC,EAAAN,eAAAM,EAAAN,eAAAttD,IAAAs8B,EAAAsvB,IA+PA,MAAArN,EAAA2N,GAAA,MA2Ge,CASdA,GAAO,EAOR3N,EAAAhN,GAAA/J,WA8GK,IAAU6U,EAAAuR,EAAAN,eAAAjR,QACd/f,GAKA+f,EAAO2T,cAAA,SAAA5lB,EAAgB6lB,GAOxB,IAAA3J,EAAAyJ,GAAAE,EAAAvT,MAID4J,IAAA/H,IAAA7T,qBAAAN,EAAAkc,GA+BM,GACJ,CACA,IAAI4J,EAAcC,GACAvE,EAAA8D,G,IACXQ,IACLR,EAAY9pB,aAAIuS,eAAA,CAGnB,IAAAiY,EAAAd,GAAAI,IAgBD,EAAAzsD,EAAAwjB,SAAAmnC,EAAAH,cAAAzrD,IAAAouD,GAAA,0C,oCAmBCxC,EAAAJ,cAAAxtD,IAAA0/B,EAAA0wB,EAED,C,uEAAMC,GAK4BzE,EAAA8D,G,2CAaP9B,EAAWtxB,EAAAonB,G,MAOlCkK,EAAWL,kB,EAMZK,EAAAN,eAAAgD,WAAAh0B,GAAA,SAAAyjB,EAAA6L,G,iCA/BgC,IAkCnC,OAAA9H,GAAAhC,EAAAxlB,EAAAi0B,EAAA7M,GAfc,E,UA2CZ8M,GAAW5C,EAA0B6C,GACtC,IAAAn0B,EAAAm0B,EAAAlxB,MAEKgf,EAAA,K,sDAAA3hB,GAK4BizB,EAAAvzB,G,uCAEtB38B,IAAA28B,GAHSsvB,E,iBACAA,EAAI,IAAJF,G,mGHrpDehB,G,OACzB7L,GAAwB6L,EAAA5E,W,KGypDP8F,EAAA6E,EAA1BvO,GAAM0L,EAAAL,kBAAAkD,EAAAlxB,OAAoB2sB,EAAAwE,EAAA5R,UAAAvN,GAAA/J,WAAA0kB,G,CAiD3B,SAAA4B,GAAAF,EAAAxH,GAED,OAAMuK,GAAuBvK,EAA7BwH,EAAAN,eAAA,KAAApL,GAAA0L,EAAAL,kBAAA7Q,M,UAAMiU,GAK4BvK,EAAAwK,EAAArS,EAAA8H,G,yCAEtB1mD,IAAA+8C,MAFsB,MAAb6B,GAAa,MAAAqN,IAAArN,EAAAwR,GAAAnE,EAAAlP,O,sEAKhC1P,GAAM6jB,EAAA,C,MAAItS,EAAgBA,EAAAnP,kBAAAhF,GAAA,KACxB0mB,EAAA1L,GAAmCiB,EAAajc,G,EAC1C+T,EAAAtlD,OAAY83D,GACVE,EACD7jB,EACA+jB,EACLD,G,YAEF3S,IAAAtlD,OAAAm4D,GAAkCpF,EAAAxF,EAAAC,EAAA9H,K,uBAlBD,IAAAqN,EAAAgF,EAAAjxD,IAAA+8C,MAyDnC,MAAA6B,GAAA,MAAAqN,IAAArN,EAA8CwR,GAClCnE,EAAAlP,OAEZ,IAAAyB,EAAA,G,OACAyS,EAAW7e,SAAArK,kBAAA,SAAA0C,EAAuB4C,GACnC,IAAA+jB,EAAAxS,IAAAnP,kBAAAhF,GAAA,KAEK0mB,EAAA1L,GAANiB,EAAAjc,G,6DAAM+T,IAAAtlD,OAIem4D,GACapF,EAAAxF,EAAAC,EAAA9H,K,cAEtBqP,EAAAlD,G,IAHSuG,EAAMvG,EAANH,MACA7qB,EAAIuvB,GAASrB,EAAAqD,G,kDHpxDvBvG,EAAS5E,WAATvH,YAAoBO,S,gDGyxD7B,SAAAte,G,GACE,OAAAA,EACA,OAAMd,E,sBA7hCR6vB,GAAU3B,EAAAluB,G,YACRwxB,GAA6Bd,G,EAC9BhuC,EAAAka,KAAAqD,EAAAvd,EAAAud,Q,iBAEUwxB,GAAAvD,EAAA4B,E,0BAyhCS4B,CACVxD,EACNqD,EAAK1xB,MACLG,GAtiCN,SAGakuB,EAAAtxB,G,8BXlqBP,E,YACD,EACDqD,QAAM,KAINoc,QAAO,G,IWisDPsV,CAAyBzD,EAAAqD,EAAA1xB,OAc1B,IAAA12B,E,oB/DxxDC,gB,cAGO+xB,EAAA,0F,wBAEgBA,EAAoB,6DAAY,gB,IAAAA,EAAA,8B,MAExD,IAAA1uB,MAAA9N,EAAA,OAAAkzD,EAAA/xB,MAAAl1B,WAAA,KAAAuwB,G,gC+DixDA22B,CAAA/wB,EAAAywB,G,uBAGH,CAwBC,SAAAhC,GAAArB,EAAA4D,GAED,IAAMpB,EAAAd,GAA4BkC,G,yJAS5BpB,G,MAKFA,EAAW7xC,QAAA,K,WAMZkI,SAAA,IAAAgrC,KAAArB,EAAA12D,OAAA,mB,kDAGH,CAuBC,SAAAy3D,GAAAvD,EAAA4B,EAAApJ,GAED,IAAMwF,EAAAgC,EAAAN,eAAA3tD,IAAA6vD,G,6HAGyBZ,GAAcvS,G,6DAiB1CwP,EAAA,GAGH,O,6CAvByC,IAuBzCA,CAuBE,G,UAGIkD,GAGsC2C,G,kEAAb,K,IA/hD1BjrC,QAAHkrC,GAAA,oC,IA+hD0CD,EAAA1E,MAAA0E,EAAAnyB,O,mDAI1CqyB,EAAM7sB,EAAA3H,G,MAANwI,aAAUuS,eAAgB,C,IAExB0Z,EAAmBvC,GAAqBsC,GACxCE,EAAIlE,EAAAH,cAAY9tD,IAAAkyD,G,EAKVpE,cAAYx7C,OAAA4/C,G,EACZrE,cAAYv7C,OAAA6/C,E,iBAhBoB,OAAAC,IA4B1C,CAgCE,SAAOC,GAAIpE,EAA4BqE,EAAMC,GAC9C,IAAA51B,EAAA21B,EAAA1yB,MAEKG,EAAAuvB,GAA0BrB,EAAAqE,G,qOAG9B,IAAAxV,GAAM0C,IAAAgT,GAAA3F,GAAA2F,GAAA,O,GAAoBA,GAAA5H,OAIxB,IAAAxlB,EAAW,GAkBF,OAZVotB,IAAAptB,IAAAlsC,OAAAu5D,GAAAD,GAAAx4D,KAAA,SAAA+wD,G,uCAbqC3lB,IAAAlsC,OAcvCw5D,EAED,IASattB,CAGP,I;;;;;;;;;;;;;;;;GA0BL,IAAAutB,GAAA,WAED,a,wCAA0C,O,mDAGlC,OAAN,IAAMC,E,wCAGJ,O,MACA,WAMD,OAAAzxD,KAAAm8C,K,KAbuCsV,CAgB1C,CAlBC,GA4BCC,GAAsC,WACvC,aAED,SAAMC,EAAA7E,EAAAtxB,G,mFAIe9gC,MAAM,SAAkC4uC,GACpC,IAAAkW,EAASd,GAAA1+C,KAAA4xD,MAAAtoB,G,kCAKhC/xC,IAAA,O,MAAA,WACE,OAAAs6D,GAAmC7xD,KAAK8xD,UAAQ9xD,KAAM4xD,M,OAdlB,GA2EAG,GAAA,SAAAr3D,EAAAs3D,EAAAC,GAEtC,OAAIv3D,GAAY,iBAAAA,I,EACXyH,EAAAwjB,QAAA,QAAAjrB,EAAgB,6C,2CAAI,iBAApBA,EAAgB,OAAoBw3D,GAApCx3D,EAAgB,OAAhBs3D,Q,EAAA7vD,EAAMwjB,SAAA,8BAAA3tB,KAAAC,UAAAyC,EAAA,UADKA,C,KAGf,SAAAy3D,EAAAjI,EAAA+H,G,GAFI,c,EAAA,OAAAA,EAAgB,W,6KAAhBE,EAAA,2B,IAAA,EAAgBhwD,EAAAwjB,SAAA,iCAAAyd,G,eAGrB,I,mEAAAgvB,EAAiBtpB,aAAA,OAAA1F,EAClB,IAED4uB,EAFCI,EAEDroB,WAOA,uBAAAioB,EAAA5uB,EClpEA4uB,EAAA5uB,CASA,EAyCMivB,GAAqB,SAAA72B,EAAAwJ,EAAA8nB,EAAAmF,G,OACvBK,GACEttB,EAAA,IACE0sB,GAAA5E,EAAAtxB,GAAAy2B,E,EAYFM,GAAoB,SAAAvtB,EAAAklB,EAAA+H,GAExB,OAAIK,GAA+CttB,EAAA,IAAAwsB,GAAAtH,GAAA+H,E,WAK/CK,GAAgBttB,EAAAgtB,EAAAC,G,IAGlB5sB,EAFAmtB,EAAAxtB,EAAaiE,cAAKvpC,MAClBkpC,EAAQmpB,GAA+BS,EAASR,EAAY1jB,kBAAA,aAAA2jB,G,GAE5DjtB,EAAA8D,aAAW,CACZ,IACC2pB,EAAUztB,EAGNtqC,EAAAq3D,GAEIU,EAAA1oB,WAAAioB,EAAqBC,GAG/B,OAAAv3D,IAAA+3D,EAAA1oB,YAAYnB,IAAA6pB,EAAAxpB,cAA2CvpC,MAAC,IAAAoxC,GAAAp2C,EAAAi2C,GAAA/H,IACnD5D,CAOL,CAMA,IAAO0tB,EAAI1tB,EAcX,OAbDK,EAAAqtB,EAED9pB,IAAA8pB,EAAAzpB,cAAAvpC,QAAA2lC,EAIAA,EAASmO,eAAA,IAAA1C,GAAkClI,KACnC8pB,EAAWjkB,aAAAd,IAAe,SAAArE,EAAAE,G,qCAE3BC,IAAqBD,IAAcnE,EACtCA,EAAAuE,qBAAMN,EAAuBG,GAE/B,IACOpE,CAGT;;;;;;;;;;;;;;;;OAwDastB,GAAgB,SAAAC,I,uEAT3B,GAAgB,GAAAC,EAAA3uD,UAAiBtL,OAAC,YAAAsL,UAAA,GAAAA,UAAA,QAAA8gC,EAAA9gC,UAAAtL,OAAA,YAAAsL,UAAA,GAAAA,UAAA,I,0BAY9BnE,EAAK5I,E,CAAA6I,KAAA4yD,G,wBACPC,E,sBAWEC,GAAKnZ,EAAAoZ,G,uBACGn3B,GACam3B,EAAI,IAAAn3B,GAAAm3B,G,EAE3BpZ,EAAO71C,EAAK6lC,GAAcnO,GAC3B,O,GAAA,C,qDAEDw3B,WAAA,G,EACE,IAAIL,GAA6B7uD,EAAAmvD,EAAAzpB,G,UAC/BhO,G,sBAOame,G,SACf3U,KAAItqC,K,CAMR,SAASw4D,GAAAvZ,EAAkBj/C,GACzBi/C,EAAI3U,KAAAtqC,QAKLy4D,GAAAxZ,EAED,CAMC,SAAAyZ,GAAAzZ,GAED,OAAAA,EAAA3U,KAAAguB,WAAA,C,CA8BA,SAAAK,GAAA1Z,EAAAzb,G,EAeEyb,EAAA3U,KAAAiM,UAAA,SAAAqiB,EAEMpnB,GAEJhO,EAAG,IAAAy0B,GAAAW,EAAA3Z,EAAAzN,GACL,G,UAsBCqnB,GAAA5Z,EAAAzb,EAAAs1B,EAAAC,G,YAGDJ,GAAA1Z,GAAA,SAAgC+Z,GACjCH,GAAAG,EAAAx1B,GAAA,EAAAu1B,EAED,IAsBID,GAAGC,GAAAv1B,EAAAyb,E,UCnWCga,GAAOha,G,OAMR,IAAA/d,GAGJ,OADG+d,EAAAkZ,OACFlZ,EAAA5/C,KAAA45D,GAAAha,EAAAkZ,QAAA,IAAAlZ,EAAA5/C,K,CAIJ,SAAAo5D,GAAAxZ,GCnDA,OAAAA,EAAAkZ,QAsCE,SAAOlZ,EAAArQ,EAAAsqB,G,IACLC,EFqQH,SAAAla,GAED,YAAAr4C,IAAAwyD,GAAAna,KAAAyZ,GAAAzZ,E,CEvQWoa,CAAAH,G,GACL,EAAazxD,EAAKuiB,UAAAi1B,EAAA3U,KAAAiM,SAAA3H,G,GACnB0qB,UACDra,EAAA3U,KAAAiM,SAAA3H,GACJqQ,EAAA3U,KAAAguB,aC3CAG,GAAAxZ,I,SAyCa3U,KAAAiM,SAAA3H,G,2BAIA6pB,GAAkBxZ,G;;;;;;;;;;;;;;;;GD7C/Bsa,CAAAta,EAAAkZ,OAAAlZ,EAAA5/C,KAAA4/C,E,CCqGE,IAAAua,GAAqB,iCAWfC,GAEc,+B,GAMX,S,GACc,SAAA58D,G,MAKV,iBAATA,GAAqB,IAAAA,EAAAqB,SAAAs7D,GAA2CxqD,KAACnS,E,KAEnE,SAAAyiC,G,qDC9FHo6B,GAAuC,SAEVC,EAAA35D,EAAA8gC,EAAA15B,GAExBA,QAAqBR,IAAT5G,G,IAAkB,EAAAyH,EAAA8+C,aAAAoT,EAAA,SAAA35D,EAAA8gC,E,EAIF84B,GAAW,SAAAC,EAAAn7C,EAAAw4C,GAE7C,IAAAp2B,EAAAo2B,aAGah2B,GAAA,IAAA44B,GAA4C5C,EAAA2C,GAAA3C,EACvD,QAAetwD,IAAT8X,EAAS,UAAAhO,MAAAmpD,EAAoB,sBAAez3B,GAAAtB,IAClD,sBAAApiB,EAAA,UAAoBhO,MAACmpD,EAAgB,uBAGnCz3B,GACItB,GAAA,oBAAApiB,EAAA7P,Y,GAEJ6c,EACmBhN,GAAA,UAAAhO,MAAAmpD,EAAA,YAAAn7C,EAAA7P,WAAA,IAAAuzB,GAAAtB,I,GAGnB,iBAAApiB,KAAAxgB,OAAA67D,qBAAA,EAAAtyD,EAAAy6B,cAAAxjB,GAAAq7C,GAAA,UAAArpD,MAAAmpD,EAAA,kCAAAA,uBAAAz3B,GAAAtB,GAAA,MAAApiB,EAAA2N,UAAA,e,GAGA3N,GAAA,iBAAAA,EAAA,CACF,IAAAs7C,GAAA,EAE8BC,GAAA,E,GAEhC5jB,EAAA33B,GAAA,SAAA7hB,EAAAmD,GAKE,cAAAnD,EAAAm9D,GAAA,OACF,iBAAAn9D,GAAA,QAAAA,ICzEAo9D,GAAA,G,+JvDg0BsB93B,EACD+3B,I,GADC/3B,E,qBAGZA,EAAgBJ,aAAA,G,mCAEjBt6B,EAAAy6B,cAAAg4B,G,GACD/3B,G,mBAEAA,G,eAIA9tB,M,gBACA,EAAA5M,EAAAy6B,cAAAi4B,G,gBAGA,IAAKh4B,EAASJ,aAAA,E,olBqD1sBlB,SAEAzC,GCxIJ,OD8IEA,IACFA,IAAA1jB,QAAA,yBC/IAw+C,GAAA96B,EAyBA,C;;;;;;;;;;;;;;;;0nBEzBA,iBAAAh9B,eAAA,WAAAA,OAAA,yBA2BA+3D,OAAA,+F,smBjEsPMvqC,EAAYwqC,E,iNAAZxqC,E,YAAYwqC,E,mFAKT/pC,I,ylB0Do4DTvnB,GAFCA,E,oBAED,IA2BE,UAAAA,EAAY,YAAW,IAAAjK,MAAUkd,UAC1BjT,EA9BR,IAAAA,C,iNAvuCEopD,EAAAtxB,EAAAuqB,EAAAnnB,G,gCACF8vB,EAAAptC,EAAAka,KAAAqD,EAAAvd,EAAAud,QAEQwf,EAAAviB,GAEP4yB,EACsBlzB,GAIlBy5B,EAAwD9W,GAAA+W,WAAAnP,GAE1D,OAAAsK,GAA2BvD,EAAA4B,EADlB,IAAAyG,GAAkCra,GAAUjc,GAAAwf,EAAA4W,G,OAGtD,E,sIA/JH,SAAAnI,EAAAtxB,EAAAuqB,GASE,IAAAkP,EAAQ9W,GAAA+W,WAAAnP,GACR,OAAMiH,GAAsCF,EAAK,IAAKqI,G,WXrpBlD,E,YACD,EACDt2B,QAAM,KAINoc,QAAO,GW+oB6Czf,EAAAy5B,G,k5JC3XxC,SACdtb,EACAzb,EAAAs1B,GAGF,IADE4B,YAAiBvC,OACnB,OAAA7tB,GAAA,CCpbA,GAAA9G,EAAA8G,GAAA,SA8BEA,IAAA6tB,MACA,C;;;;;;;;;;;;;;;;4SnEqYC,oBAAA71D,eAAA4yB,UAAA5yB,OAAA4yB,SAAAvF,WAAA,IAAArtB,OAAA4yB,SAAAvF,SAAA5M,QAAA,WAAAiL,EAAA,6F,szHgBqToC8S,G,UACjC,G,oHAEM,G,q1GgDlqBV97B,I,aAUAusD,GAAA,mD,GACuBvsD,C,eCwXGA,I,IACzBimB,SAAAkrC,GAAA,mD;;;;;;;;;;;;;;;;;gnFQ7bH,IAOIwE,EACAC,EARAC,EAAU/6D,EAAAC,QAAiB,GAU/B,SAAS+6D,IACL,MAAM,IAAIpqD,MAAM,kC,CAEpB,SAASqqD,IACL,MAAM,IAAIrqD,MAAM,oC,CAsBpB,SAASsqD,EAAWC,GAChB,GAAIN,IAAqBxtC,WAErB,OAAOA,WAAW8tC,EAAK,GAG3B,IAAKN,IAAqBG,IAAqBH,IAAqBxtC,WAEhE,OADAwtC,EAAmBxtC,WACZA,WAAW8tC,EAAK,GAE3B,IAEI,OAAON,EAAiBM,EAAK,E,CAC/B,MAAMn5D,GACJ,IAEI,OAAO64D,EAAiB7rD,KAAK,KAAMmsD,EAAK,E,CAC1C,MAAMn5D,GAEJ,OAAO64D,EAAiB7rD,KAAKxJ,KAAM21D,EAAK,E,IAvCnD,WACG,IAEQN,EADsB,mBAAfxtC,WACYA,WAEA2tC,C,CAEzB,MAAOh5D,GACL64D,EAAmBG,C,CAEvB,IAEQF,EADwB,mBAAjB5mC,aACcA,aAEA+mC,C,CAE3B,MAAOhiC,GACL6hC,EAAqBG,C,CAE5B,CAnBA,GAwED,IAEIG,EAFAC,EAAQ,GACRC,GAAW,EAEXC,GAAa,EAEjB,SAASC,IACAF,GAAaF,IAGlBE,GAAW,EACPF,EAAah9D,OACbi9D,EAAQD,EAAa79D,OAAO89D,GAE5BE,GAAa,EAEbF,EAAMj9D,QACNq9D,I,CAIR,SAASA,IACL,IAAIH,EAAJ,CAGA,IAAIhuC,EAAU4tC,EAAWM,GACzBF,GAAW,EAGX,IADA,IAAI/sD,EAAM8sD,EAAMj9D,OACVmQ,GAAK,CAGP,IAFA6sD,EAAeC,EACfA,EAAQ,KACCE,EAAahtD,GACd6sD,GACAA,EAAaG,GAAYG,MAGjCH,GAAa,EACbhtD,EAAM8sD,EAAMj9D,M,CAEhBg9D,EAAe,KACfE,GAAW,EAnEf,SAAyBK,GACrB,GAAIb,IAAuB5mC,aAEvB,OAAOA,aAAaynC,GAGxB,IAAKb,IAAuBG,IAAwBH,IAAuB5mC,aAEvE,OADA4mC,EAAqB5mC,aACdA,aAAaynC,GAExB,IAEWb,EAAmBa,E,CAC5B,MAAO35D,GACL,IAEI,OAAO84D,EAAmB9rD,KAAK,KAAM2sD,E,CACvC,MAAO35D,GAGL,OAAO84D,EAAmB9rD,KAAKxJ,KAAMm2D,E,GAgD7CC,CAAgBtuC,EAnBZ,C,CAoCR,SAASuuC,EAAKV,EAAKhnB,GACf3uC,KAAK21D,IAAMA,EACX31D,KAAK2uC,MAAQA,C,CAYjB,SAAS2nB,IAAO,CA5BhBf,EAAQgB,SAAW,SAAUZ,GACzB,IAAIxtD,EAAO,IAAIS,MAAM1E,UAAUtL,OAAS,GACxC,GAAIsL,UAAUtL,OAAS,EACnB,IAAK,IAAIsC,EAAI,EAAGA,EAAIgJ,UAAUtL,OAAQsC,IAClCiN,EAAKjN,EAAI,GAAKgJ,UAAUhJ,GAGhC26D,EAAMj+D,KAAK,IAAIy+D,EAAKV,EAAKxtD,IACJ,IAAjB0tD,EAAMj9D,QAAiBk9D,GACvBJ,EAAWO,E,EASnBI,EAAK56D,UAAUy6D,IAAM,WACjBl2D,KAAK21D,IAAI1wD,MAAM,KAAMjF,KAAK2uC,M,EAE9B4mB,EAAQp7D,MAAQ,UAChBo7D,EAAQiB,SAAU,EAClBjB,EAAQjiC,IAAM,GACdiiC,EAAQkB,KAAO,GACflB,EAAQ31C,QAAU,GAClB21C,EAAQmB,SAAW,GAInBnB,EAAQv3B,GAAKs4B,EACbf,EAAQoB,YAAcL,EACtBf,EAAQqB,KAAON,EACff,EAAQsB,IAAMP,EACdf,EAAQuB,eAAiBR,EACzBf,EAAQwB,mBAAqBT,EAC7Bf,EAAQyB,KAAOV,EACff,EAAQ0B,gBAAkBX,EAC1Bf,EAAQ2B,oBAAsBZ,EAE9Bf,EAAQh7B,UAAY,SAAUxgC,GAAQ,MAAO,E,EAE7Cw7D,EAAQ4B,QAAU,SAAUp9D,GACxB,MAAM,IAAIqR,MAAM,mC,EAGpBmqD,EAAQ6B,IAAM,WAAc,MAAO,G,EACnC7B,EAAQ8B,MAAQ,SAAUC,GACtB,MAAM,IAAIlsD,MAAM,iC,EAEpBmqD,EAAQgC,MAAQ,WAAa,OAAO,C,uCCvLrB,SAAAC,EAAuBz9D,EAAMqE,EAAOq5D,GAKjD,SAJW,cAIC/tD,KAAK3P,IAHL,uCAGuB2P,KAAKtL,IAF9B,kBAE+CsL,KAAK+tD,MAG9Dp/D,QAAQC,IAAIyB,GACZ1B,QAAQC,IAAI8F,GACZ/F,QAAQC,IAAIm/D,IACL,E,oFCXM,SAAAC,IACb/3D,eAAe+5C,QAIf1gD,SAASC,cAAc,mBAAmBwD,UAAUC,OAAO,UAC3D1D,SAASmD,eAAe,qBAAqBjD,UAAY,E,oFCN3D9B,EAAA,S,wDAQA4B,SAASuD,iBAAiB,oBAAoB,WAE/BvD,SAASC,cAAc,qBACtBD,SAASC,cAAc,sBAC5BD,SAASC,cAAc,gBACxBD,SAASC,cAAc,SACvBD,SAASC,cAAc,SAa/B,IAOM0+D,EAAa,W,IAACn7D,EAAC0H,UAAAtL,OAAA,YAAAsL,UAAA,IAAAA,UAAA,GACf1H,IACFA,EAAEo7D,kBACFp7D,EAAE0B,kBAEJlF,SACGmD,eAAe,cACf07D,QAAQ,kBACRp7D,UAAUC,OAAO,S,EA+EtB1D,SAASuD,iBAAiB,SA5ER,SAAAC,GAChB,IAAKA,EAAExB,OAAO68D,QAAQ,sBACpB,OAAO,EAET,IAAMC,EAAgBt7D,EAAExB,OAAO68D,QAAQ,UAAUE,QAAQx+D,IACzD,EAAAy+D,EAAAr9D,SAAgBs9D,EAAAt9D,QAASm9D,GAAe/4D,MAAK,SAAAqa,GAC3C,IAlCsB8+C,EAmCpBr+D,EAQEuf,EARFvf,OACAM,EAOEif,EAPFjf,MACAC,EAMEgf,EANFhf,aACA+9D,EAKE/+C,EALF++C,WACAj+D,EAIEkf,EAJFlf,YACAk+D,EAGEh/C,EAHFg/C,WACAC,EAEEj/C,EAFFi/C,eACAC,EACEl/C,EADFk/C,SAEIC,EAAY,qLAIqExgE,OAArBmC,EAAY,WAIlDnC,OAJ2DoC,EAAM,2GAQvBpC,OAJ1CoC,EAAM,kOAI6DpC,OAAzBqC,EAAa,cAIzCrC,OAJqDogE,EAAW,gLAQlDpgE,OAJdqgE,EAAW,kMAQXrgE,OAJcsgE,EAAe,2KASpCtgE,QAzEbmgE,EAoEqCr+D,EAnEtDq+D,EACJr/D,KAAI,SAAAiB,GACH,OAAOA,EAAYC,I,IAEpBhB,KAAK,OA+D6D,uKAS3DhB,OAJ2BugE,EAAS,gGAM1CvgE,OAFMygE,EAAAlhE,KAAKmhE,qBAAqBr/C,EAAK7f,IAAI,GACpC,oEAICxB,OAHNygE,EAAAlhE,KAAKmhE,qBAAqBr/C,EAAK7f,IAAI,GACpC,+CAICxB,OAFMygE,EAAAlhE,KAAKohE,mBAAmBt/C,EAAK7f,IAAI,GAClC,kDAENxB,OADCygE,EAAAlhE,KAAKohE,mBAAmBt/C,EAAK7f,IAAI,GAClC,wEAMwBP,SAASmD,eAAe,cAEhCjD,UAAYq/D,EAC7Bv/D,SAASmD,eAAe,WAAWI,iBAAiB,SAAS,SAAA6jB,IAC3D,EAAAu4C,EAAAC,aAAYx4C,EAAOhH,E,IAErBpgB,SAASmD,eAAe,SAASI,iBAAiB,SAAS,SAAA6jB,IACzD,EAAAu4C,EAAAE,aAAYz4C,EAAOhH,E,IAvFvBpgB,SACGmD,eAAe,cACf07D,QAAQ,kBACRp7D,UAAUG,IAAI,S,OA4FnB5D,SAASmD,eAAe,aAAaI,iBAAiB,QAASo7D,GAC/D3+D,SAASuD,iBAAiB,SAAS,SAAAC,GAC7BA,EAAExB,OAAOyB,UAAUioB,SAAS,kBAC9BizC,G,IAIJ3+D,SAASuD,iBAAiB,WAAW,SAAAC,GACpB,WAAXA,EAAEc,MACJq6D,G,4CCpINn9D,EAAAC,QAAiBrD,EAAA,Q,sCCAjB,a,wDAiCA,IAAI0hE,EAnBJ,SAASC,EAAeC,GACtB,IAAInuD,EAAU,IAAIouD,EAAMD,GACpBp+D,EAAWs+D,EAAKD,EAAMx9D,UAAU2c,QAASvN,GAa7C,OAVAsuD,EAAAC,OAAax+D,EAAUq+D,EAAMx9D,UAAWoP,GAGxCsuD,EAAAC,OAAax+D,EAAUiQ,GAGvBjQ,EAASoI,OAAS,SAAgBq2D,GAChC,OAAON,EAAeO,EAAYN,EAAeK,G,EAG5Cz+D,C,CAIGm+D,C,YAGZD,EAAMS,MAAQN,EAGdH,EAAMU,cAAgBpiE,EAAA,SACtB0hE,EAAMW,YAAcriE,EAAA,SACpB0hE,EAAMY,SAAWtiE,EAAA,SACjB0hE,EAAMa,QAAUviE,EAAA,SAAAwoB,QAChBk5C,EAAMc,WAAaxiE,EAAA,SAGnB0hE,EAAMe,WAAaziE,EAAA,SAGnB0hE,EAAMgB,OAAShB,EAAMU,cAGrBV,EAAMphE,IAAM,SAAaqiE,GACvB,OAAO/xD,QAAQtQ,IAAIqiE,E,EAErBjB,EAAMkB,OAAS5iE,EAAA,SAGf0hE,EAAMmB,aAAe7iE,EAAA,SAErBoD,EAAAC,QAAiBq+D,EAGjBt+D,EAAAC,QAAeE,QAAUm+D,C,sCC/DzB,a,IASuBpP,E,aAHnBwQ,EAAW5/D,OAAOmB,UAAU8N,SAG5B4wD,GAAmBzQ,EAMpBpvD,OAAO0I,OAAO,MAJR,SAASqY,GACd,IAAIhI,EAAM6mD,EAAS1wD,KAAK6R,GACxB,OAAOquC,EAAMr2C,KAASq2C,EAAMr2C,GAAOA,EAAIpZ,MAAM,GAAG,GAAIytB,c,GAIxD,SAAS0yC,EAAWruD,GAElB,OADAA,EAAOA,EAAK2b,cACL,SAAkBrM,GACvB,OAAO8+C,EAAO9+C,KAAWtP,C,EAU7B,SAASsuD,EAAQ36D,GACf,OAAOkJ,MAAMC,QAAQnJ,E,CASvB,SAAS46D,EAAY56D,GACnB,YAAsB,IAARA,C,CAqBhB,IAAI66D,EAAgBH,EAAW,eA6C/B,SAASI,EAAS96D,GAChB,OAAe,OAARA,GAA+B,iBAARA,C,CAShC,SAAS+6D,EAAc/6D,GACrB,GAAoB,WAAhBy6D,EAAOz6D,GACT,OAAO,EAGT,IAAIjE,EAAYnB,OAAOgS,eAAe5M,GACtC,OAAqB,OAAdjE,GAAsBA,IAAcnB,OAAOmB,S,CAUpD,IAAIi/D,EAASN,EAAW,QASpBO,EAASP,EAAW,QASpBQ,EAASR,EAAW,QASpBS,EAAaT,EAAW,YAQ5B,SAASU,EAAWp7D,GAClB,MAA8B,sBAAvBw6D,EAAS1wD,KAAK9J,E,CAkCvB,IAAIq7D,EAAoBX,EAAW,mBAmDnC,SAASY,EAAQ5yD,EAAKH,GAEpB,GAAIG,QAUJ,GALmB,iBAARA,IAETA,EAAM,CAACA,IAGLiyD,EAAQjyD,GAEV,IAAK,IAAIlN,EAAI,EAAG+/D,EAAI7yD,EAAIxP,OAAQsC,EAAI+/D,EAAG//D,IACrC+M,EAAGuB,KAAK,KAAMpB,EAAIlN,GAAIA,EAAGkN,QAI3B,IAAK,IAAI7Q,KAAO6Q,EACV9N,OAAOmB,UAAUqO,eAAeN,KAAKpB,EAAK7Q,IAC5C0Q,EAAGuB,KAAK,KAAMpB,EAAI7Q,GAAMA,EAAK6Q,E,CA4JrC,IAA6B8yD,EAAzBC,GAAyBD,EAKJ,oBAAfE,YAA8B9gE,OAAOgS,eAAe8uD,YAHrD,SAAS//C,GACd,OAAO6/C,GAAc7/C,aAAiB6/C,C,GAI1C1gE,EAAAC,QAAiB,CACfoO,QAASwxD,EACTgB,cAAed,EACfe,SAvYF,SAAkB57D,GAChB,OAAe,OAARA,IAAiB46D,EAAY56D,IAA4B,OAApBA,EAAI+J,cAAyB6wD,EAAY56D,EAAI+J,cAChD,mBAA7B/J,EAAI+J,YAAY6xD,UAA2B57D,EAAI+J,YAAY6xD,SAAS57D,E,EAsYhF67D,WA9PF,SAAoBlgD,GAClB,IAAImgD,EAAU,oBACd,OAAOngD,IACgB,mBAAbogD,UAA2BpgD,aAAiBogD,UACpDvB,EAAS1wD,KAAK6R,KAAWmgD,GACxBV,EAAWz/C,EAAM9R,WAAa8R,EAAM9R,aAAeiyD,E,EA0PtDE,kBApXF,SAA2Bh8D,GAOzB,MAL4B,oBAAhBi8D,aAAiCA,YAAYC,OAC9CD,YAAYC,OAAOl8D,GAEnBA,GAAUA,EAAIm8D,QAAYtB,EAAc76D,EAAIm8D,O,EAgXvDC,SArWF,SAAkBp8D,GAChB,MAAsB,iBAARA,C,EAqWdq8D,SA5VF,SAAkBr8D,GAChB,MAAsB,iBAARA,C,EA4Vds8D,SAAUxB,EACVyB,cAAexB,EACfyB,YAAa5B,EACb6B,OAAQzB,EACR0B,OAAQzB,EACR0B,OAAQzB,EACR0B,WAAYxB,EACZyB,SAnRF,SAAkB78D,GAChB,OAAO86D,EAAS96D,IAAQo7D,EAAWp7D,EAAI88D,K,EAmRvCC,kBAAmB1B,EACnB2B,qBAjOF,WACE,OAAyB,oBAAd5kD,WAAoD,gBAAtBA,UAAU6kD,SACY,iBAAtB7kD,UAAU6kD,SACY,OAAtB7kD,UAAU6kD,WAI/B,oBAAX3/D,QACa,oBAAbhE,S,EA0NT0T,QAASsuD,EACTlY,MA/JF,SAAS8Z,IACP,IAAIr2D,EAAS,GACb,SAASs2D,EAAYn9D,EAAKnI,GACpBkjE,EAAcl0D,EAAOhP,KAASkjE,EAAc/6D,GAC9C6G,EAAOhP,GAAOqlE,EAAMr2D,EAAOhP,GAAMmI,GACxB+6D,EAAc/6D,GACvB6G,EAAOhP,GAAOqlE,EAAM,GAAIl9D,GACf26D,EAAQ36D,GACjB6G,EAAOhP,GAAOmI,EAAIzF,QAElBsM,EAAOhP,GAAOmI,C,CAIlB,IAAK,IAAIxE,EAAI,EAAG+/D,EAAI/2D,UAAUtL,OAAQsC,EAAI+/D,EAAG//D,IAC3C8/D,EAAQ92D,UAAUhJ,GAAI2hE,GAExB,OAAOt2D,C,EA+IP6yD,OApIF,SAAgB/+C,EAAGC,EAAGwiD,GAQpB,OAPA9B,EAAQ1gD,GAAG,SAAqB5a,EAAKnI,GAEjC8iB,EAAE9iB,GADAulE,GAA0B,mBAARp9D,EACXw5D,EAAKx5D,EAAKo9D,GAEVp9D,C,IAGN2a,C,EA6HP0iD,KAxPF,SAAc1pD,GACZ,OAAOA,EAAI0pD,KAAO1pD,EAAI0pD,OAAS1pD,EAAIiD,QAAO,aAAe,G,EAwPzD0mD,SArHF,SAAkBC,GAIhB,OAH8B,QAA1BA,EAAQxpD,WAAW,KACrBwpD,EAAUA,EAAQhjE,MAAM,IAEnBgjE,C,EAkHPC,SAvGF,SAAkBzzD,EAAa0zD,EAAkBliE,EAAOmiE,GACtD3zD,EAAYhO,UAAYnB,OAAO0I,OAAOm6D,EAAiB1hE,UAAW2hE,GAClE3zD,EAAYhO,UAAUgO,YAAcA,EACpCxO,GAASX,OAAOgI,OAAOmH,EAAYhO,UAAWR,E,EAqG9CoiE,aA1FF,SAAsBC,EAAWC,EAAS7rD,GACxC,IAAIzW,EACAC,EACA0b,EACA4mD,EAAS,GAEbD,EAAUA,GAAW,GAErB,EAAG,CAGD,IADAriE,GADAD,EAAQX,OAAOmjE,oBAAoBH,IACzB1kE,OACHsC,KAAM,GAENsiE,EADL5mD,EAAO3b,EAAMC,MAEXqiE,EAAQ3mD,GAAQ0mD,EAAU1mD,GAC1B4mD,EAAO5mD,IAAQ,GAGnB0mD,EAAYhjE,OAAOgS,eAAegxD,E,OAC3BA,KAAe5rD,GAAUA,EAAO4rD,EAAWC,KAAaD,IAAchjE,OAAOmB,WAEtF,OAAO8hE,C,EAsEPG,OAAQvD,EACRwD,WAAYvD,EACZwD,SA9DF,SAAkBvqD,EAAKwqD,EAAc/gE,GACnCuW,EAAM+B,OAAO/B,SACI/R,IAAbxE,GAA0BA,EAAWuW,EAAIza,UAC3CkE,EAAWuW,EAAIza,QAEjBkE,GAAY+gE,EAAajlE,OACzB,IAAIklE,EAAYzqD,EAAIoK,QAAQogD,EAAc/gE,GAC1C,OAAqB,IAAdghE,GAAoBA,IAAchhE,C,EAwDzCihE,QA/CF,SAAiB1iD,GACf,IAAKA,EAAO,OAAO,KACnB,IAAIngB,EAAImgB,EAAMziB,OACd,GAAI0hE,EAAYp/D,GAAI,OAAO,KAE3B,IADA,IAAImN,EAAM,IAAIO,MAAM1N,GACbA,KAAM,GACXmN,EAAInN,GAAKmgB,EAAMngB,GAEjB,OAAOmN,C,EAwCP21D,aAAc7C,EACd8C,WAAYpD,E,sCCpdd,aAEArgE,EAAAC,QAAiB,SAAcwN,EAAI60D,GACjC,OAAO,WAEL,IADA,IAAI30D,EAAO,IAAIS,MAAM1E,UAAUtL,QACtBsC,EAAI,EAAGA,EAAIiN,EAAKvP,OAAQsC,IAC/BiN,EAAKjN,GAAKgJ,UAAUhJ,GAEtB,OAAO+M,EAAGhD,MAAM63D,EAAS30D,E,wCCR7B,a,+FAUI+1D,EAAaC,EAAAC,WAMjB,SAASC,EAAMhF,GACbr5D,KAAKs+D,SAAWjF,EAChBr5D,KAAKu+D,aAAe,CAClBnmD,QAAS,IAAIomD,EACb99B,SAAU,IAAI89B,E,CASlBH,EAAM5iE,UAAU2c,QAAU,SAAiBqmD,EAAaC,GAG3B,iBAAhBD,GACTC,EAASA,GAAU,IACZ9sC,IAAM6sC,EAEbC,EAASD,GAAe,IAG1BC,EAASpF,EAAYt5D,KAAKs+D,SAAUI,IAGzBxzD,OACTwzD,EAAOxzD,OAASwzD,EAAOxzD,OAAOwc,cACrB1nB,KAAKs+D,SAASpzD,OACvBwzD,EAAOxzD,OAASlL,KAAKs+D,SAASpzD,OAAOwc,cAErCg3C,EAAOxzD,OAAS,MAGlB,IAAIyzD,EAAeD,EAAOC,kBAELr9D,IAAjBq9D,GACFR,EAAAS,cAAwBD,EAAc,CACpCE,kBAAmBX,EAAWS,aAAaT,EAAWY,SACtDC,kBAAmBb,EAAWS,aAAaT,EAAWY,SACtDE,oBAAqBd,EAAWS,aAAaT,EAAWY,WACvD,GAIL,IAAIG,EAA0B,GAC1BC,GAAiC,EACrCl/D,KAAKu+D,aAAanmD,QAAQ1L,SAAQ,SAAoCyyD,GACjC,mBAAxBA,EAAYC,UAA0D,IAAhCD,EAAYC,QAAQV,KAIrEQ,EAAiCA,GAAkCC,EAAYE,YAE/EJ,EAAwBK,QAAQH,EAAYI,UAAWJ,EAAYK,U,IAGrE,IAKIxuD,EALAyuD,EAA2B,GAO/B,GANAz/D,KAAKu+D,aAAa79B,SAASh0B,SAAQ,SAAkCyyD,GACnEM,EAAyB7nE,KAAKunE,EAAYI,UAAWJ,EAAYK,S,KAK9DN,EAAgC,CACnC,IAAIQ,EAAQ,CAACC,OAAiBr+D,GAM9B,IAJAsH,MAAMnN,UAAU6jE,QAAQr6D,MAAMy6D,EAAOT,GACrCS,EAAQA,EAAM3nE,OAAO0nE,GAErBzuD,EAAUhJ,QAAQP,QAAQi3D,GACnBgB,EAAM9mE,QACXoY,EAAUA,EAAQjS,KAAK2gE,EAAMr+C,QAASq+C,EAAMr+C,SAG9C,OAAOrQ,C,CAKT,IADA,IAAI4uD,EAAYlB,EACTO,EAAwBrmE,QAAQ,CACrC,IAAIinE,EAAcZ,EAAwB59C,QACtCy+C,EAAab,EAAwB59C,QACzC,IACEu+C,EAAYC,EAAYD,E,CACxB,MAAO73D,GACP+3D,EAAW/3D,GACX,K,EAIJ,IACEiJ,EAAU2uD,EAAgBC,E,CAC1B,MAAO73D,GACP,OAAOC,QAAQN,OAAOK,E,CAGxB,KAAO03D,EAAyB7mE,QAC9BoY,EAAUA,EAAQjS,KAAK0gE,EAAyBp+C,QAASo+C,EAAyBp+C,SAGpF,OAAOrQ,C,EAGTqtD,EAAM5iE,UAAUskE,OAAS,SAAgBrB,GACvCA,EAASpF,EAAYt5D,KAAKs+D,SAAUI,GACpC,IAAIsB,EAAWC,EAAcvB,EAAOwB,QAASxB,EAAO9sC,KACpD,OAAOuuC,EAASH,EAAUtB,EAAOljD,OAAQkjD,EAAO0B,iB,EAIlDjH,EAAAzsD,QAAc,CAAC,SAAU,MAAO,OAAQ,YAAY,SAA6BxB,GAE/EmzD,EAAM5iE,UAAUyP,GAAU,SAAS0mB,EAAK8sC,GACtC,OAAO1+D,KAAKoY,QAAQkhD,EAAYoF,GAAU,GAAI,CAC5CxzD,OAAQA,EACR0mB,IAAKA,EACLxY,MAAOslD,GAAU,IAAItlD,O,KAK3B+/C,EAAAzsD,QAAc,CAAC,OAAQ,MAAO,UAAU,SAA+BxB,GAGrE,SAASm1D,EAAmBC,GAC1B,OAAO,SAAoB1uC,EAAKxY,EAAMslD,GACpC,OAAO1+D,KAAKoY,QAAQkhD,EAAYoF,GAAU,GAAI,CAC5CxzD,OAAQA,EACRgoB,QAASotC,EAAS,CAChB,eAAgB,uBACd,GACJ1uC,IAAKA,EACLxY,KAAMA,I,EAKZilD,EAAM5iE,UAAUyP,GAAUm1D,IAE1BhC,EAAM5iE,UAAUyP,EAAS,QAAUm1D,GAAmB,E,IAGxD7lE,EAAAC,QAAiB4jE,C,sCC/JjB,a,iBAIA,SAASkC,EAAO7gE,GACd,OAAOic,mBAAmBjc,GACxB4W,QAAO,QAAU,KACjBA,QAAO,OAAS,KAChBA,QAAO,QAAU,KACjBA,QAAO,OAAS,KAChBA,QAAO,QAAU,KACjBA,QAAO,QAAU,I,CAUrB9b,EAAAC,QAAiB,SAAkBm3B,EAAKpW,EAAQ4kD,GAE9C,IAAK5kD,EACH,OAAOoW,EAGT,IAAI4uC,EACJ,GAAIJ,EACFI,EAAmBJ,EAAiB5kD,QAC/B,GAAI29C,EAAAsD,kBAAwBjhD,GACjCglD,EAAmBhlD,EAAOjS,eACrB,CACL,IAAIwQ,EAAQ,GAEZo/C,EAAAzsD,QAAc8O,GAAQ,SAAmB9b,EAAKnI,GACxCmI,UAIAy5D,EAAAtwD,QAAcnJ,GAChBnI,GAAY,KAEZmI,EAAM,CAACA,GAGTy5D,EAAAzsD,QAAchN,GAAK,SAAoBsnB,GACjCmyC,EAAAgD,OAAan1C,GACfA,EAAIA,EAAE/H,cACGk6C,EAAA6C,SAAeh1C,KACxBA,EAAIhvB,KAAKC,UAAU+uB,IAErBjN,EAAMniB,KAAK2oE,EAAOhpE,GAAO,IAAMgpE,EAAOv5C,G,QAI1Cw5C,EAAmBzmD,EAAMhhB,KAAK,I,CAGhC,GAAIynE,EAAkB,CACpB,IAAIC,EAAgB7uC,EAAInU,QAAQ,MACV,IAAlBgjD,IACF7uC,EAAMA,EAAI33B,MAAM,EAAGwmE,IAGrB7uC,KAA6B,IAArBA,EAAInU,QAAQ,KAAc,IAAM,KAAO+iD,C,CAGjD,OAAO5uC,C,uCCpET,a,iBAIA,SAAS8uC,IACP1gE,KAAK2gE,SAAW,E,CAWlBD,EAAmBjlE,UAAUmlE,IAAM,SAAarB,EAAWC,EAAUj9D,GAOnE,OANAvC,KAAK2gE,SAAS/oE,KAAK,CACjB2nE,UAAWA,EACXC,SAAUA,EACVH,cAAa98D,GAAUA,EAAQ88D,YAC/BD,QAAS78D,EAAUA,EAAQ68D,QAAU,OAEhCp/D,KAAK2gE,SAAS/nE,OAAS,C,EAQhC8nE,EAAmBjlE,UAAUolE,MAAQ,SAAetnE,GAC9CyG,KAAK2gE,SAASpnE,KAChByG,KAAK2gE,SAASpnE,GAAM,K,EAYxBmnE,EAAmBjlE,UAAUiR,QAAU,SAAiBzE,GACtDkxD,EAAAzsD,QAAc1M,KAAK2gE,UAAU,SAAwBG,GACzC,OAANA,GACF74D,EAAG64D,E,KAKTtmE,EAAAC,QAAiBimE,C,sCCrDjB,a,qEAWA,SAASK,EAA6BrC,GAKpC,GAJIA,EAAOsC,aACTtC,EAAOsC,YAAYC,mBAGjBvC,EAAOwC,QAAUxC,EAAOwC,OAAOC,QACjC,MAAM,IAAIC,C,CAUd5mE,EAAAC,QAAiB,SAAyBikE,GA8BxC,OA7BAqC,EAA6BrC,GAG7BA,EAAOxrC,QAAUwrC,EAAOxrC,SAAW,GAGnCwrC,EAAOtlD,KAAOioD,EAAA73D,KACZk1D,EACAA,EAAOtlD,KACPslD,EAAOxrC,QACPwrC,EAAO4C,kBAIT5C,EAAOxrC,QAAUimC,EAAArW,MACf4b,EAAOxrC,QAAQquC,QAAU,GACzB7C,EAAOxrC,QAAQwrC,EAAOxzD,SAAW,GACjCwzD,EAAOxrC,SAGTimC,EAAAzsD,QACE,CAAC,SAAU,MAAO,OAAQ,OAAQ,MAAO,QAAS,WAClD,SAA2BxB,UAClBwzD,EAAOxrC,QAAQhoB,E,KAIZwzD,EAAO8C,SAAWC,EAAAD,SAEjB9C,GAAQ3/D,MAAK,SAA6B2hC,GAWvD,OAVAqgC,EAA6BrC,GAG7Bh+B,EAAStnB,KAAOioD,EAAA73D,KACdk1D,EACAh+B,EAAStnB,KACTsnB,EAASxN,QACTwrC,EAAOgD,mBAGFhhC,C,IACN,SAA4B5G,GAe7B,OAdK6nC,EAAS7nC,KACZinC,EAA6BrC,GAGzB5kC,GAAUA,EAAO4G,WACnB5G,EAAO4G,SAAStnB,KAAOioD,EAAA73D,KACrBk1D,EACA5kC,EAAO4G,SAAStnB,KAChB0gB,EAAO4G,SAASxN,QAChBwrC,EAAOgD,qBAKN15D,QAAQN,OAAOoyB,E,0CCpF1B,a,8BAaAt/B,EAAAC,QAAiB,SAAuB2e,EAAM8Z,EAAS0uC,GACrD,IAAI/2D,EAAU7K,MAAQyhE,EAMtB,OAJAtI,EAAAzsD,QAAck1D,GAAK,SAAmB35D,GACpCmR,EAAOnR,EAAGuB,KAAKqB,EAASuO,EAAM8Z,E,IAGzB9Z,C,uCCpBT,a,kFAQIyoD,EAAuB,CACzB,eAAgB,qCAGlB,SAASC,EAAsB5uC,EAASx4B,IACjCy+D,EAAA+C,YAAkBhpC,IAAYimC,EAAA+C,YAAkBhpC,EAAQ,mBAC3DA,EAAQ,gBAAkBx4B,E,CA+B9B,IA1BM8mE,EA0BFO,EAAW,CAEbpD,aAAcqD,EAEdR,UA7B8B,oBAAnBvoB,qBAGmB,IAAZ9lB,GAAuE,qBAA5C74B,OAAOmB,UAAU8N,SAASC,KAAK2pB,MAD1EquC,EAAUpqE,EAAA,UAKLoqE,GAwBPF,iBAAkB,CAAC,SAA0BloD,EAAM8Z,GAIjD,GAHA+uC,EAAoB/uC,EAAS,UAC7B+uC,EAAoB/uC,EAAS,gBAEzBimC,EAAAoC,WAAiBniD,IACnB+/C,EAAAkC,cAAoBjiD,IACpB+/C,EAAAmC,SAAeliD,IACf+/C,EAAAoD,SAAenjD,IACf+/C,EAAAiD,OAAahjD,IACb+/C,EAAAkD,OAAajjD,GAEb,OAAOA,EAET,GAAI+/C,EAAAuC,kBAAwBtiD,GAC1B,OAAOA,EAAKyiD,OAEd,GAAI1C,EAAAsD,kBAAwBrjD,GAE1B,OADA0oD,EAAsB5uC,EAAS,mDACxB9Z,EAAK7P,WAGd,IAGI00D,EAHAiE,EAAkB/I,EAAA6C,SAAe5iD,GACjC+oD,EAAcjvC,GAAWA,EAAQ,gBAIrC,IAAK+qC,EAAa9E,EAAA8E,WAAiB7kD,KAAW8oD,GAAmC,wBAAhBC,EAAwC,CACvG,IAAIC,EAAYpiE,KAAKszB,KAAOtzB,KAAKszB,IAAImoC,SACrC,OAAO4G,EAAWpE,EAAa,CAAC,UAAW7kD,GAAQA,EAAMgpD,GAAa,IAAIA,E,CACrE,OAAIF,GAAmC,qBAAhBC,GAC5BL,EAAsB5uC,EAAS,oBAnDrC,SAAyBovC,EAAUC,EAAQC,GACzC,GAAIrJ,EAAA2C,SAAewG,GACjB,IAEE,OADCC,GAAUvqE,KAAKmB,OAAOmpE,GAChBnJ,EAAA4D,KAAWuF,E,CAClB,MAAO9lE,GACP,GAAe,gBAAXA,EAAEzC,KACJ,MAAMyC,C,CAKZ,OAAQgmE,GAAWxqE,KAAKC,WAAWqqE,E,CAwCxBG,CAAgBrpD,IAGlBA,C,GAGTsoD,kBAAmB,CAAC,SAA2BtoD,GAC7C,IAAIulD,EAAe3+D,KAAK2+D,cAAgBoD,EAASpD,aAC7CE,EAAoBF,GAAgBA,EAAaE,kBACjDE,EAAoBJ,GAAgBA,EAAaI,kBACjD2D,GAAqB7D,GAA2C,SAAtB7+D,KAAK2iE,aAEnD,GAAID,GAAsB3D,GAAqB5F,EAAA2C,SAAe1iD,IAASA,EAAKxgB,OAC1E,IACE,OAAOZ,KAAKmB,MAAMigB,E,CAClB,MAAO5c,GACP,GAAIkmE,EAAmB,CACrB,GAAe,gBAAXlmE,EAAEzC,KACJ,MAAM6oE,EAAA15D,KAAgB1M,EAAGomE,EAAAC,iBAA6B7iE,KAAM,KAAMA,KAAK0gC,UAEzE,MAAMlkC,C,EAKZ,OAAO4c,C,GAOT0O,QAAS,EAETg7C,eAAgB,aAChBC,eAAgB,eAEhBC,kBAAkB,EAClBC,eAAe,EAEf3vC,IAAK,CACHmoC,SAAUrkE,EAAA,UAGZ8rE,eAAgB,SAAwBxjC,GACtC,OAAOA,GAAU,KAAOA,EAAS,G,EAGnCxM,QAAS,CACPquC,OAAQ,CACN4B,OAAU,uCAKhBhK,EAAAzsD,QAAc,CAAC,SAAU,MAAO,SAAS,SAA6BxB,GACpE62D,EAAS7uC,QAAQhoB,GAAU,E,IAG7BiuD,EAAAzsD,QAAc,CAAC,OAAQ,MAAO,UAAU,SAA+BxB,GACrE62D,EAAS7uC,QAAQhoB,GAAUiuD,EAAArW,MAAY+e,E,IAGzCrnE,EAAAC,QAAiBsnE,C,sCCjJjB,a,iBAIAvnE,EAAAC,QAAiB,SAA6By4B,EAASkwC,GACrDjK,EAAAzsD,QAAcwmB,GAAS,SAAuBx4B,EAAOX,GAC/CA,IAASqpE,GAAkBrpE,EAAKspE,gBAAkBD,EAAeC,gBACnEnwC,EAAQkwC,GAAkB1oE,SACnBw4B,EAAQn5B,G,0CCRrB,a,iBAcA,SAASupE,EAAWt+D,EAAS1H,EAAMohE,EAAQtmD,EAASsoB,GAClDt1B,MAAM5B,KAAKxJ,MACXA,KAAKgF,QAAUA,EACfhF,KAAKjG,KAAO,aACZuD,IAAS0C,KAAK1C,KAAOA,GACrBohE,IAAW1+D,KAAK0+D,OAASA,GACzBtmD,IAAYpY,KAAKoY,QAAUA,GAC3BsoB,IAAa1gC,KAAK0gC,SAAWA,E,CAG/By4B,EAAA+D,SAAeoG,EAAYl4D,MAAO,CAChCm4D,OAAQ,WACN,MAAO,CAELv+D,QAAShF,KAAKgF,QACdjL,KAAMiG,KAAKjG,KAEXypE,YAAaxjE,KAAKwjE,YAClBC,OAAQzjE,KAAKyjE,OAEbC,SAAU1jE,KAAK0jE,SACfC,WAAY3jE,KAAK2jE,WACjBC,aAAc5jE,KAAK4jE,aACnBjzC,MAAO3wB,KAAK2wB,MAEZ+tC,OAAQ1+D,KAAK0+D,OACbphE,KAAM0C,KAAK1C,KACXoiC,OAAQ1/B,KAAK0gC,UAAY1gC,KAAK0gC,SAAShB,OAAS1/B,KAAK0gC,SAAShB,OAAS,K,IAK7E,IAAImkC,EAAYP,EAAW7nE,UACvBqoE,EAAc,GAElB,CACE,uBACA,iBACA,eACA,YACA,cACA,4BACA,iBACA,mBACA,kBACA,gBAEAp3D,SAAQ,SAASpP,GACjBwmE,EAAYxmE,GAAQ,CAAC5C,MAAO4C,E,IAG9BhD,OAAOypE,iBAAiBT,EAAYQ,GACpCxpE,OAAOC,eAAespE,EAAW,eAAgB,CAACnpE,OAAO,IAGzD4oE,EAAWp6D,KAAO,SAASnB,EAAOzK,EAAMohE,EAAQtmD,EAASsoB,EAAUsjC,GACjE,IAAIC,EAAa3pE,OAAO0I,OAAO6gE,GAY/B,OAVA1K,EAAAkE,aAAmBt1D,EAAOk8D,GAAY,SAAgB77D,GACpD,OAAOA,IAAQgD,MAAM3P,S,IAGvB6nE,EAAW95D,KAAKy6D,EAAYl8D,EAAM/C,QAAS1H,EAAMohE,EAAQtmD,EAASsoB,GAElEujC,EAAWlqE,KAAOgO,EAAMhO,KAExBiqE,GAAe1pE,OAAOgI,OAAO2hE,EAAYD,GAElCC,C,EAGTzpE,EAAAC,QAAiB6oE,C,sCCrFjB,aAEA9oE,EAAAC,QAAiB,CACfokE,mBAAmB,EACnBE,mBAAmB,EACnBC,qBAAqB,E,sCCLvB,a,qCAuEAxkE,EAAAC,QA5DA,SAAoB2N,EAAK87D,GAEvBA,EAAWA,GAAY,IAAIzI,SAE3B,IAAI9qC,EAAQ,GAEZ,SAASwzC,EAAazpE,GACpB,OAAc,OAAVA,EAAuB,GAEvBy+D,EAAAgD,OAAazhE,GACRA,EAAMukB,cAGXk6C,EAAAkC,cAAoB3gE,IAAUy+D,EAAA6E,aAAmBtjE,GAC5B,mBAAT0pE,KAAsB,IAAIA,KAAK,CAAC1pE,IAAU2pE,EAAOn7D,KAAKxO,GAG/DA,C,CAwCT,OArCA,SAAS4pE,EAAMlrD,EAAMmrD,GACnB,GAAIpL,EAAA8C,cAAoB7iD,IAAS+/C,EAAAtwD,QAAcuQ,GAAO,CACpD,IAA4B,IAAxBuX,EAAMlT,QAAQrE,GAChB,MAAMhO,MAAM,kCAAoCm5D,GAGlD5zC,EAAM/4B,KAAKwhB,GAEX+/C,EAAAzsD,QAAc0M,GAAM,SAAc1e,EAAOnD,GACvC,IAAI4hE,EAAA+C,YAAkBxhE,GAAtB,CACA,IACI2N,EADAm8D,EAAUD,EAAYA,EAAY,IAAMhtE,EAAMA,EAGlD,GAAImD,IAAU6pE,GAA8B,iBAAV7pE,EAChC,GAAIy+D,EAAAyE,SAAermE,EAAK,MAEtBmD,EAAQ1C,KAAKC,UAAUyC,QAClB,GAAIy+D,EAAAyE,SAAermE,EAAK,QAAU8Q,EAAM8wD,EAAA4E,QAAcrjE,IAK3D,YAHA2N,EAAIqE,SAAQ,SAAS+3D,IAClBtL,EAAA+C,YAAkBuI,IAAOP,EAASQ,OAAOF,EAASL,EAAaM,G,IAMtEH,EAAM5pE,EAAO8pE,EAjBiB,C,IAoBhC7zC,EAAM5hB,K,MAENm1D,EAASQ,OAAOH,EAAWJ,EAAa/qD,G,CAI5CkrD,CAAMl8D,GAEC87D,C,gMC5DT,IASAS,EAEAC,EAXA5xD,EAAA5b,EAAA,S,2FAIMytE,EACe,mBAAXlhE,QAAkD,mBAAlBA,OAAY,IAChDA,OAAY,IAAE,8BACd,KAENghE,EAAiBG,EAEjBF,EAA4B,GAE5B,IAAMG,EAAe,WAwDrB,SAASC,EAAcpsE,GACrB,GAAIA,EAASmsE,EACX,MAAM,IAAIE,WAAW,cAAgBrsE,EAAS,kCAGhD,IAAMssE,EAAM,IAAI9J,WAAWxiE,GAE3B,OADA0B,OAAOiU,eAAe22D,EAAKJ,EAAOrpE,WAC3BypE,C,CAaT,SAASJ,EAAQj9D,EAAKs9D,EAAkBvsE,GAEtC,GAAmB,iBAARiP,EAAkB,CAC3B,GAAgC,iBAArBs9D,EACT,MAAM,IAAIrqE,UACR,sEAGJ,OAAOsqE,EAAYv9D,E,CAErB,OAAOw9D,EAAKx9D,EAAKs9D,EAAkBvsE,E,CAKrC,SAASysE,EAAM3qE,EAAOyqE,EAAkBvsE,GACtC,GAAqB,iBAAV8B,EACT,OAqHJ,SAAqB4qE,EAAQC,GACH,iBAAbA,GAAsC,KAAbA,IAClCA,EAAW,QAGb,IAAKT,EAAOU,WAAWD,GACrB,MAAM,IAAIzqE,UAAU,qBAAuByqE,GAG7C,IAAM3sE,EAAwC,EAA/B6sE,EAAWH,EAAQC,GAC9BL,EAAMF,EAAapsE,GAEjB8sE,EAASR,EAAIx0C,MAAM40C,EAAQC,GAE7BG,IAAW9sE,IAIbssE,EAAMA,EAAIjrE,MAAM,EAAGyrE,IAGrB,OAAOR,C,CA1IES,CAAWjrE,EAAOyqE,GAG3B,GAAIxJ,YAAYC,OAAOlhE,GACrB,OAkJJ,SAAwBkrE,GACtB,GAAIC,GAAWD,EAAWxK,YAAa,CACrC,IAAMp0B,EAAO,IAAIo0B,WAAWwK,GAC5B,OAAOE,EAAgB9+B,EAAK60B,OAAQ70B,EAAK++B,WAAY/+B,EAAKg/B,W,CAE5D,OAAOC,EAAcL,E,CAvJZM,CAAcxrE,GAGvB,GAAa,MAATA,EACF,MAAM,IAAII,UACR,wHACsD,IAALJ,EAAK,YAAZqF,EAAAoqC,EAAA,CAAOzvC,KAIrD,GAAImrE,GAAWnrE,EAAOihE,cACjBjhE,GAASmrE,GAAWnrE,EAAMmhE,OAAQF,aACrC,OAAOmK,EAAgBprE,EAAOyqE,EAAkBvsE,GAGlD,GAAiC,oBAAtButE,oBACNN,GAAWnrE,EAAOyrE,oBAClBzrE,GAASmrE,GAAWnrE,EAAMmhE,OAAQsK,oBACrC,OAAOL,EAAgBprE,EAAOyqE,EAAkBvsE,GAGlD,GAAqB,iBAAV8B,EACT,MAAM,IAAII,UACR,yEAIJ,IAAMmM,EAAUvM,EAAMuM,SAAWvM,EAAMuM,UACvC,GAAe,MAAXA,GAAmBA,IAAYvM,EACjC,OAAOoqE,EAAO57D,KAAKjC,EAASk+D,EAAkBvsE,GAGhD,IAAM0hB,EAkJR,SAAqBlS,GACnB,GAAI08D,EAAOxJ,SAASlzD,GAAM,CACxB,IAAMW,EAA4B,EAAtBq9D,EAAQh+D,EAAIxP,QAClBssE,EAAMF,EAAaj8D,GAEzB,OAAmB,IAAfm8D,EAAItsE,QAIRwP,EAAI4+B,KAAKk+B,EAAK,EAAG,EAAGn8D,GAHXm8D,C,CAOX,QAAmB5jE,IAAf8G,EAAIxP,OACN,MAA0B,iBAAfwP,EAAIxP,QAAuBytE,GAAYj+D,EAAIxP,QAC7CosE,EAAa,GAEfiB,EAAc79D,GAGvB,GAAiB,WAAbA,EAAI2D,MAAqBnD,MAAMC,QAAQT,EAAIgR,MAC7C,OAAO6sD,EAAc79D,EAAIgR,K,CAvKjBktD,CAAW5rE,GACrB,GAAI4f,EAAG,OAAOA,EAEd,GAAsB,oBAAX3W,QAAgD,MAAtBA,OAAO4iE,aACH,mBAA9B7rE,EAAMiJ,OAAO4iE,aACtB,OAAOzB,EAAO57D,KAAKxO,EAAMiJ,OAAO4iE,aAAa,UAAWpB,EAAkBvsE,GAG5E,MAAM,IAAIkC,UACR,wHACsD,IAALJ,EAAK,YAAZqF,EAAAoqC,EAAA,CAAOzvC,I,CAqBrD,SAAS8rE,EAAYt1C,GACnB,GAAoB,iBAATA,EACT,MAAM,IAAIp2B,UAAU,0CACf,GAAIo2B,EAAO,EAChB,MAAM,IAAI+zC,WAAW,cAAgB/zC,EAAO,iC,CA4BhD,SAASk0C,EAAal0C,GAEpB,OADAs1C,EAAWt1C,GACJ8zC,EAAa9zC,EAAO,EAAI,EAAoB,EAAhBk1C,EAAQl1C,G,CAwC7C,SAAS+0C,EAAet3B,GAGtB,IAFA,IAAM/1C,EAAS+1C,EAAM/1C,OAAS,EAAI,EAA4B,EAAxBwtE,EAAQz3B,EAAM/1C,QAC9CssE,EAAMF,EAAapsE,GAChBsC,EAAI,EAAGA,EAAItC,EAAQsC,GAAK,EAC/BgqE,EAAIhqE,GAAgB,IAAXyzC,EAAMzzC,GAEjB,OAAOgqE,C,CAWT,SAASY,EAAiBn3B,EAAOo3B,EAAYntE,GAC3C,GAAImtE,EAAa,GAAKp3B,EAAMq3B,WAAaD,EACvC,MAAM,IAAId,WAAW,wCAGvB,GAAIt2B,EAAMq3B,WAAaD,GAAcntE,GAAU,GAC7C,MAAM,IAAIqsE,WAAW,wCAGvB,IAAIC,EAYJ,OAVEA,OADiB5jE,IAAfykE,QAAuCzkE,IAAX1I,EACxB,IAAIwiE,WAAWzsB,QACDrtC,IAAX1I,EACH,IAAIwiE,WAAWzsB,EAAOo3B,GAEtB,IAAI3K,WAAWzsB,EAAOo3B,EAAYntE,GAI1C0B,OAAOiU,eAAe22D,EAAKJ,EAAOrpE,WAE3BypE,C,CA4BT,SAASkB,EAASxtE,GAGhB,GAAIA,GAAUmsE,EACZ,MAAM,IAAIE,WAAW,0DACaF,EAAax7D,SAAS,IAAM,UAEhE,OAAgB,EAAT3Q,C,CAuGT,SAAS6sE,EAAYH,EAAQC,GAC3B,GAAIT,EAAOxJ,SAASgK,GAClB,OAAOA,EAAO1sE,OAEhB,GAAI+iE,YAAYC,OAAO0J,IAAWO,GAAWP,EAAQ3J,aACnD,OAAO2J,EAAOU,WAEhB,GAAsB,iBAAXV,EACT,MAAM,IAAIxqE,UACR,iGACgC,IAANwqE,EAAM,YAAbvlE,EAAAoqC,EAAA,CAAOm7B,KAI9B,IAAMv8D,EAAMu8D,EAAO1sE,OACb6tE,EAAaviE,UAAUtL,OAAS,IAAsB,IAAjBsL,UAAU,GACrD,IAAKuiE,GAAqB,IAAR19D,EAAW,OAAO,EAIpC,IADA,IAAI29D,GAAc,IAEhB,OAAQnB,GACN,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOx8D,EACT,IAAK,OACL,IAAK,QACH,OAAO49D,GAAYrB,GAAQ1sE,OAC7B,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAa,EAANmQ,EACT,IAAK,MACH,OAAOA,IAAQ,EACjB,IAAK,SACH,OAAO69D,GAActB,GAAQ1sE,OAC/B,QACE,GAAI8tE,EACF,OAAOD,GAAY,EAAKE,GAAYrB,GAAQ1sE,OAE9C2sE,GAAY,GAAKA,GAAU79C,cAC3Bg/C,GAAc,E,CAMtB,SAASG,EAActB,EAAU7sC,EAAOouC,GACtC,IAAIJ,GAAc,EAclB,SALcplE,IAAVo3B,GAAuBA,EAAQ,KACjCA,EAAQ,GAINA,EAAQ14B,KAAKpH,OACf,MAAO,GAOT,SAJY0I,IAARwlE,GAAqBA,EAAM9mE,KAAKpH,UAClCkuE,EAAM9mE,KAAKpH,QAGTkuE,GAAO,EACT,MAAO,GAOT,IAHAA,KAAS,KACTpuC,KAAW,GAGT,MAAO,GAKT,IAFK6sC,IAAUA,EAAW,iBAGhBA,GACN,IAAK,MACH,OAAOwB,EAAS/mE,KAAM04B,EAAOouC,GAE/B,IAAK,OACL,IAAK,QACH,OAAOE,EAAUhnE,KAAM04B,EAAOouC,GAEhC,IAAK,QACH,OAAOG,EAAWjnE,KAAM04B,EAAOouC,GAEjC,IAAK,SACL,IAAK,SACH,OAAOI,EAAYlnE,KAAM04B,EAAOouC,GAElC,IAAK,SACH,OAAOK,EAAYnnE,KAAM04B,EAAOouC,GAElC,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAOM,EAAapnE,KAAM04B,EAAOouC,GAEnC,QACE,GAAIJ,EAAa,MAAM,IAAI5rE,UAAU,qBAAuByqE,GAC5DA,GAAYA,EAAW,IAAI79C,cAC3Bg/C,GAAc,E,CAatB,SAASW,EAAM/sD,EAAGhR,EAAGuqB,GACnB,IAAM34B,EAAIof,EAAEhR,GACZgR,EAAEhR,GAAKgR,EAAEuZ,GACTvZ,EAAEuZ,GAAK34B,C,CA4IT,SAASosE,EAAsBzL,EAAQn8D,EAAKqmE,EAAYR,EAAUjO,GAEhE,GAAsB,IAAlBuE,EAAOjjE,OAAc,OAAO,EAmBhC,GAhB0B,iBAAfmtE,GACTR,EAAWQ,EACXA,EAAa,GACJA,EAAa,WACtBA,EAAa,WACJA,GAAa,aACtBA,GAAa,YAGXM,GADJN,GAAcA,KAGZA,EAAazO,EAAM,EAAKuE,EAAOjjE,OAAS,GAItCmtE,EAAa,IAAGA,EAAalK,EAAOjjE,OAASmtE,GAC7CA,GAAclK,EAAOjjE,OAAQ,CAC/B,GAAI0+D,EAAK,OAAO,EACXyO,EAAalK,EAAOjjE,OAAS,C,MAC7B,GAAImtE,EAAa,EAAG,CACzB,IAAIzO,EACC,OAAO,EADHyO,EAAa,C,CAUxB,GALmB,iBAARrmE,IACTA,EAAMolE,EAAO57D,KAAKxJ,EAAK6lE,IAIrBT,EAAOxJ,SAAS57D,GAElB,OAAmB,IAAfA,EAAI9G,QACC,EAEF2uE,EAAa1L,EAAQn8D,EAAKqmE,EAAYR,EAAUjO,GAClD,GAAmB,iBAAR53D,EAEhB,OADAA,GAAY,IACgC,mBAAjC07D,WAAW3/D,UAAUgiB,QAC1B65C,EACK8D,WAAW3/D,UAAUgiB,QAAQjU,KAAKqyD,EAAQn8D,EAAKqmE,GAE/C3K,WAAW3/D,UAAU+rE,YAAYh+D,KAAKqyD,EAAQn8D,EAAKqmE,GAGvDwB,EAAa1L,EAAQ,CAACn8D,GAAMqmE,EAAYR,EAAUjO,GAG3D,MAAM,IAAIx8D,UAAU,uC,CAGtB,SAASysE,EAAcl/D,EAAK3I,EAAKqmE,EAAYR,EAAUjO,GACrD,IA0BIz7B,EA1BA4rC,EAAY,EACZC,EAAYr/D,EAAIzP,OAChB+uE,EAAYjoE,EAAI9G,OAEpB,QAAiB0I,IAAbikE,IAEe,UADjBA,EAAWnwD,OAAOmwD,GAAU79C,gBACY,UAAb69C,GACV,YAAbA,GAAuC,aAAbA,GAAyB,CACrD,GAAIl9D,EAAIzP,OAAS,GAAK8G,EAAI9G,OAAS,EACjC,OAAO,EAET6uE,EAAY,EACZC,GAAa,EACbC,GAAa,EACb5B,GAAc,C,CAIlB,SAASz/D,EAAM4+D,EAAKhqE,GAClB,OAAkB,IAAdusE,EACKvC,EAAIhqE,GAEJgqE,EAAI0C,aAAa1sE,EAAIusE,E,CAKhC,GAAInQ,EAAK,CACP,IAAIuQ,GAAa,EACjB,IAAKhsC,EAAIkqC,EAAYlqC,EAAI6rC,EAAW7rC,IAClC,GAAIv1B,EAAK+B,EAAKwzB,KAAOv1B,EAAK5G,GAAoB,IAAfmoE,EAAoB,EAAIhsC,EAAIgsC,IAEzD,IADmB,IAAfA,IAAmBA,EAAahsC,GAChCA,EAAIgsC,EAAa,IAAMF,EAAW,OAAOE,EAAaJ,OAEvC,IAAfI,IAAmBhsC,GAAKA,EAAIgsC,GAChCA,GAAa,C,MAKjB,IADI9B,EAAa4B,EAAYD,IAAW3B,EAAa2B,EAAYC,GAC5D9rC,EAAIkqC,EAAYlqC,GAAK,EAAGA,IAAK,CAEhC,IADA,IAAIisC,GAAQ,EACHxrC,EAAI,EAAGA,EAAIqrC,EAAWrrC,IAC7B,GAAIh2B,EAAK+B,EAAKwzB,EAAIS,KAAOh2B,EAAK5G,EAAK48B,GAAI,CACrCwrC,GAAQ,EACR,K,CAGJ,GAAIA,EAAO,OAAOjsC,C,CAItB,OAAO,C,CAeT,SAASksC,EAAU7C,EAAKI,EAAQ0C,EAAQpvE,GACtCovE,EAAS3hD,OAAO2hD,IAAW,EAC3B,IAAM/d,EAAYib,EAAItsE,OAASovE,EAC1BpvE,GAGHA,EAASytB,OAAOztB,IACHqxD,IACXrxD,EAASqxD,GAJXrxD,EAASqxD,EAQX,IAKI/uD,EALE+sE,EAAS3C,EAAO1sE,OAMtB,IAJIA,EAASqvE,EAAS,IACpBrvE,EAASqvE,EAAS,GAGf/sE,EAAI,EAAGA,EAAItC,IAAUsC,EAAG,CAC3B,IAAMgtE,EAAS/qE,SAASmoE,EAAOt7C,OAAW,EAAJ9uB,EAAO,GAAI,IACjD,GAAImrE,GAAY6B,GAAS,OAAOhtE,EAChCgqE,EAAI8C,EAAS9sE,GAAKgtE,C,CAEpB,OAAOhtE,C,CAGT,SAASitE,EAAWjD,EAAKI,EAAQ0C,EAAQpvE,GACvC,OAAOwvE,GAAWzB,GAAYrB,EAAQJ,EAAItsE,OAASovE,GAAS9C,EAAK8C,EAAQpvE,E,CAG3E,SAASyvE,EAAYnD,EAAKI,EAAQ0C,EAAQpvE,GACxC,OAAOwvE,GAypCT,SAAuB/0D,GAErB,IADA,IAAMi1D,EAAY,GACTptE,EAAI,EAAGA,EAAImY,EAAIza,SAAUsC,EAEhCotE,EAAU1wE,KAAyB,IAApByb,EAAII,WAAWvY,IAEhC,OAAOotE,C,CA/pCWC,CAAajD,GAASJ,EAAK8C,EAAQpvE,E,CAGvD,SAAS4vE,EAAatD,EAAKI,EAAQ0C,EAAQpvE,GACzC,OAAOwvE,GAAWxB,GAActB,GAASJ,EAAK8C,EAAQpvE,E,CAGxD,SAAS6vE,EAAWvD,EAAKI,EAAQ0C,EAAQpvE,GACvC,OAAOwvE,GA0pCT,SAAyB/0D,EAAKq1D,GAG5B,IAFA,IAAIl1D,EAAGm1D,EAAIC,EACLN,EAAY,GACTptE,EAAI,EAAGA,EAAImY,EAAIza,WACjB8vE,GAAS,GAAK,KADaxtE,EAIhCytE,GADAn1D,EAAIH,EAAII,WAAWvY,KACT,EACV0tE,EAAKp1D,EAAI,IACT80D,EAAU1wE,KAAKgxE,GACfN,EAAU1wE,KAAK+wE,GAGjB,OAAOL,C,CAvqCWO,CAAevD,EAAQJ,EAAItsE,OAASovE,GAAS9C,EAAK8C,EAAQpvE,E,CA+E9E,SAASuuE,EAAajC,EAAKxsC,EAAOouC,GAChC,OAAc,IAAVpuC,GAAeouC,IAAQ5B,EAAItsE,OACtBkwE,EAAAC,cAAqB7D,GAErB4D,EAAAC,cAAqB7D,EAAIjrE,MAAMy+B,EAAOouC,G,CAIjD,SAASE,EAAW9B,EAAKxsC,EAAOouC,GAC9BA,EAAM1/C,KAAKgb,IAAI8iC,EAAItsE,OAAQkuE,GAI3B,IAHA,IAAM3sD,EAAM,GAERjf,EAAIw9B,EACDx9B,EAAI4rE,GAAK,CACd,IAAMkC,EAAY9D,EAAIhqE,GAClB+tE,EAAY,KACZC,EAAmBF,EAAa,IAChC,EACAA,EAAa,IACT,EACAA,EAAa,IACT,EACA,EAEZ,GAAI9tE,EAAIguE,GAAoBpC,EAAK,CAC/B,IAAIqC,OAAA,EAAYC,OAAA,EAAWC,OAAA,EAAYC,OAAA,EAEvC,OAAQJ,GACN,KAAK,EACCF,EAAY,MACdC,EAAYD,GAEd,MACF,KAAK,EAEyB,MAAV,KADlBG,EAAajE,EAAIhqE,EAAI,OAEnBouE,GAA6B,GAAZN,IAAqB,EAAoB,GAAbG,GACzB,MAClBF,EAAYK,GAGhB,MACF,KAAK,EACHH,EAAajE,EAAIhqE,EAAI,GACrBkuE,EAAYlE,EAAIhqE,EAAI,GACQ,MAAV,IAAbiuE,IAAsD,MAAV,IAAZC,KACnCE,GAA6B,GAAZN,IAAoB,IAAoB,GAAbG,IAAsB,EAAmB,GAAZC,GACrD,OAAUE,EAAgB,OAAUA,EAAgB,SACtEL,EAAYK,GAGhB,MACF,KAAK,EACHH,EAAajE,EAAIhqE,EAAI,GACrBkuE,EAAYlE,EAAIhqE,EAAI,GACpBmuE,EAAanE,EAAIhqE,EAAI,GACO,MAAV,IAAbiuE,IAAsD,MAAV,IAAZC,IAAsD,MAAV,IAAbC,KAClEC,GAA6B,GAAZN,IAAoB,IAAqB,GAAbG,IAAsB,IAAmB,GAAZC,IAAqB,EAAoB,GAAbC,GAClF,OAAUC,EAAgB,UAC5CL,EAAYK,G,CAMJ,OAAdL,GAGFA,EAAY,MACZC,EAAmB,GACVD,EAAY,QAErBA,GAAa,MACb9uD,EAAIviB,KAAKqxE,IAAc,GAAK,KAAQ,OACpCA,EAAY,MAAqB,KAAZA,GAGvB9uD,EAAIviB,KAAKqxE,GACT/tE,GAAKguE,C,CAGP,OAQF,SAAgCK,GAC9B,IAAMxgE,EAAMwgE,EAAW3wE,OACvB,GAAImQ,GAAOygE,EACT,OAAOp0D,OAAOC,aAAapQ,MAAMmQ,OAAQm0D,GAI3C,IAAIpvD,EAAM,GACNjf,EAAI,EACR,KAAOA,EAAI6N,GACToR,GAAO/E,OAAOC,aAAapQ,MACzBmQ,OACAm0D,EAAWtvE,MAAMiB,EAAGA,GAAKsuE,IAG7B,OAAOrvD,C,CAvBAsvD,CAAsBtvD,E,CA19B/B2qD,EAAO4E,oBAUP,WAEE,IACE,IAAMrhE,EAAM,IAAI+yD,WAAW,GACrBuO,EAAQ,CAAEC,IAAK,WAAc,OAAO,E,GAG1C,OAFAtvE,OAAOiU,eAAeo7D,EAAOvO,WAAW3/D,WACxCnB,OAAOiU,eAAelG,EAAKshE,GACN,KAAdthE,EAAIuhE,K,CACX,MAAOptE,GACP,OAAO,C,EAnBkBqtE,GAExB/E,EAAO4E,qBAA0C,oBAAZrxE,SACb,mBAAlBA,QAAQ0P,OACjB1P,QAAQ0P,MACN,iJAkBJzN,OAAOC,eAAeuqE,EAAOrpE,UAAW,SAAU,CAChDL,YAAY,EACZyD,IAAK,WACH,GAAKimE,EAAOxJ,SAASt7D,MACrB,OAAOA,KAAK67D,M,IAIhBvhE,OAAOC,eAAeuqE,EAAOrpE,UAAW,SAAU,CAChDL,YAAY,EACZyD,IAAK,WACH,GAAKimE,EAAOxJ,SAASt7D,MACrB,OAAOA,KAAK+lE,U,IAqChBjB,EAAOgF,SAAW,KA8DlBhF,EAAO57D,KAAO,SAAUxO,EAAOyqE,EAAkBvsE,GAC/C,OAAOysE,EAAK3qE,EAAOyqE,EAAkBvsE,E,EAKvC0B,OAAOiU,eAAeu2D,EAAOrpE,UAAW2/D,WAAW3/D,WACnDnB,OAAOiU,eAAeu2D,EAAQ1J,YA8B9B0J,EAAOiF,MAAQ,SAAU74C,EAAM84C,EAAMzE,GACnC,OArBF,SAAgBr0C,EAAM84C,EAAMzE,GAE1B,OADAiB,EAAWt1C,GACPA,GAAQ,EACH8zC,EAAa9zC,QAET5vB,IAAT0oE,EAIyB,iBAAbzE,EACVP,EAAa9zC,GAAM84C,KAAKA,EAAMzE,GAC9BP,EAAa9zC,GAAM84C,KAAKA,GAEvBhF,EAAa9zC,E,CAQb+4C,CAAM/4C,EAAM84C,EAAMzE,E,EAW3BT,EAAOoF,YAAc,SAAUh5C,GAC7B,OAAOk0C,EAAYl0C,E,EAKrB4zC,EAAOqF,gBAAkB,SAAUj5C,GACjC,OAAOk0C,EAAYl0C,E,EA8GrB4zC,EAAOxJ,SAAW,SAAmBhhD,GACnC,OAAY,MAALA,IAA6B,IAAhBA,EAAE8vD,WACpB9vD,IAAMwqD,EAAOrpE,S,EAGjBqpE,EAAO3/B,QAAU,SAAkB9qB,EAAGC,GAGpC,GAFIurD,GAAWxrD,EAAG+gD,cAAa/gD,EAAIyqD,EAAO57D,KAAKmR,EAAGA,EAAE2tD,OAAQ3tD,EAAE2rD,aAC1DH,GAAWvrD,EAAG8gD,cAAa9gD,EAAIwqD,EAAO57D,KAAKoR,EAAGA,EAAE0tD,OAAQ1tD,EAAE0rD,cACzDlB,EAAOxJ,SAASjhD,KAAOyqD,EAAOxJ,SAAShhD,GAC1C,MAAM,IAAIxf,UACR,yEAIJ,GAAIuf,IAAMC,EAAG,OAAO,EAKpB,IAHA,IAAI+vD,EAAIhwD,EAAEzhB,OACN0xE,EAAIhwD,EAAE1hB,OAEDsC,EAAI,EAAG6N,EAAMqe,KAAKgb,IAAIioC,EAAGC,GAAIpvE,EAAI6N,IAAO7N,EAC/C,GAAImf,EAAEnf,KAAOof,EAAEpf,GAAI,CACjBmvE,EAAIhwD,EAAEnf,GACNovE,EAAIhwD,EAAEpf,GACN,K,CAIJ,OAAImvE,EAAIC,GAAU,EACdA,EAAID,EAAU,EACX,C,EAGTvF,EAAOU,WAAa,SAAqBD,GACvC,OAAQnwD,OAAOmwD,GAAU79C,eACvB,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO,EACT,QACE,OAAO,E,EAIbo9C,EAAO/sE,OAAS,SAAiBY,EAAMC,GACrC,IAAKgQ,MAAMC,QAAQlQ,GACjB,MAAM,IAAImC,UAAU,+CAGtB,GAAoB,IAAhBnC,EAAKC,OACP,OAAOksE,EAAOiF,MAAM,GAGtB,IAAI7uE,EACJ,QAAeoG,IAAX1I,EAEF,IADAA,EAAS,EACJsC,EAAI,EAAGA,EAAIvC,EAAKC,SAAUsC,EAC7BtC,GAAUD,EAAKuC,GAAGtC,OAItB,IAAMijE,EAASiJ,EAAOoF,YAAYtxE,GAC9Bsc,EAAM,EACV,IAAKha,EAAI,EAAGA,EAAIvC,EAAKC,SAAUsC,EAAG,CAChC,IAAIgqE,EAAMvsE,EAAKuC,GACf,GAAI2qE,GAAWX,EAAK9J,YACdlmD,EAAMgwD,EAAItsE,OAASijE,EAAOjjE,QACvBksE,EAAOxJ,SAAS4J,KAAMA,EAAMJ,EAAO57D,KAAKg8D,IAC7CA,EAAIl+B,KAAK60B,EAAQ3mD,IAEjBkmD,WAAW3/D,UAAUyD,IAAIsK,KACvBqyD,EACAqJ,EACAhwD,OAGC,KAAK4vD,EAAOxJ,SAAS4J,GAC1B,MAAM,IAAIpqE,UAAU,+CAEpBoqE,EAAIl+B,KAAK60B,EAAQ3mD,EAAI,CAEvBA,GAAOgwD,EAAItsE,M,CAEb,OAAOijE,C,EAkDTiJ,EAAOkB,WAAaP,EA8EpBX,EAAOrpE,UAAU2uE,WAAY,EAQ7BtF,EAAOrpE,UAAU8uE,OAAS,WACxB,IAAMxhE,EAAM/I,KAAKpH,OACjB,GAAImQ,EAAM,GAAM,EACd,MAAM,IAAIk8D,WAAW,6CAEvB,IAAK,IAAI/pE,EAAI,EAAGA,EAAI6N,EAAK7N,GAAK,EAC5BmsE,EAAKrnE,KAAM9E,EAAGA,EAAI,GAEpB,OAAO8E,I,EAGT8kE,EAAOrpE,UAAU+uE,OAAS,WACxB,IAAMzhE,EAAM/I,KAAKpH,OACjB,GAAImQ,EAAM,GAAM,EACd,MAAM,IAAIk8D,WAAW,6CAEvB,IAAK,IAAI/pE,EAAI,EAAGA,EAAI6N,EAAK7N,GAAK,EAC5BmsE,EAAKrnE,KAAM9E,EAAGA,EAAI,GAClBmsE,EAAKrnE,KAAM9E,EAAI,EAAGA,EAAI,GAExB,OAAO8E,I,EAGT8kE,EAAOrpE,UAAUgvE,OAAS,WACxB,IAAM1hE,EAAM/I,KAAKpH,OACjB,GAAImQ,EAAM,GAAM,EACd,MAAM,IAAIk8D,WAAW,6CAEvB,IAAK,IAAI/pE,EAAI,EAAGA,EAAI6N,EAAK7N,GAAK,EAC5BmsE,EAAKrnE,KAAM9E,EAAGA,EAAI,GAClBmsE,EAAKrnE,KAAM9E,EAAI,EAAGA,EAAI,GACtBmsE,EAAKrnE,KAAM9E,EAAI,EAAGA,EAAI,GACtBmsE,EAAKrnE,KAAM9E,EAAI,EAAGA,EAAI,GAExB,OAAO8E,I,EAGT8kE,EAAOrpE,UAAU8N,SAAW,WAC1B,IAAM3Q,EAASoH,KAAKpH,OACpB,OAAe,IAAXA,EAAqB,GACA,IAArBsL,UAAUtL,OAAqBouE,EAAUhnE,KAAM,EAAGpH,GAC/CiuE,EAAa5hE,MAAMjF,KAAMkE,U,EAGlC4gE,EAAOrpE,UAAUivE,eAAiB5F,EAAOrpE,UAAU8N,SAEnDu7D,EAAOrpE,UAAUkvC,OAAS,SAAiBrwB,GACzC,IAAKwqD,EAAOxJ,SAAShhD,GAAI,MAAM,IAAIxf,UAAU,6BAC7C,OAAIkF,OAASsa,GACsB,IAA5BwqD,EAAO3/B,QAAQnlC,KAAMsa,E,EAG9BwqD,EAAOrpE,UAAUkvE,QAAU,WACzB,IAAIt3D,EAAM,GACJqpB,EAAMkoC,EAGZ,OAFAvxD,EAAMrT,KAAKuJ,SAAS,MAAO,EAAGmzB,GAAKpmB,QAAO,UAAY,OAAOymD,OACzD/8D,KAAKpH,OAAS8jC,IAAKrpB,GAAO,SACvB,WAAaA,EAAM,G,EAExBwxD,IACFC,EAAOrpE,UAAUopE,GAAuBC,EAAOrpE,UAAUkvE,SAG3D7F,EAAOrpE,UAAU0pC,QAAU,SAAkBnqC,EAAQ09B,EAAOouC,EAAK8D,EAAWC,GAI1E,GAHIhF,GAAW7qE,EAAQogE,cACrBpgE,EAAS8pE,EAAO57D,KAAKlO,EAAQA,EAAOgtE,OAAQhtE,EAAOgrE,cAEhDlB,EAAOxJ,SAAStgE,GACnB,MAAM,IAAIF,UACR,uFACiC,IAANE,EAAM,YAAb+E,EAAAoqC,EAAA,CAAOnvC,KAiB/B,QAbcsG,IAAVo3B,IACFA,EAAQ,QAEEp3B,IAARwlE,IACFA,EAAM9rE,EAASA,EAAOpC,OAAS,QAEf0I,IAAdspE,IACFA,EAAY,QAEEtpE,IAAZupE,IACFA,EAAU7qE,KAAKpH,QAGb8/B,EAAQ,GAAKouC,EAAM9rE,EAAOpC,QAAUgyE,EAAY,GAAKC,EAAU7qE,KAAKpH,OACtE,MAAM,IAAIqsE,WAAW,sBAGvB,GAAI2F,GAAaC,GAAWnyC,GAASouC,EACnC,OAAO,EAET,GAAI8D,GAAaC,EACf,OAAO,EAET,GAAInyC,GAASouC,EACX,OAAO,EAQT,GAAI9mE,OAAShF,EAAQ,OAAO,EAS5B,IAPA,IAAIqvE,GAJJQ,KAAa,IADbD,KAAe,GAMXN,GAPJxD,KAAS,IADTpuC,KAAW,GASL3vB,EAAMqe,KAAKgb,IAAIioC,EAAGC,GAElBQ,EAAW9qE,KAAK/F,MAAM2wE,EAAWC,GACjCE,EAAa/vE,EAAOf,MAAMy+B,EAAOouC,GAE9B5rE,EAAI,EAAGA,EAAI6N,IAAO7N,EACzB,GAAI4vE,EAAS5vE,KAAO6vE,EAAW7vE,GAAI,CACjCmvE,EAAIS,EAAS5vE,GACbovE,EAAIS,EAAW7vE,GACf,K,CAIJ,OAAImvE,EAAIC,GAAU,EACdA,EAAID,EAAU,EACX,C,EA4HTvF,EAAOrpE,UAAU+e,SAAW,SAAmB9a,EAAKqmE,EAAYR,GAC9D,OAAmD,IAA5CvlE,KAAKyd,QAAQ/d,EAAKqmE,EAAYR,E,EAGvCT,EAAOrpE,UAAUgiB,QAAU,SAAkB/d,EAAKqmE,EAAYR,GAC5D,OAAO+B,EAAqBtnE,KAAMN,EAAKqmE,EAAYR,GAAU,E,EAG/DT,EAAOrpE,UAAU+rE,YAAc,SAAsB9nE,EAAKqmE,EAAYR,GACpE,OAAO+B,EAAqBtnE,KAAMN,EAAKqmE,EAAYR,GAAU,E,EA6C/DT,EAAOrpE,UAAUi1B,MAAQ,SAAgB40C,EAAQ0C,EAAQpvE,EAAQ2sE,GAE/D,QAAejkE,IAAX0mE,EACFzC,EAAW,OACX3sE,EAASoH,KAAKpH,OACdovE,EAAS,OAEJ,QAAe1mE,IAAX1I,GAA0C,iBAAXovE,EACxCzC,EAAWyC,EACXpvE,EAASoH,KAAKpH,OACdovE,EAAS,MAEJ,KAAIgD,SAAShD,GAUlB,MAAM,IAAI58D,MACR,2EAVF48D,KAAoB,EAChBgD,SAASpyE,IACXA,KAAoB,OACH0I,IAAbikE,IAAwBA,EAAW,UAEvCA,EAAW3sE,EACXA,OAAS0I,EAKV,CAGH,IAAM2oD,EAAYjqD,KAAKpH,OAASovE,EAGhC,SAFe1mE,IAAX1I,GAAwBA,EAASqxD,KAAWrxD,EAASqxD,GAErDqb,EAAQ1sE,OAAS,IAAMA,EAAS,GAAKovE,EAAS,IAAOA,EAAShoE,KAAKpH,OACrE,MAAM,IAAIqsE,WAAW,0CAGlBM,IAAUA,EAAW,QAG1B,IADA,IAAImB,GAAc,IAEhB,OAAQnB,GACN,IAAK,MACH,OAAOwC,EAAS/nE,KAAMslE,EAAQ0C,EAAQpvE,GAExC,IAAK,OACL,IAAK,QACH,OAAOuvE,EAAUnoE,KAAMslE,EAAQ0C,EAAQpvE,GAEzC,IAAK,QACL,IAAK,SACL,IAAK,SACH,OAAOyvE,EAAWroE,KAAMslE,EAAQ0C,EAAQpvE,GAE1C,IAAK,SAEH,OAAO4vE,EAAYxoE,KAAMslE,EAAQ0C,EAAQpvE,GAE3C,IAAK,OACL,IAAK,QACL,IAAK,UACL,IAAK,WACH,OAAO6vE,EAAUzoE,KAAMslE,EAAQ0C,EAAQpvE,GAEzC,QACE,GAAI8tE,EAAa,MAAM,IAAI5rE,UAAU,qBAAuByqE,GAC5DA,GAAY,GAAKA,GAAU79C,cAC3Bg/C,GAAc,E,EAKtB5B,EAAOrpE,UAAU8nE,OAAS,WACxB,MAAO,CACLx3D,KAAM,SACNqN,KAAMxQ,MAAMnN,UAAUxB,MAAMuP,KAAKxJ,KAAKirE,MAAQjrE,KAAM,G,EA2FxD,IAAMwpE,EAAuB,KAoB7B,SAASvC,EAAY/B,EAAKxsC,EAAOouC,GAC/B,IAAIoE,EAAM,GACVpE,EAAM1/C,KAAKgb,IAAI8iC,EAAItsE,OAAQkuE,GAE3B,IAAK,IAAI5rE,EAAIw9B,EAAOx9B,EAAI4rE,IAAO5rE,EAC7BgwE,GAAO91D,OAAOC,aAAsB,IAAT6vD,EAAIhqE,IAEjC,OAAOgwE,C,CAGT,SAAShE,EAAahC,EAAKxsC,EAAOouC,GAChC,IAAIoE,EAAM,GACVpE,EAAM1/C,KAAKgb,IAAI8iC,EAAItsE,OAAQkuE,GAE3B,IAAK,IAAI5rE,EAAIw9B,EAAOx9B,EAAI4rE,IAAO5rE,EAC7BgwE,GAAO91D,OAAOC,aAAa6vD,EAAIhqE,IAEjC,OAAOgwE,C,CAGT,SAASnE,EAAU7B,EAAKxsC,EAAOouC,GAC7B,IAAM/9D,EAAMm8D,EAAItsE,SAEX8/B,GAASA,EAAQ,KAAGA,EAAQ,KAC5BouC,GAAOA,EAAM,GAAKA,EAAM/9D,KAAK+9D,EAAM/9D,GAGxC,IADA,IAAIuK,EAAM,GACDpY,EAAIw9B,EAAOx9B,EAAI4rE,IAAO5rE,EAC7BoY,GAAO63D,GAAoBjG,EAAIhqE,IAEjC,OAAOoY,C,CAGT,SAAS8zD,EAAclC,EAAKxsC,EAAOouC,GAIjC,IAHA,IAAM7xD,EAAQiwD,EAAIjrE,MAAMy+B,EAAOouC,GAC3B3sD,EAAM,GAEDjf,EAAI,EAAGA,EAAI+Z,EAAMrc,OAAS,EAAGsC,GAAK,EACzCif,GAAO/E,OAAOC,aAAaJ,EAAM/Z,GAAqB,IAAf+Z,EAAM/Z,EAAI,IAEnD,OAAOif,C,CAkCT,SAASixD,EAAapD,EAAQqD,EAAKzyE,GACjC,GAAIovE,EAAU,GAAO,GAAKA,EAAS,EAAG,MAAM,IAAI/C,WAAW,sBAC3D,GAAI+C,EAASqD,EAAMzyE,EAAQ,MAAM,IAAIqsE,WAAW,wC,CA0QlD,SAASqG,EAAUpG,EAAKxqE,EAAOstE,EAAQqD,EAAK3uC,EAAK0F,GAC/C,IAAK0iC,EAAOxJ,SAAS4J,GAAM,MAAM,IAAIpqE,UAAU,+CAC/C,GAAIJ,EAAQgiC,GAAOhiC,EAAQ0nC,EAAK,MAAM,IAAI6iC,WAAW,qCACrD,GAAI+C,EAASqD,EAAMnG,EAAItsE,OAAQ,MAAM,IAAIqsE,WAAW,qB,CAgGtD,SAASsG,EAAgBrG,EAAKxqE,EAAOstE,EAAQ5lC,EAAK1F,GAChD8uC,EAAW9wE,EAAO0nC,EAAK1F,EAAKwoC,EAAK8C,EAAQ,GAEzC,IAAIY,EAAKviD,OAAO3rB,EAAQ+wE,OAAO,aAC/BvG,EAAI8C,KAAYY,EAChBA,IAAW,EACX1D,EAAI8C,KAAYY,EAChBA,IAAW,EACX1D,EAAI8C,KAAYY,EAChBA,IAAW,EACX1D,EAAI8C,KAAYY,EAChB,IAAID,EAAKtiD,OAAO3rB,GAAS+wE,OAAO,IAAMA,OAAO,aAQ7C,OAPAvG,EAAI8C,KAAYW,EAChBA,IAAW,EACXzD,EAAI8C,KAAYW,EAChBA,IAAW,EACXzD,EAAI8C,KAAYW,EAChBA,IAAW,EACXzD,EAAI8C,KAAYW,EACTX,C,CAGT,SAAS0D,EAAgBxG,EAAKxqE,EAAOstE,EAAQ5lC,EAAK1F,GAChD8uC,EAAW9wE,EAAO0nC,EAAK1F,EAAKwoC,EAAK8C,EAAQ,GAEzC,IAAIY,EAAKviD,OAAO3rB,EAAQ+wE,OAAO,aAC/BvG,EAAI8C,EAAS,GAAKY,EAClBA,IAAW,EACX1D,EAAI8C,EAAS,GAAKY,EAClBA,IAAW,EACX1D,EAAI8C,EAAS,GAAKY,EAClBA,IAAW,EACX1D,EAAI8C,EAAS,GAAKY,EAClB,IAAID,EAAKtiD,OAAO3rB,GAAS+wE,OAAO,IAAMA,OAAO,aAQ7C,OAPAvG,EAAI8C,EAAS,GAAKW,EAClBA,IAAW,EACXzD,EAAI8C,EAAS,GAAKW,EAClBA,IAAW,EACXzD,EAAI8C,EAAS,GAAKW,EAClBA,IAAW,EACXzD,EAAI8C,GAAUW,EACPX,EAAS,C,CAmHlB,SAAS2D,EAAczG,EAAKxqE,EAAOstE,EAAQqD,EAAK3uC,EAAK0F,GACnD,GAAI4lC,EAASqD,EAAMnG,EAAItsE,OAAQ,MAAM,IAAIqsE,WAAW,sBACpD,GAAI+C,EAAS,EAAG,MAAM,IAAI/C,WAAW,qB,CAGvC,SAAS2G,EAAY1G,EAAKxqE,EAAOstE,EAAQ6D,EAAcC,GAOrD,OANApxE,GAASA,EACTstE,KAAoB,EACf8D,GACHH,EAAazG,EAAKxqE,EAAOstE,EAAQ,GAEnC+D,EAAAr7C,MAAcw0C,EAAKxqE,EAAOstE,EAAQ6D,EAAc,GAAI,GAC7C7D,EAAS,C,CAWlB,SAASgE,EAAa9G,EAAKxqE,EAAOstE,EAAQ6D,EAAcC,GAOtD,OANApxE,GAASA,EACTstE,KAAoB,EACf8D,GACHH,EAAazG,EAAKxqE,EAAOstE,EAAQ,GAEnC+D,EAAAr7C,MAAcw0C,EAAKxqE,EAAOstE,EAAQ6D,EAAc,GAAI,GAC7C7D,EAAS,C,CAxkBlBlD,EAAOrpE,UAAUxB,MAAQ,SAAgBy+B,EAAOouC,GAC9C,IAAM/9D,EAAM/I,KAAKpH,QACjB8/B,IAAUA,GAGE,GACVA,GAAS3vB,GACG,IAAG2vB,EAAQ,GACdA,EAAQ3vB,IACjB2vB,EAAQ3vB,IANV+9D,OAAcxlE,IAARwlE,EAAoB/9D,IAAQ+9D,GASxB,GACRA,GAAO/9D,GACG,IAAG+9D,EAAM,GACVA,EAAM/9D,IACf+9D,EAAM/9D,GAGJ+9D,EAAMpuC,IAAOouC,EAAMpuC,GAEvB,IAAMuzC,EAASjsE,KAAKksE,SAASxzC,EAAOouC,GAIpC,OAFAxsE,OAAOiU,eAAe09D,EAAQnH,EAAOrpE,WAE9BwwE,C,EAWTnH,EAAOrpE,UAAU0wE,WACjBrH,EAAOrpE,UAAU2wE,WAAa,SAAqBpE,EAAQqE,EAAYP,GACrE9D,KAAoB,EACpBqE,KAA4B,EACvBP,GAAUV,EAAYpD,EAAQqE,EAAYrsE,KAAKpH,QAKpD,IAHA,IAAI8G,EAAMM,KAAKgoE,GACXsE,EAAM,EACNpxE,EAAI,IACCA,EAAImxE,IAAeC,GAAO,MACjC5sE,GAAOM,KAAKgoE,EAAS9sE,GAAKoxE,EAG5B,OAAO5sE,C,EAGTolE,EAAOrpE,UAAU8wE,WACjBzH,EAAOrpE,UAAU+wE,WAAa,SAAqBxE,EAAQyE,EAAYX,GACrE9D,KAAoB,EACpByE,KAA4B,EACvBX,GACHV,EAAYpD,EAAQyE,EAAYzsE,KAAKpH,QAKvC,IAFA,IAAI8G,EAAMM,KAAKgoE,IAAWyE,GACtBH,EAAM,EACHG,EAAa,IAAMH,GAAO,MAC/B5sE,GAAOM,KAAKgoE,IAAWyE,GAAcH,EAGvC,OAAO5sE,C,EAGTolE,EAAOrpE,UAAUixE,UACjB5H,EAAOrpE,UAAUkxE,UAAY,SAAoB3E,EAAQ8D,GAGvD,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCoH,KAAKgoE,E,EAGdlD,EAAOrpE,UAAUmxE,aACjB9H,EAAOrpE,UAAUoxE,aAAe,SAAuB7E,EAAQ8D,GAG7D,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCoH,KAAKgoE,GAAWhoE,KAAKgoE,EAAS,IAAM,C,EAG7ClD,EAAOrpE,UAAUqxE,aACjBhI,EAAOrpE,UAAUmsE,aAAe,SAAuBI,EAAQ8D,GAG7D,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCoH,KAAMgoE,IAAW,EAAKhoE,KAAKgoE,EAAS,E,EAG7ClD,EAAOrpE,UAAUsxE,aACjBjI,EAAOrpE,UAAUuxE,aAAe,SAAuBhF,EAAQ8D,GAI7D,OAHA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,SAEnCoH,KAAMgoE,GACThoE,KAAKgoE,EAAS,IAAM,EACpBhoE,KAAKgoE,EAAS,IAAM,IACD,SAAnBhoE,KAAKgoE,EAAS,E,EAGrBlD,EAAOrpE,UAAUwxE,aACjBnI,EAAOrpE,UAAUyxE,aAAe,SAAuBlF,EAAQ8D,GAI7D,OAHA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QAEpB,SAAhBoH,KAAMgoE,IACVhoE,KAAMgoE,EAAS,IAAM,GACrBhoE,KAAKgoE,EAAS,IAAM,EACrBhoE,KAAKgoE,EAAS,G,EAGlBlD,EAAOrpE,UAAU0xE,gBAAkBC,IAAmB,SAA0BpF,GAE9EqF,EADArF,KAAoB,EACG,UACvB,IAAMsF,EAAQttE,KAAKgoE,GACbnT,EAAO70D,KAAKgoE,EAAS,QACb1mE,IAAVgsE,QAAgChsE,IAATuzD,GACzB0Y,GAAYvF,EAAQhoE,KAAKpH,OAAS,GAGpC,IAAMgwE,EAAK0E,EACQ,IAAjBttE,OAAOgoE,GACU,MAAjBhoE,OAAOgoE,GACPhoE,OAAOgoE,GAAU5gD,KAAAC,IAAA,EAAK,IAElBshD,EAAK3oE,OAAOgoE,GACC,IAAjBhoE,OAAOgoE,GACU,MAAjBhoE,OAAOgoE,GACPnT,EAAOztC,KAAAC,IAAA,EAAK,IAEd,OAAOokD,OAAO7C,IAAO6C,OAAO9C,IAAO8C,OAAO,I,IAG5C3G,EAAOrpE,UAAU+xE,gBAAkBJ,IAAmB,SAA0BpF,GAE9EqF,EADArF,KAAoB,EACG,UACvB,IAAMsF,EAAQttE,KAAKgoE,GACbnT,EAAO70D,KAAKgoE,EAAS,QACb1mE,IAAVgsE,QAAgChsE,IAATuzD,GACzB0Y,GAAYvF,EAAQhoE,KAAKpH,OAAS,GAGpC,IAAM+vE,EAAK2E,EAAQlmD,KAAAC,IAAA,EAAK,IACL,MAAjBrnB,OAAOgoE,GACU,IAAjBhoE,OAAOgoE,GACPhoE,OAAOgoE,GAEHY,EAAK5oE,OAAOgoE,GAAU5gD,KAAAC,IAAA,EAAK,IACd,MAAjBrnB,OAAOgoE,GACU,IAAjBhoE,OAAOgoE,GACPnT,EAEF,OAAQ4W,OAAO9C,IAAO8C,OAAO,KAAOA,OAAO7C,E,IAG7C9D,EAAOrpE,UAAUgyE,UAAY,SAAoBzF,EAAQ0F,EAAY5B,GACnE9D,KAAoB,EACpB0F,KAA4B,EACvB5B,GAAUV,EAAYpD,EAAQ0F,EAAY1tE,KAAKpH,QAKpD,IAHA,IAAI8G,EAAMM,KAAKgoE,GACXsE,EAAM,EACNpxE,EAAI,IACCA,EAAIwyE,IAAepB,GAAO,MACjC5sE,GAAOM,KAAKgoE,EAAS9sE,GAAKoxE,EAM5B,OAFI5sE,IAFJ4sE,GAAO,OAES5sE,GAAO0nB,KAAKC,IAAI,EAAG,EAAIqmD,IAEhChuE,C,EAGTolE,EAAOrpE,UAAUkyE,UAAY,SAAoB3F,EAAQ4F,EAAY9B,GACnE9D,KAAoB,EACpB4F,KAA4B,EACvB9B,GAAUV,EAAYpD,EAAQ4F,EAAY5tE,KAAKpH,QAKpD,IAHA,IAAIsC,EAAI0yE,EACJtB,EAAM,EACN5sE,EAAMM,KAAKgoE,IAAW9sE,GACnBA,EAAI,IAAMoxE,GAAO,MACtB5sE,GAAOM,KAAKgoE,IAAW9sE,GAAKoxE,EAM9B,OAFI5sE,IAFJ4sE,GAAO,OAES5sE,GAAO0nB,KAAKC,IAAI,EAAG,EAAIumD,IAEhCluE,C,EAGTolE,EAAOrpE,UAAUoyE,SAAW,SAAmB7F,EAAQ8D,GAGrD,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACtB,IAAfoH,KAAKgoE,IACyB,GAA3B,IAAOhoE,KAAKgoE,GAAU,GADKhoE,KAAKgoE,E,EAI3ClD,EAAOrpE,UAAUqyE,YAAc,SAAsB9F,EAAQ8D,GAC3D9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QAC3C,IAAM8G,EAAMM,KAAKgoE,GAAWhoE,KAAKgoE,EAAS,IAAM,EAChD,OAAc,MAAPtoE,EAAuB,WAANA,EAAmBA,C,EAG7ColE,EAAOrpE,UAAUsyE,YAAc,SAAsB/F,EAAQ8D,GAC3D9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QAC3C,IAAM8G,EAAMM,KAAKgoE,EAAS,GAAMhoE,KAAKgoE,IAAW,EAChD,OAAc,MAAPtoE,EAAuB,WAANA,EAAmBA,C,EAG7ColE,EAAOrpE,UAAUuyE,YAAc,SAAsBhG,EAAQ8D,GAI3D,OAHA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QAEpCoH,KAAMgoE,GACVhoE,KAAKgoE,EAAS,IAAM,EACpBhoE,KAAKgoE,EAAS,IAAM,GACpBhoE,KAAKgoE,EAAS,IAAM,E,EAGzBlD,EAAOrpE,UAAUwyE,YAAc,SAAsBjG,EAAQ8D,GAI3D,OAHA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QAEpCoH,KAAMgoE,IAAW,GACrBhoE,KAAKgoE,EAAS,IAAM,GACpBhoE,KAAKgoE,EAAS,IAAM,EACpBhoE,KAAKgoE,EAAS,E,EAGnBlD,EAAOrpE,UAAUyyE,eAAiBd,IAAmB,SAAyBpF,GAE5EqF,EADArF,KAAoB,EACG,UACvB,IAAMsF,EAAQttE,KAAKgoE,GACbnT,EAAO70D,KAAKgoE,EAAS,QACb1mE,IAAVgsE,QAAgChsE,IAATuzD,GACzB0Y,GAAYvF,EAAQhoE,KAAKpH,OAAS,GAGpC,IAAM8G,EAAMM,KAAKgoE,EAAS,GACL,IAAnBhoE,KAAKgoE,EAAS,GACK,MAAnBhoE,KAAKgoE,EAAS,IACbnT,GAAQ,IAEX,OAAQ4W,OAAO/rE,IAAQ+rE,OAAO,KAC5BA,OAAO6B,EACU,IAAjBttE,OAAOgoE,GACU,MAAjBhoE,OAAOgoE,GACPhoE,OAAOgoE,GAAU5gD,KAAAC,IAAA,EAAK,I,IAG1By9C,EAAOrpE,UAAU0yE,eAAiBf,IAAmB,SAAyBpF,GAE5EqF,EADArF,KAAoB,EACG,UACvB,IAAMsF,EAAQttE,KAAKgoE,GACbnT,EAAO70D,KAAKgoE,EAAS,QACb1mE,IAAVgsE,QAAgChsE,IAATuzD,GACzB0Y,GAAYvF,EAAQhoE,KAAKpH,OAAS,GAGpC,IAAM8G,GAAO4tE,GAAS,IACH,MAAjBttE,OAAOgoE,GACU,IAAjBhoE,OAAOgoE,GACPhoE,OAAOgoE,GAET,OAAQyD,OAAO/rE,IAAQ+rE,OAAO,KAC5BA,OAAOzrE,OAAOgoE,GAAU5gD,KAAAC,IAAA,EAAK,IACZ,MAAjBrnB,OAAOgoE,GACU,IAAjBhoE,OAAOgoE,GACPnT,E,IAGJiQ,EAAOrpE,UAAU2yE,YAAc,SAAsBpG,EAAQ8D,GAG3D,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCmzE,EAAAzlE,KAAatG,KAAMgoE,GAAQ,EAAM,GAAI,E,EAG9ClD,EAAOrpE,UAAU4yE,YAAc,SAAsBrG,EAAQ8D,GAG3D,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCmzE,EAAAzlE,KAAatG,KAAMgoE,GAAQ,EAAO,GAAI,E,EAG/ClD,EAAOrpE,UAAU6yE,aAAe,SAAuBtG,EAAQ8D,GAG7D,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCmzE,EAAAzlE,KAAatG,KAAMgoE,GAAQ,EAAM,GAAI,E,EAG9ClD,EAAOrpE,UAAU8yE,aAAe,SAAuBvG,EAAQ8D,GAG7D,OAFA9D,KAAoB,EACf8D,GAAUV,EAAYpD,EAAQ,EAAGhoE,KAAKpH,QACpCmzE,EAAAzlE,KAAatG,KAAMgoE,GAAQ,EAAO,GAAI,E,EAS/ClD,EAAOrpE,UAAU+yE,YACjB1J,EAAOrpE,UAAUgzE,YAAc,SAAsB/zE,EAAOstE,EAAQ0G,EAAY5C,IAC9EpxE,GAASA,EACTstE,KAAoB,EACpB0G,KAA4B,EACvB5C,IAEHR,EAAStrE,KAAMtF,EAAOstE,EAAQ0G,EADbtnD,KAAKC,IAAI,EAAG,EAAIqnD,GAAc,EACK,GAGtD,IAAIpC,EAAM,EACNpxE,EAAI,EAER,IADA8E,KAAKgoE,GAAkB,IAARttE,IACNQ,EAAIwzE,IAAepC,GAAO,MACjCtsE,KAAKgoE,EAAS9sE,GAAKR,EAAS4xE,EAAO,IAGrC,OAAOtE,EAAS0G,C,EAGlB5J,EAAOrpE,UAAUkzE,YACjB7J,EAAOrpE,UAAUmzE,YAAc,SAAsBl0E,EAAOstE,EAAQ6G,EAAY/C,IAC9EpxE,GAASA,EACTstE,KAAoB,EACpB6G,KAA4B,EACvB/C,IAEHR,EAAStrE,KAAMtF,EAAOstE,EAAQ6G,EADbznD,KAAKC,IAAI,EAAG,EAAIwnD,GAAc,EACK,GAGtD,IAAI3zE,EAAI2zE,EAAa,EACjBvC,EAAM,EAEV,IADAtsE,KAAKgoE,EAAS9sE,GAAa,IAARR,IACVQ,GAAK,IAAMoxE,GAAO,MACzBtsE,KAAKgoE,EAAS9sE,GAAKR,EAAS4xE,EAAO,IAGrC,OAAOtE,EAAS6G,C,EAGlB/J,EAAOrpE,UAAUqzE,WACjBhK,EAAOrpE,UAAUszE,WAAa,SAAqBr0E,EAAOstE,EAAQ8D,GAKhE,OAJApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,IAAM,GACtDhoE,KAAKgoE,GAAmB,IAARttE,EACTstE,EAAS,C,EAGlBlD,EAAOrpE,UAAUuzE,cACjBlK,EAAOrpE,UAAUwzE,cAAgB,SAAwBv0E,EAAOstE,EAAQ8D,GAMtE,OALApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,MAAQ,GACxDhoE,KAAKgoE,GAAmB,IAARttE,EAChBsF,KAAKgoE,EAAS,GAAMttE,IAAU,EACvBstE,EAAS,C,EAGlBlD,EAAOrpE,UAAUyzE,cACjBpK,EAAOrpE,UAAU0zE,cAAgB,SAAwBz0E,EAAOstE,EAAQ8D,GAMtE,OALApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,MAAQ,GACxDhoE,KAAKgoE,GAAWttE,IAAU,EAC1BsF,KAAKgoE,EAAS,GAAc,IAARttE,EACbstE,EAAS,C,EAGlBlD,EAAOrpE,UAAU2zE,cACjBtK,EAAOrpE,UAAU4zE,cAAgB,SAAwB30E,EAAOstE,EAAQ8D,GAQtE,OAPApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,WAAY,GAC5DhoE,KAAKgoE,EAAS,GAAMttE,IAAU,GAC9BsF,KAAKgoE,EAAS,GAAMttE,IAAU,GAC9BsF,KAAKgoE,EAAS,GAAMttE,IAAU,EAC9BsF,KAAKgoE,GAAmB,IAARttE,EACTstE,EAAS,C,EAGlBlD,EAAOrpE,UAAU6zE,cACjBxK,EAAOrpE,UAAU8zE,cAAgB,SAAwB70E,EAAOstE,EAAQ8D,GAQtE,OAPApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,WAAY,GAC5DhoE,KAAKgoE,GAAWttE,IAAU,GAC1BsF,KAAKgoE,EAAS,GAAMttE,IAAU,GAC9BsF,KAAKgoE,EAAS,GAAMttE,IAAU,EAC9BsF,KAAKgoE,EAAS,GAAc,IAARttE,EACbstE,EAAS,C,EA+ClBlD,EAAOrpE,UAAU+zE,iBAAmBpC,IAAmB,SAA2B1yE,G,IAAOstE,EAAA9jE,UAAAtL,OAAA,YAAAsL,UAAA,GAAUA,UAAA,GAAD,EAChG,OAAOqnE,EAAevrE,KAAMtF,EAAOstE,EAAQyD,OAAO,GAAIA,OAAO,sB,IAG/D3G,EAAOrpE,UAAUg0E,iBAAmBrC,IAAmB,SAA2B1yE,G,IAAOstE,EAAA9jE,UAAAtL,OAAA,YAAAsL,UAAA,GAAUA,UAAA,GAAD,EAChG,OAAOwnE,EAAe1rE,KAAMtF,EAAOstE,EAAQyD,OAAO,GAAIA,OAAO,sB,IAG/D3G,EAAOrpE,UAAUi0E,WAAa,SAAqBh1E,EAAOstE,EAAQ2H,EAAY7D,GAG5E,GAFApxE,GAASA,EACTstE,KAAoB,GACf8D,EAAU,CACb,IAAM8D,EAAQxoD,KAAKC,IAAI,EAAG,EAAKsoD,EAAc,GAE7CrE,EAAStrE,KAAMtF,EAAOstE,EAAQ2H,EAAYC,EAAQ,GAAIA,E,CAGxD,IAAI10E,EAAI,EACJoxE,EAAM,EACNr1D,EAAM,EAEV,IADAjX,KAAKgoE,GAAkB,IAARttE,IACNQ,EAAIy0E,IAAerD,GAAO,MAC7B5xE,EAAQ,GAAa,IAARuc,GAAsC,IAAzBjX,KAAKgoE,EAAS9sE,EAAI,KAC9C+b,EAAM,GAERjX,KAAKgoE,EAAS9sE,IAAMR,EAAS4xE,GAAQ,GAAKr1D,EAAM,IAGlD,OAAO+wD,EAAS2H,C,EAGlB7K,EAAOrpE,UAAUo0E,WAAa,SAAqBn1E,EAAOstE,EAAQ8H,EAAYhE,GAG5E,GAFApxE,GAASA,EACTstE,KAAoB,GACf8D,EAAU,CACb,IAAM8D,EAAQxoD,KAAKC,IAAI,EAAG,EAAKyoD,EAAc,GAE7CxE,EAAStrE,KAAMtF,EAAOstE,EAAQ8H,EAAYF,EAAQ,GAAIA,E,CAGxD,IAAI10E,EAAI40E,EAAa,EACjBxD,EAAM,EACNr1D,EAAM,EAEV,IADAjX,KAAKgoE,EAAS9sE,GAAa,IAARR,IACVQ,GAAK,IAAMoxE,GAAO,MACrB5xE,EAAQ,GAAa,IAARuc,GAAsC,IAAzBjX,KAAKgoE,EAAS9sE,EAAI,KAC9C+b,EAAM,GAERjX,KAAKgoE,EAAS9sE,IAAMR,EAAS4xE,GAAQ,GAAKr1D,EAAM,IAGlD,OAAO+wD,EAAS8H,C,EAGlBhL,EAAOrpE,UAAUs0E,UAAY,SAAoBr1E,EAAOstE,EAAQ8D,GAM9D,OALApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,KAAM,KAClDttE,EAAQ,IAAGA,EAAQ,IAAOA,EAAQ,GACtCsF,KAAKgoE,GAAmB,IAARttE,EACTstE,EAAS,C,EAGlBlD,EAAOrpE,UAAUu0E,aAAe,SAAuBt1E,EAAOstE,EAAQ8D,GAMpE,OALApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,OAAQ,OACxDhoE,KAAKgoE,GAAmB,IAARttE,EAChBsF,KAAKgoE,EAAS,GAAMttE,IAAU,EACvBstE,EAAS,C,EAGlBlD,EAAOrpE,UAAUw0E,aAAe,SAAuBv1E,EAAOstE,EAAQ8D,GAMpE,OALApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,OAAQ,OACxDhoE,KAAKgoE,GAAWttE,IAAU,EAC1BsF,KAAKgoE,EAAS,GAAc,IAARttE,EACbstE,EAAS,C,EAGlBlD,EAAOrpE,UAAUy0E,aAAe,SAAuBx1E,EAAOstE,EAAQ8D,GAQpE,OAPApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,YAAY,YAC5DhoE,KAAKgoE,GAAmB,IAARttE,EAChBsF,KAAKgoE,EAAS,GAAMttE,IAAU,EAC9BsF,KAAKgoE,EAAS,GAAMttE,IAAU,GAC9BsF,KAAKgoE,EAAS,GAAMttE,IAAU,GACvBstE,EAAS,C,EAGlBlD,EAAOrpE,UAAU00E,aAAe,SAAuBz1E,EAAOstE,EAAQ8D,GASpE,OARApxE,GAASA,EACTstE,KAAoB,EACf8D,GAAUR,EAAStrE,KAAMtF,EAAOstE,EAAQ,EAAG,YAAY,YACxDttE,EAAQ,IAAGA,EAAQ,WAAaA,EAAQ,GAC5CsF,KAAKgoE,GAAWttE,IAAU,GAC1BsF,KAAKgoE,EAAS,GAAMttE,IAAU,GAC9BsF,KAAKgoE,EAAS,GAAMttE,IAAU,EAC9BsF,KAAKgoE,EAAS,GAAc,IAARttE,EACbstE,EAAS,C,EAGlBlD,EAAOrpE,UAAU20E,gBAAkBhD,IAAmB,SAA0B1yE,G,IAAOstE,EAAA9jE,UAAAtL,OAAA,YAAAsL,UAAA,GAAUA,UAAA,GAAD,EAC9F,OAAOqnE,EAAevrE,KAAMtF,EAAOstE,GAASyD,OAAO,sBAAuBA,OAAO,sB,IAGnF3G,EAAOrpE,UAAU40E,gBAAkBjD,IAAmB,SAA0B1yE,G,IAAOstE,EAAA9jE,UAAAtL,OAAA,YAAAsL,UAAA,GAAUA,UAAA,GAAD,EAC9F,OAAOwnE,EAAe1rE,KAAMtF,EAAOstE,GAASyD,OAAO,sBAAuBA,OAAO,sB,IAkBnF3G,EAAOrpE,UAAU60E,aAAe,SAAuB51E,EAAOstE,EAAQ8D,GACpE,OAAOF,EAAW5rE,KAAMtF,EAAOstE,GAAQ,EAAM8D,E,EAG/ChH,EAAOrpE,UAAU80E,aAAe,SAAuB71E,EAAOstE,EAAQ8D,GACpE,OAAOF,EAAW5rE,KAAMtF,EAAOstE,GAAQ,EAAO8D,E,EAahDhH,EAAOrpE,UAAU+0E,cAAgB,SAAwB91E,EAAOstE,EAAQ8D,GACtE,OAAOE,EAAYhsE,KAAMtF,EAAOstE,GAAQ,EAAM8D,E,EAGhDhH,EAAOrpE,UAAUg1E,cAAgB,SAAwB/1E,EAAOstE,EAAQ8D,GACtE,OAAOE,EAAYhsE,KAAMtF,EAAOstE,GAAQ,EAAO8D,E,EAIjDhH,EAAOrpE,UAAUurC,KAAO,SAAehsC,EAAQ01E,EAAah4C,EAAOouC,GACjE,IAAKhC,EAAOxJ,SAAStgE,GAAS,MAAM,IAAIF,UAAU,+BAQlD,GAPK49B,IAAOA,EAAQ,GACfouC,GAAe,IAARA,IAAWA,EAAM9mE,KAAKpH,QAC9B83E,GAAe11E,EAAOpC,SAAQ83E,EAAc11E,EAAOpC,QAClD83E,IAAaA,EAAc,GAC5B5J,EAAM,GAAKA,EAAMpuC,IAAOouC,EAAMpuC,GAG9BouC,IAAQpuC,EAAO,OAAO,EAC1B,GAAsB,IAAlB19B,EAAOpC,QAAgC,IAAhBoH,KAAKpH,OAAc,OAAO,EAGrD,GAAI83E,EAAc,EAChB,MAAM,IAAIzL,WAAW,6BAEvB,GAAIvsC,EAAQ,GAAKA,GAAS14B,KAAKpH,OAAQ,MAAM,IAAIqsE,WAAW,sBAC5D,GAAI6B,EAAM,EAAG,MAAM,IAAI7B,WAAW,2BAG9B6B,EAAM9mE,KAAKpH,SAAQkuE,EAAM9mE,KAAKpH,QAC9BoC,EAAOpC,OAAS83E,EAAc5J,EAAMpuC,IACtCouC,EAAM9rE,EAAOpC,OAAS83E,EAAch4C,GAGtC,IAAM3vB,EAAM+9D,EAAMpuC,EAalB,OAXI14B,OAAShF,GAAqD,mBAApCogE,WAAW3/D,UAAUk1E,WAEjD3wE,KAAK2wE,WAAWD,EAAah4C,EAAOouC,GAEpC1L,WAAW3/D,UAAUyD,IAAIsK,KACvBxO,EACAgF,KAAKksE,SAASxzC,EAAOouC,GACrB4J,GAIG3nE,C,EAOT+7D,EAAOrpE,UAAUuuE,KAAO,SAAetqE,EAAKg5B,EAAOouC,EAAKvB,GAEtD,GAAmB,iBAAR7lE,EAAkB,CAS3B,GARqB,iBAAVg5B,GACT6sC,EAAW7sC,EACXA,EAAQ,EACRouC,EAAM9mE,KAAKpH,QACa,iBAARkuE,IAChBvB,EAAWuB,EACXA,EAAM9mE,KAAKpH,aAEI0I,IAAbikE,GAA8C,iBAAbA,EACnC,MAAM,IAAIzqE,UAAU,6BAEtB,GAAwB,iBAAbyqE,IAA0BT,EAAOU,WAAWD,GACrD,MAAM,IAAIzqE,UAAU,qBAAuByqE,GAE7C,GAAmB,IAAf7lE,EAAI9G,OAAc,CACpB,IAAM0E,EAAOoC,EAAI+T,WAAW,IACV,SAAd8xD,GAAwBjoE,EAAO,KAClB,WAAbioE,KAEF7lE,EAAMpC,E,MAGc,iBAARoC,EAChBA,GAAY,IACY,kBAARA,IAChBA,EAAM2mB,OAAO3mB,IAIf,GAAIg5B,EAAQ,GAAK14B,KAAKpH,OAAS8/B,GAAS14B,KAAKpH,OAASkuE,EACpD,MAAM,IAAI7B,WAAW,sBAGvB,GAAI6B,GAAOpuC,EACT,OAAO14B,KAQT,IAAI9E,EACJ,GANAw9B,KAAkB,EAClBouC,OAAcxlE,IAARwlE,EAAoB9mE,KAAKpH,OAASkuE,IAAQ,EAE3CpnE,IAAKA,EAAM,GAGG,iBAARA,EACT,IAAKxE,EAAIw9B,EAAOx9B,EAAI4rE,IAAO5rE,EACzB8E,KAAK9E,GAAKwE,MAEP,CACL,IAAMuV,EAAQ6vD,EAAOxJ,SAAS57D,GAC1BA,EACAolE,EAAO57D,KAAKxJ,EAAK6lE,GACfx8D,EAAMkM,EAAMrc,OAClB,GAAY,IAARmQ,EACF,MAAM,IAAIjO,UAAU,cAAgB4E,EAClC,qCAEJ,IAAKxE,EAAI,EAAGA,EAAI4rE,EAAMpuC,IAASx9B,EAC7B8E,KAAK9E,EAAIw9B,GAASzjB,EAAM/Z,EAAI6N,E,CAIhC,OAAO/I,I,EAOT,IAAM4wE,EAAS,GACf,SAASC,EAAGjvD,EAAKkvD,EAAYC,GAC3BH,EAAOhvD,GAAO,SAAAovD,G,iCAAMC,I,yCAIhB32E,OAAOC,eAAcwF,EAAAiT,EAAA,CAAAnM,GAAO,UAAW,CACrCnM,MAAOo2E,EAAW7rE,MAAKlF,EAAAiT,EAAA,CAAAnM,GAAO3C,WAC9B5I,UAAU,EACVD,cAAc,IAIhBwL,EAAK9M,KAAO,GAAiBhC,OAAd8O,EAAK9M,KAAK,MAAQhC,OAAJ6pB,EAAI,KAGjC/a,EAAK8pB,aAEE9pB,EAAK9M,K,kBAGVxC,IAAA,O,IAAJ,WACE,OAAOqqB,C,MAGT,SAAUlnB,GACRJ,OAAOC,eAAeyF,KAAM,OAAQ,CAClC3E,cAAc,EACdD,YAAY,EACZV,QACAY,UAAU,G,IAId/D,IAAA,W,MAAA,WACE,MAAO,GAAiBQ,OAAdiI,KAAKjG,KAAK,MAAahC,OAAT6pB,EAAI,OAAkB7pB,OAAbiI,KAAKgF,Q,OAjC5B,CAAwB+rE,E,CAmExC,SAASG,EAAuBxxE,GAI9B,IAHA,IAAIya,EAAM,GACNjf,EAAIwE,EAAI9G,OACN8/B,EAAmB,MAAXh5B,EAAI,GAAa,EAAI,EAC5BxE,GAAKw9B,EAAQ,EAAGx9B,GAAK,EAC1Bif,EAAM,IAA0BpiB,OAAtB2H,EAAIzF,MAAMiB,EAAI,EAAGA,IAASnD,OAAJoiB,GAElC,MAAO,GAAqBpiB,OAAlB2H,EAAIzF,MAAM,EAAGiB,IAASnD,OAAJoiB,E,CAa9B,SAASqxD,EAAY9wE,EAAO0nC,EAAK1F,EAAKwoC,EAAK8C,EAAQmJ,GACjD,GAAIz2E,EAAQgiC,GAAOhiC,EAAQ0nC,EAAK,CAC9B,IACIgvC,EADE9nE,EAAmB,iBAAL,IAAH84B,EAAG,YAAVriC,EAAAoqC,EAAA,CAAO/H,IAAmB,IAAM,GAY1C,MARIgvC,EAFAD,EAAa,EACH,IAAR/uC,GAAaA,IAAQqpC,OAAO,GACtB,OAAmB1zE,OAAZuR,EAAE,YAAkBvR,OAARuR,EAAE,QAA6BvR,OAAJ,GAAlBo5E,EAAa,IAAWp5E,OAAFuR,GAElD,SAAiBvR,OAARuR,EAAE,QAAiCvR,OAAR,GAAlBo5E,EAAa,GAAS,GAAMp5E,OAAFuR,EAAE,iBAC9C,GAA8BvR,OAAR,GAAlBo5E,EAAa,GAAS,GAAMp5E,OAAFuR,GAGhC,MAAYvR,OAANqqC,GAAkBrqC,OAAZuR,EAAE,YAAgBvR,OAAN2kC,GAAQ3kC,OAAFuR,GAElC,IAAIsnE,EAAOS,iBAAiB,QAASD,EAAO12E,E,EArBtD,SAAsBwqE,EAAK8C,EAAQsJ,GACjCjE,EAAerF,EAAQ,eACH1mE,IAAhB4jE,EAAI8C,SAAsD1mE,IAA7B4jE,EAAI8C,EAASsJ,IAC5C/D,GAAYvF,EAAQ9C,EAAItsE,QAAU04E,EAAa,G,CAoBjDC,CAAYrM,EAAK8C,EAAQmJ,E,CAG3B,SAAS9D,EAAgB3yE,EAAOX,GAC9B,GAAqB,iBAAVW,EACT,MAAM,IAAIk2E,EAAOY,qBAAqBz3E,EAAM,SAAUW,E,CAI1D,SAAS6yE,GAAa7yE,EAAO9B,EAAQmT,GACnC,GAAIqb,KAAKI,MAAM9sB,KAAWA,EAExB,MADA2yE,EAAe3yE,EAAOqR,GAChB,IAAI6kE,EAAOS,iBAAiBtlE,GAAQ,SAAU,aAAcrR,GAGpE,GAAI9B,EAAS,EACX,MAAM,IAAIg4E,EAAOa,yBAGnB,MAAM,IAAIb,EAAOS,iBAAiBtlE,GAAQ,SACR,MAA6BhU,OAAvBgU,EAAO,EAAI,EAAE,YAAiBhU,OAAPa,GAC7B8B,E,CAtFpCm2E,EAAE,4BACA,SAAU92E,GACR,OAAIA,EACK,GAAQhC,OAALgC,EAAK,gCAGV,gD,GACNkrE,YACL4L,EAAE,wBACA,SAAU92E,EAAM2rE,GACd,MAAO,QAAgE3tE,OAAxDgC,EAAK,qDAAiEhC,YAAD,IAAN2tE,EAAM,YAAb3lE,EAAAoqC,EAAA,CAAOu7B,G,GAC7E5qE,WACL+1E,EAAE,oBACA,SAAUx9D,EAAK+9D,EAAOr9D,GACpB,IAAI8jB,EAAM,iBAAqB9/B,OAAJsb,EAAI,sBAC3Bq+D,EAAW39D,EAWf,OAVIsS,OAAOsrD,UAAU59D,IAAUqT,KAAKwqD,IAAI79D,GAASqT,KAAAC,IAAA,EAAK,IACpDqqD,EAAWR,EAAsB97D,OAAOrB,IACd,iBAAL,IAALA,EAAK,YAAZhU,EAAAoqC,EAAA,CAAOp2B,MAChB29D,EAAWt8D,OAAOrB,IACdA,EAAQqT,KAAAC,IAAAokD,OAAO,GAAMA,OAAO,MAAO13D,GAAUqT,KAAAC,IAAAokD,OAAO,GAAMA,OAAO,QACnEiG,EAAWR,EAAsBQ,IAEnCA,GAAY,KAEd75C,GAAO,eAAkC9/B,OAAnBq5E,EAAM,eAAsBr5E,OAAT25E,E,GAExCzM,YAiEL,IAAM4M,GAAiB,oBAgBvB,SAASlL,GAAarB,EAAQoD,GAE5B,IAAIO,EADJP,EAAQA,GAASvhD,IAMjB,IAJA,IAAMvuB,EAAS0sE,EAAO1sE,OAClBk5E,EAAgB,KACd78D,EAAQ,GAEL/Z,EAAI,EAAGA,EAAItC,IAAUsC,EAAG,CAI/B,IAHA+tE,EAAY3D,EAAO7xD,WAAWvY,IAGd,OAAU+tE,EAAY,MAAQ,CAE5C,IAAK6I,EAAe,CAElB,GAAI7I,EAAY,MAAQ,EAEjBP,GAAS,IAAK,GAAIzzD,EAAMrd,KAAK,IAAM,IAAM,KAC9C,Q,CACK,GAAIsD,EAAI,IAAMtC,EAAQ,EAEtB8vE,GAAS,IAAK,GAAIzzD,EAAMrd,KAAK,IAAM,IAAM,KAC9C,Q,CAIFk6E,EAAgB7I,EAEhB,Q,CAIF,GAAIA,EAAY,MAAQ,EACjBP,GAAS,IAAK,GAAIzzD,EAAMrd,KAAK,IAAM,IAAM,KAC9Ck6E,EAAgB7I,EAChB,Q,CAIFA,EAAkE,OAArD6I,EAAgB,OAAU,GAAK7I,EAAY,M,MAC/C6I,IAEJpJ,GAAS,IAAK,GAAIzzD,EAAMrd,KAAK,IAAM,IAAM,KAMhD,GAHAk6E,EAAgB,KAGZ7I,EAAY,IAAM,CACpB,IAAKP,GAAS,GAAK,EAAG,MACtBzzD,EAAMrd,KAAKqxE,E,MACN,GAAIA,EAAY,KAAO,CAC5B,IAAKP,GAAS,GAAK,EAAG,MACtBzzD,EAAMrd,KACJqxE,GAAa,EAAM,IACP,GAAZA,EAAmB,I,MAEhB,GAAIA,EAAY,MAAS,CAC9B,IAAKP,GAAS,GAAK,EAAG,MACtBzzD,EAAMrd,KACJqxE,GAAa,GAAM,IACnBA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,I,KAEhB,MAAIA,EAAY,SASrB,MAAM,IAAI79D,MAAM,sBARhB,IAAKs9D,GAAS,GAAK,EAAG,MACtBzzD,EAAMrd,KACJqxE,GAAa,GAAO,IACpBA,GAAa,GAAM,GAAO,IAC1BA,GAAa,EAAM,GAAO,IACd,GAAZA,EAAmB,IAGgB,C,CAIzC,OAAOh0D,C,CA4BT,SAAS2xD,GAAevzD,GACtB,OAAOy1D,EAAAiJ,YAxHT,SAAsB1+D,GAMpB,IAFAA,GAFAA,EAAMA,EAAI8nB,MAAM,KAAK,IAEX4hC,OAAOzmD,QAAQu7D,GAAmB,KAEpCj5E,OAAS,EAAG,MAAO,GAE3B,KAAOya,EAAIza,OAAS,GAAM,GACxBya,GAAY,IAEd,OAAOA,C,CA6GmB2+D,CAAY3+D,G,CAGxC,SAAS+0D,GAAY74C,EAAK0iD,EAAKjK,EAAQpvE,GACrC,IAAIsC,EACJ,IAAKA,EAAI,EAAGA,EAAItC,KACVsC,EAAK8sE,GAAUiK,EAAIr5E,QAAYsC,GAAKq0B,EAAI32B,UADpBsC,EAExB+2E,EAAI/2E,EAAI8sE,GAAUz4C,EAAIr0B,GAExB,OAAOA,C,CAMT,SAAS2qE,GAAYz9D,EAAK2D,GACxB,OAAO3D,aAAe2D,GACZ,MAAP3D,GAAkC,MAAnBA,EAAIqB,aAA+C,MAAxBrB,EAAIqB,YAAY1P,MACzDqO,EAAIqB,YAAY1P,OAASgS,EAAKhS,I,CAEpC,SAASssE,GAAaj+D,GAEpB,OAAOA,GAAQA,C,CAKjB,IAAM+iE,GAAsB,WAG1B,IAFA,IAAM+G,EAAW,mBACXC,EAAQ,IAAIvpE,MAAM,KACf1N,EAAI,EAAGA,EAAI,KAAMA,EAExB,IADA,IAAMk3E,EAAU,GAAJl3E,EACHohC,EAAI,EAAGA,EAAI,KAAMA,EACxB61C,EAAMC,EAAM91C,GAAK41C,EAASh3E,GAAKg3E,EAAS51C,GAG5C,OAAO61C,C,CATmB,GAa5B,SAAS/E,GAAoBnlE,GAC3B,MAAyB,oBAAXwjE,OAAyB4G,GAAyBpqE,C,CAGlE,SAASoqE,KACP,MAAM,IAAIjnE,MAAM,uB,uCCtjElB,IACAknE,EACAC,E,0JADAD,EAiDA,SAAsBE,GACpB,IAAIC,EAcA52C,EAbA62C,EAAOC,EAAQH,GACfI,EAAWF,EAAK,GAChBG,EAAkBH,EAAK,GAEvBrqE,EAAM,IAAIyqE,EAVhB,SAAsBN,EAAKI,EAAUC,GACnC,OAAuC,GAA9BD,EAAWC,GAAuB,EAAKA,C,CAS9BE,CAAYP,EAAKI,EAAUC,IAEzCG,EAAU,EAGVC,EAAMJ,EAAkB,EACxBD,EAAW,EACXA,EAGJ,IAAK/2C,EAAI,EAAGA,EAAIo3C,EAAKp3C,GAAK,EACxB42C,EACES,EAAWV,EAAI/+D,WAAWooB,KAAO,GAChCq3C,EAAUV,EAAI/+D,WAAWooB,EAAI,KAAO,GACpCq3C,EAAUV,EAAI/+D,WAAWooB,EAAI,KAAO,EACrCq3C,EAAUV,EAAI/+D,WAAWooB,EAAI,IAC/BxzB,EAAI2qE,KAAaP,GAAQ,GAAM,IAC/BpqE,EAAI2qE,KAAaP,GAAQ,EAAK,IAC9BpqE,EAAI2qE,KAAmB,IAANP,EAGK,IAApBI,IACFJ,EACES,EAAWV,EAAI/+D,WAAWooB,KAAO,EAChCq3C,EAAUV,EAAI/+D,WAAWooB,EAAI,KAAO,EACvCxzB,EAAI2qE,KAAmB,IAANP,GAGK,IAApBI,IACFJ,EACES,EAAWV,EAAI/+D,WAAWooB,KAAO,GAChCq3C,EAAUV,EAAI/+D,WAAWooB,EAAI,KAAO,EACpCq3C,EAAUV,EAAI/+D,WAAWooB,EAAI,KAAO,EACvCxzB,EAAI2qE,KAAaP,GAAQ,EAAK,IAC9BpqE,EAAI2qE,KAAmB,IAANP,GAGnB,OAAOpqE,C,EA3FTkqE,EAkHA,SAAwBY,GAQtB,IAPA,IAAIV,EACAW,EAAMD,EAAMv6E,OACZy6E,EAAaD,EAAM,EACnBr5D,EAAQ,GACRu5D,EAAiB,MAGZlvC,EAAI,EAAG6uC,EAAOG,EAAMC,EAAYjvC,EAAI6uC,EAAM7uC,GAAKkvC,EACtDv5D,EAAMniB,KAAK27E,EAAYJ,EAAO/uC,EAAGA,EAAKkvC,EAAkBL,EAAOA,EAAQ7uC,EAAIkvC,IAI1D,IAAfD,GACFZ,EAAMU,EAAMC,EAAM,GAClBr5D,EAAMniB,KACJ47E,EAAOf,GAAO,GACde,EAAOf,GAAQ,EAAK,IACpB,OAEsB,IAAfY,IACTZ,GAAOU,EAAMC,EAAM,IAAM,GAAKD,EAAMC,EAAM,GAC1Cr5D,EAAMniB,KACJ47E,EAAOf,GAAO,IACde,EAAOf,GAAQ,EAAK,IACpBe,EAAOf,GAAQ,EAAK,IACpB,MAIJ,OAAO14D,EAAMhhB,KAAK,G,EAzIpB,IALA,IAAIy6E,EAAS,GACTN,EAAY,GACZJ,EAA4B,oBAAf1X,WAA6BA,WAAaxyD,MAEvD6qE,EAAO,mEACFC,EAAI,EAAGC,EAAMF,EAAK76E,OAAQ86E,EAAIC,IAAOD,EAC5CF,EAAOE,GAAKD,EAAKC,GACjBR,EAAUO,EAAKhgE,WAAWigE,IAAMA,EAQlC,SAASf,EAASH,GAChB,IAAIoB,EAAMpB,EAAI55E,OAEd,GAAIg7E,EAAM,EAAI,EACZ,MAAM,IAAIxoE,MAAM,kDAKlB,IAAIwnE,EAAWJ,EAAI/0D,QAAQ,KAO3B,OANiB,IAAbm1D,IAAiBA,EAAWgB,GAMzB,CAAChB,EAJcA,IAAagB,EAC/B,EACA,EAAKhB,EAAW,E,CAsEtB,SAASW,EAAaJ,EAAOz6C,EAAOouC,GAGlC,IAFA,IAAI2L,EARoBrnC,EASpB/2B,EAAS,GACJw/D,EAAIn7C,EAAOm7C,EAAI/M,EAAK+M,GAAK,EAChCpB,GACGU,EAAOU,IAAM,GAAM,WACnBV,EAAOU,EAAI,IAAM,EAAK,QACP,IAAfV,EAAMU,EAAI,IACbx/D,EAAOzc,KAdF47E,GADiBpoC,EAeMqnC,IAdT,GAAK,IACxBe,EAAOpoC,GAAO,GAAK,IACnBooC,EAAOpoC,GAAO,EAAI,IAClBooC,EAAa,GAANpoC,IAaT,OAAO/2B,EAAOtb,KAAK,G,CAjGrBm6E,EAAU,IAAIz/D,WAAW,IAAM,GAC/By/D,EAAU,IAAIz/D,WAAW,IAAM,E;yFClB/B,IAAAqgE,EAiCAC,E,2IAjCAD,EAAe,SAAUjY,EAAQmM,EAAQgM,EAAMC,EAAMC,GACnD,IAAI13E,EAAGq3B,EACHsgD,EAAiB,EAAVD,EAAeD,EAAO,EAC7BG,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBE,GAAQ,EACRp5E,EAAI84E,EAAQE,EAAS,EAAK,EAC1B7iD,EAAI2iD,GAAO,EAAK,EAChB76C,EAAI0iC,EAAOmM,EAAS9sE,GAOxB,IALAA,GAAKm2B,EAEL70B,EAAI28B,GAAM,IAAOm7C,GAAU,EAC3Bn7C,KAAQm7C,EACRA,GAASH,EACFG,EAAQ,EAAG93E,EAAS,IAALA,EAAYq/D,EAAOmM,EAAS9sE,GAAIA,GAAKm2B,EAAGijD,GAAS,GAKvE,IAHAzgD,EAAIr3B,GAAM,IAAO83E,GAAU,EAC3B93E,KAAQ83E,EACRA,GAASL,EACFK,EAAQ,EAAGzgD,EAAS,IAALA,EAAYgoC,EAAOmM,EAAS9sE,GAAIA,GAAKm2B,EAAGijD,GAAS,GAEvE,GAAU,IAAN93E,EACFA,EAAI,EAAI63E,MACH,IAAI73E,IAAM43E,EACf,OAAOvgD,EAAI0gD,IAAsBptD,KAAdgS,GAAI,EAAK,GAE5BtF,GAAQzM,KAAKC,IAAI,EAAG4sD,GACpBz3E,GAAQ63E,C,CAEV,OAAQl7C,GAAI,EAAK,GAAKtF,EAAIzM,KAAKC,IAAI,EAAG7qB,EAAIy3E,E,EAG5CF,EAAgB,SAAUlY,EAAQnhE,EAAOstE,EAAQgM,EAAMC,EAAMC,GAC3D,IAAI13E,EAAGq3B,EAAGrgB,EACN2gE,EAAiB,EAAVD,EAAeD,EAAO,EAC7BG,GAAQ,GAAKD,GAAQ,EACrBE,EAAQD,GAAQ,EAChBI,EAAe,KAATP,EAAc7sD,KAAKC,IAAI,GAAG,IAAOD,KAAKC,IAAI,GAAG,IAAO,EAC1DnsB,EAAI84E,EAAO,EAAKE,EAAS,EACzB7iD,EAAI2iD,EAAO,GAAI,EACf76C,EAAIz+B,EAAQ,GAAgB,IAAVA,GAAe,EAAIA,EAAQ,EAAK,EAAI,EAmC1D,IAjCAA,EAAQ0sB,KAAKwqD,IAAIl3E,GAEbuT,MAAMvT,IAAUA,IAAUysB,KAC5B0M,EAAI5lB,MAAMvT,GAAS,EAAI,EACvB8B,EAAI43E,IAEJ53E,EAAI4qB,KAAKI,MAAMJ,KAAK9uB,IAAIoC,GAAS0sB,KAAKqtD,KAClC/5E,GAAS8Y,EAAI4T,KAAKC,IAAI,GAAI7qB,IAAM,IAClCA,IACAgX,GAAK,IAGL9Y,GADE8B,EAAI63E,GAAS,EACNG,EAAKhhE,EAELghE,EAAKptD,KAAKC,IAAI,EAAG,EAAIgtD,IAEpB7gE,GAAK,IACfhX,IACAgX,GAAK,GAGHhX,EAAI63E,GAASD,GACfvgD,EAAI,EACJr3B,EAAI43E,GACK53E,EAAI63E,GAAS,GACtBxgD,GAAKn5B,EAAS8Y,EAAK,GAAK4T,KAAKC,IAAI,EAAG4sD,GACpCz3E,GAAQ63E,IAERxgD,EAAIn5B,EAAQ0sB,KAAKC,IAAI,EAAGgtD,EAAQ,GAAKjtD,KAAKC,IAAI,EAAG4sD,GACjDz3E,EAAI,IAIDy3E,GAAQ,EAAGpY,EAAOmM,EAAS9sE,GAAS,IAAJ24B,EAAU34B,GAAKm2B,EAAGwC,GAAK,IAAKogD,GAAQ,GAI3E,IAFAz3E,EAAIA,GAAMy3E,EAAQpgD,EAClBsgD,GAAQF,EACDE,EAAO,EAAGtY,EAAOmM,EAAS9sE,GAAS,IAAJsB,EAAUtB,GAAKm2B,EAAG70B,GAAK,IAAK23E,GAAQ,GAE1EtY,EAAOmM,EAAS9sE,EAAIm2B,IAAU,IAAJ8H,C,uCCnF5B,a,mJAcA3+B,EAAAC,QAAiB,SAAoBikE,GACnC,OAAO,IAAI12D,SAAQ,SAA4BP,EAASC,GACtD,IAGIgtE,EAHAz0C,EAAcy+B,EAAOtlD,KACrBu7D,EAAiBjW,EAAOxrC,QACxByvC,EAAejE,EAAOiE,aAE1B,SAAS5+D,IACH26D,EAAOsC,aACTtC,EAAOsC,YAAY4T,YAAYF,GAG7BhW,EAAOwC,QACTxC,EAAOwC,OAAO19C,oBAAoB,QAASkxD,E,CAI3Cvb,EAAAoC,WAAiBt7B,IAAgBk5B,EAAAuD,+BAC5BiY,EAAe,gBAGxB,IAAIv8D,EAAU,IAAI6gC,eAGlB,GAAIylB,EAAO11C,KAAM,CACf,IAAI6rD,EAAWnW,EAAO11C,KAAK6rD,UAAY,GACnCx2E,EAAWqgE,EAAO11C,KAAK3qB,SAAWy2E,SAASn5D,mBAAmB+iD,EAAO11C,KAAK3qB,WAAa,GAC3Fs2E,EAAeI,cAAgB,SAAW//D,KAAK6/D,EAAW,IAAMx2E,E,CAGlE,IAAI2hE,EAAWC,EAAcvB,EAAOwB,QAASxB,EAAO9sC,KAOpD,SAASojD,IACP,GAAK58D,EAAL,CAIA,IAAI68D,EAAkB,0BAA2B78D,EAAU88D,EAAa98D,EAAQ+8D,yBAA2B,KAGvGz0C,EAAW,CACbtnB,KAHkBupD,GAAiC,SAAjBA,GAA6C,SAAjBA,EACvCvqD,EAAQsoB,SAA/BtoB,EAAQ8gC,aAGRxZ,OAAQtnB,EAAQsnB,OAChB01C,WAAYh9D,EAAQg9D,WACpBliD,QAAS+hD,EACTvW,OAAQA,EACRtmD,QAASA,GAGXi9D,GAAO,SAAkB36E,GACvB+M,EAAQ/M,GACRqJ,G,IACC,SAAiBvC,GAClBkG,EAAOlG,GACPuC,G,GACC28B,GAGHtoB,EAAU,IAxBR,C,CA4FJ,GAnGAA,EAAQC,KAAKqmD,EAAOxzD,OAAOm4D,cAAelD,EAASH,EAAUtB,EAAOljD,OAAQkjD,EAAO0B,mBAAmB,GAGtGhoD,EAAQ0P,QAAU42C,EAAO52C,QA+BrB,cAAe1P,EAEjBA,EAAQ48D,UAAYA,EAGpB58D,EAAQga,mBAAqB,WACtBha,GAAkC,IAAvBA,EAAQ0U,aAQD,IAAnB1U,EAAQsnB,QAAkBtnB,EAAQk9D,aAAwD,IAAzCl9D,EAAQk9D,YAAY73D,QAAQ,WAKjFoK,WAAWmtD,E,EAKf58D,EAAQm9D,QAAU,WACXn9D,IAIL1Q,EAAO,IAAIk7D,EAAW,kBAAmBA,EAAW4S,aAAc9W,EAAQtmD,IAG1EA,EAAU,K,EAIZA,EAAQM,QAAU,WAGhBhR,EAAO,IAAIk7D,EAAW,gBAAiBA,EAAW6S,YAAa/W,EAAQtmD,EAASA,IAGhFA,EAAU,I,EAIZA,EAAQs9D,UAAY,WAClB,IAAIC,EAAsBjX,EAAO52C,QAAU,cAAgB42C,EAAO52C,QAAU,cAAgB,mBACxF62C,EAAeD,EAAOC,cAAgBqD,EACtCtD,EAAOiX,sBACTA,EAAsBjX,EAAOiX,qBAE/BjuE,EAAO,IAAIk7D,EACT+S,EACAhX,EAAaK,oBAAsB4D,EAAWgT,UAAYhT,EAAW4S,aACrE9W,EACAtmD,IAGFA,EAAU,I,EAMR+gD,EAAAuD,uBAA8B,CAEhC,IAAImZ,GAAanX,EAAOoX,iBAAmBC,EAAgB/V,KAActB,EAAOoE,eAC9EkT,EAAA1vE,KAAao4D,EAAOoE,qBACpBxhE,EAEEu0E,IACFlB,EAAejW,EAAOqE,gBAAkB8S,E,CAKxC,qBAAsBz9D,GACxB+gD,EAAAzsD,QAAcioE,GAAgB,SAA0Bj1E,EAAKnI,QAChC,IAAhB0oC,GAAqD,iBAAtB1oC,EAAImwB,qBAErCitD,EAAep9E,GAGtB6gB,EAAQ69D,iBAAiB1+E,EAAKmI,E,IAM/By5D,EAAA+C,YAAkBwC,EAAOoX,mBAC5B19D,EAAQ09D,kBAAoBpX,EAAOoX,iBAIjCnT,GAAiC,SAAjBA,IAClBvqD,EAAQuqD,aAAejE,EAAOiE,cAIS,mBAA9BjE,EAAOwX,oBAChB99D,EAAQ7b,iBAAiB,WAAYmiE,EAAOwX,oBAIP,mBAA5BxX,EAAOyX,kBAAmC/9D,EAAQg+D,QAC3Dh+D,EAAQg+D,OAAO75E,iBAAiB,WAAYmiE,EAAOyX,mBAGjDzX,EAAOsC,aAAetC,EAAOwC,UAG/BwT,EAAa,SAAS2B,GACfj+D,IAGL1Q,GAAQ2uE,GAAWA,GAAUA,EAAOtqE,KAAQ,IAAIq1D,EAAkBiV,GAClEj+D,EAAQk+D,QACRl+D,EAAU,K,EAGZsmD,EAAOsC,aAAetC,EAAOsC,YAAYuV,UAAU7B,GAC/ChW,EAAOwC,SACTxC,EAAOwC,OAAOC,QAAUuT,IAAehW,EAAOwC,OAAO3kE,iBAAiB,QAASm4E,KAI9Ez0C,IACHA,EAAc,MAGhB,IAAI5V,EAAWmsD,EAAcxW,GAEzB31C,IAA8D,IAAlD,CAAE,OAAQ,QAAS,QAAS5M,QAAQ4M,GAClD3iB,EAAO,IAAIk7D,EAAW,wBAA0Bv4C,EAAW,IAAKu4C,EAAW6T,gBAAiB/X,IAM9FtmD,EAAQqgB,KAAKwH,E,0CC3NjB,a,iBAWAzlC,EAAAC,QAAiB,SAAgBgN,EAASC,EAAQg5B,GAChD,IAAIwiC,EAAiBxiC,EAASg+B,OAAOwE,eAChCxiC,EAAShB,QAAWwjC,IAAkBA,EAAexiC,EAAShB,QAGjEh4B,EAAO,IAAIk7D,EACT,mCAAqCliC,EAAShB,OAC9C,CAACkjC,EAAW6T,gBAAiB7T,EAAWC,kBAAkBz7C,KAAKI,MAAMkZ,EAAShB,OAAS,KAAO,GAC9FgB,EAASg+B,OACTh+B,EAAStoB,QACTsoB,IAPFj5B,EAAQi5B,E,uCCdZ,a,iBAIAlmC,EAAAC,QACE0+D,EAAAuD,uBAIW,CACLhsC,MAAO,SAAe32B,EAAMW,EAAOg8E,EAASl7C,EAAMjL,EAAQjG,GACxD,IAAIqsD,EAAS,GACbA,EAAO/+E,KAAKmC,EAAO,IAAM4hB,mBAAmBjhB,IAExCy+D,EAAA4C,SAAe2a,IACjBC,EAAO/+E,KAAK,WAAa,IAAI6B,KAAKi9E,GAASE,eAGzCzd,EAAA2C,SAAetgC,IACjBm7C,EAAO/+E,KAAK,QAAU4jC,GAGpB29B,EAAA2C,SAAevrC,IACjBomD,EAAO/+E,KAAK,UAAY24B,IAGX,IAAXjG,GACFqsD,EAAO/+E,KAAK,UAGdoB,SAAS29E,OAASA,EAAO59E,KAAK,K,EAGhCuN,KAAM,SAAcvM,GAClB,IAAIm7B,EAAQl8B,SAAS29E,OAAOzhD,MAAM,IAAIvN,OAAO,aAAe5tB,EAAO,cACnE,OAAQm7B,EAAQ2hD,mBAAmB3hD,EAAM,IAAM,I,EAGjDx4B,OAAQ,SAAgB3C,GACtBiG,KAAK0wB,MAAM32B,EAAM,GAAIN,KAAK2lB,MAAQ,M,GAO/B,CACLsR,MAAO,WAAiB,EACxBpqB,KAAM,WAAkB,OAAO,I,EAC/B5J,OAAQ,WAAkB,E,sCCjDlC,a,8BAcAlC,EAAAC,QAAiB,SAAuBylE,EAAS4W,GAC/C,OAAI5W,IAAY6W,EAAcD,GACrBE,EAAY9W,EAAS4W,GAEvBA,C,uCClBT,aAQAt8E,EAAAC,QAAiB,SAAuBm3B,GAItC,MAAO,8BAA8BloB,KAAKkoB,E,uCCZ5C,aASAp3B,EAAAC,QAAiB,SAAqBylE,EAAS+W,GAC7C,OAAOA,EACH/W,EAAQ5pD,QAAO,OAAS,IAAM,IAAM2gE,EAAY3gE,QAAO,OAAS,IAChE4pD,C,uCCZN,a,iBAMIgX,EAAoB,CACtB,MAAO,gBAAiB,iBAAkB,eAAgB,OAC1D,UAAW,OAAQ,OAAQ,oBAAqB,sBAChD,gBAAiB,WAAY,eAAgB,sBAC7C,UAAW,cAAe,cAgB5B18E,EAAAC,QAAiB,SAAsBy4B,GACrC,IACI37B,EACAmI,EACAxE,EAHAgtE,EAAS,GAKb,OAAKh1C,GAELimC,EAAAzsD,QAAcwmB,EAAQiI,MAAM,OAAO,SAAgBg8C,GAKjD,GAJAj8E,EAAIi8E,EAAK15D,QAAQ,KACjBlmB,EAAM4hE,EAAA4D,KAAWoa,EAAKntD,OAAO,EAAG9uB,IAAIwsB,cACpChoB,EAAMy5D,EAAA4D,KAAWoa,EAAKntD,OAAO9uB,EAAI,IAE7B3D,EAAK,CACP,GAAI2wE,EAAO3wE,IAAQ2/E,EAAkBz5D,QAAQlmB,IAAQ,EACnD,OAGA2wE,EAAO3wE,GADG,eAARA,GACa2wE,EAAO3wE,GAAO2wE,EAAO3wE,GAAO,IAAIQ,OAAO,CAAC2H,IAEzCwoE,EAAO3wE,GAAO2wE,EAAO3wE,GAAO,KAAOmI,EAAMA,C,KAKtDwoE,GAnBgBA,C,uCChCzB,a,iBAIA1tE,EAAAC,QACE0+D,EAAAuD,uBAIG,WACC,IAEI0a,EAFAC,EAAO,kBAAkB3tE,KAAKoO,UAAUkd,WACxCsiD,EAAiBt+E,SAASs2B,cAAc,KAS5C,SAASioD,EAAW3lD,GAClB,IAAI/B,EAAO+B,EAWX,OATIylD,IAEFC,EAAeE,aAAa,OAAQ3nD,GACpCA,EAAOynD,EAAeznD,MAGxBynD,EAAeE,aAAa,OAAQ3nD,GAG7B,CACLA,KAAMynD,EAAeznD,KACrBxF,SAAUitD,EAAejtD,SAAWitD,EAAejtD,SAAS/T,QAAO,KAAO,IAAM,GAChFwT,KAAMwtD,EAAextD,KACrBirC,OAAQuiB,EAAeviB,OAASuiB,EAAeviB,OAAOz+C,QAAO,MAAQ,IAAM,GAC3EqqB,KAAM22C,EAAe32C,KAAO22C,EAAe32C,KAAKrqB,QAAO,KAAO,IAAM,GACpEue,SAAUyiD,EAAeziD,SACzB4iD,KAAMH,EAAeG,KACrBC,SAAiD,MAAvCJ,EAAgBI,SAASzoE,OAAO,GACxCqoE,EAAeI,SACf,IAAMJ,EAAeI,S,CAY3B,OARAN,EAAYG,EAAWv6E,OAAO4yB,SAASC,MAQhC,SAAyB8nD,GAC9B,IAAIzP,EAAS/O,EAAC2C,SAAe6b,GAAeJ,EAAWI,GAAcA,EACrE,OAAQzP,EAAO79C,WAAa+sD,EAAU/sD,UAClC69C,EAAOp+C,OAASstD,EAAUttD,I,EAhDjC,GAsDQ,WACL,OAAO,C,uCChEf,a,iBAWA,SAAS8tD,EAAc5yE,GAErB49D,EAAWp5D,KAAKxJ,KAAiB,MAAXgF,EAAkB,WAAaA,EAAS49D,EAAWiV,cACzE73E,KAAKjG,KAAO,e,YAGdmjE,SAAe0a,EAAehV,EAAY,CACxCkV,YAAY,IAGdt9E,EAAAC,QAAiBm9E,C,sCCrBjB,aAEAp9E,EAAAC,QAAiB,SAAuBm3B,GACtC,IAAIsD,EAAQ,4BAA4B6iD,KAAKnmD,GAC7C,OAAOsD,GAASA,EAAM,IAAM,E,uCCH9B16B,EAAAC,QAAiB,I,sCCDjB,aAEAD,EAAAC,QAAiB,SAAkBC,GACjC,SAAUA,IAASA,EAAMo9E,W,uCCH3B,a,iBAYAt9E,EAAAC,QAAiB,SAAqBu9E,EAASC,GAE7CA,EAAUA,GAAW,GACrB,IAAIvZ,EAAS,GAEb,SAASwZ,EAAel9E,EAAQ0b,GAC9B,OAAIyiD,EAAA8C,cAAoBjhE,IAAWm+D,EAAA8C,cAAoBvlD,GAC9CyiD,EAAArW,MAAY9nD,EAAQ0b,GAClByiD,EAAA8C,cAAoBvlD,GACtByiD,EAAArW,MAAY,GAAIpsC,GACdyiD,EAAAtwD,QAAc6N,GAChBA,EAAOzc,QAETyc,C,CAIT,SAASyhE,EAAoBvhE,GAC3B,OAAKuiD,EAAA+C,YAAkB+b,EAAQrhE,IAEnBuiD,EAAA+C,YAAkB8b,EAAQphE,SAA/B,EACEshE,OAAe52E,EAAW02E,EAAQphE,IAFlCshE,EAAeF,EAAQphE,GAAOqhE,EAAQrhE,G,CAOjD,SAASwhE,EAAiBxhE,GACxB,IAAKuiD,EAAA+C,YAAkB+b,EAAQrhE,IAC7B,OAAOshE,OAAe52E,EAAW22E,EAAQrhE,G,CAK7C,SAASyhE,EAAiBzhE,GACxB,OAAKuiD,EAAA+C,YAAkB+b,EAAQrhE,IAEnBuiD,EAAA+C,YAAkB8b,EAAQphE,SAA/B,EACEshE,OAAe52E,EAAW02E,EAAQphE,IAFlCshE,OAAe52E,EAAW22E,EAAQrhE,G,CAO7C,SAAS0hE,EAAgB1hE,GACvB,OAAIA,KAAQqhE,EACHC,EAAeF,EAAQphE,GAAOqhE,EAAQrhE,IACpCA,KAAQohE,EACVE,OAAe52E,EAAW02E,EAAQphE,SADpC,C,CAKT,IAAI2hE,EAAW,CACb3mD,IAAOwmD,EACPltE,OAAUktE,EACVh/D,KAAQg/D,EACRlY,QAAWmY,EACX/W,iBAAoB+W,EACpB3W,kBAAqB2W,EACrBjY,iBAAoBiY,EACpBvwD,QAAWuwD,EACXG,eAAkBH,EAClBvC,gBAAmBuC,EACnB7W,QAAW6W,EACX1V,aAAgB0V,EAChBvV,eAAkBuV,EAClBtV,eAAkBsV,EAClBlC,iBAAoBkC,EACpBnC,mBAAsBmC,EACtBI,WAAcJ,EACdrV,iBAAoBqV,EACpBpV,cAAiBoV,EACjBK,eAAkBL,EAClB1iD,UAAa0iD,EACbM,UAAaN,EACbO,WAAcP,EACdrX,YAAeqX,EACfQ,WAAcR,EACdS,iBAAoBT,EACpBnV,eAAkBoV,GASpB,OANAnf,EAAAzsD,QAAcpS,OAAOqU,KAAKqpE,GAASjgF,OAAOuC,OAAOqU,KAAKspE,KAAW,SAA4BrhE,GAC3F,IAAIksC,EAAQy1B,EAAS3hE,IAASuhE,EAC1BY,EAAcj2B,EAAMlsC,GACvBuiD,EAAA+C,YAAkB6c,IAAgBj2B,IAAUw1B,IAAqB5Z,EAAO9nD,GAAQmiE,E,IAG5Era,C,uCClGT,IAAAv0B,EAAA/yC,EAAA,S,aAEIwoB,Q,aAGAo5D,EAAa,GAGjB,CAAC,SAAU,UAAW,SAAU,WAAY,SAAU,UAAUtsE,SAAQ,SAASX,EAAM7Q,GACrF89E,EAAWjtE,GAAQ,SAAmBsP,GACpC,YAAmB,IAALA,EAAK,YAAZtb,EAAAoqC,EAAA,CAAO9uB,MAAUtP,GAAQ,KAAO7Q,EAAI,EAAI,KAAO,KAAO6Q,C,KAIjE,IAAIktE,EAAqB,GASzBD,EAAWra,aAAe,SAAsBua,EAAWt5D,EAAS5a,GAClE,SAASm0E,EAAcC,EAAKC,GAC1B,MAAO,WAAUC,EAAa,0BAA6BF,EAAM,IAAOC,GAAQr0E,EAAU,KAAOA,EAAU,G,CAI7G,OAAO,SAAStK,EAAO0+E,EAAKvnE,GAC1B,IAAkB,IAAdqnE,EACF,MAAM,IAAItW,EACRuW,EAAcC,EAAK,qBAAuBx5D,EAAU,OAASA,EAAU,KACvEgjD,EAAW2W,gBAef,OAXI35D,IAAYq5D,EAAmBG,KACjCH,EAAmBG,IAAO,EAE1B/gF,QAAQ0N,KACNozE,EACEC,EACA,+BAAiCx5D,EAAU,8CAK1Cs5D,GAAYA,EAAUx+E,EAAO0+E,EAAKvnE,E,GAkC7CrX,EAAAC,QAAiB,CACfmkE,cAxBF,SAAuBr8D,EAASi3E,EAAQC,GACtC,GAAuB,iBAAZl3E,EACT,MAAM,IAAIqgE,EAAW,4BAA6BA,EAAW8W,sBAI/D,IAFA,IAAI/qE,EAAOrU,OAAOqU,KAAKpM,GACnBrH,EAAIyT,EAAK/V,OACNsC,KAAM,GAAG,CACd,IAAIk+E,EAAMzqE,EAAKzT,GACXg+E,EAAYM,EAAOJ,GACvB,GAAIF,EAAJ,CACE,IAAIx+E,EAAQ6H,EAAQ62E,GAChB7yE,OAAmBjF,IAAV5G,GAAuBw+E,EAAUx+E,EAAO0+E,EAAK72E,GAC1D,IAAe,IAAXgE,EACF,MAAM,IAAIq8D,EAAW,UAAYwW,EAAM,YAAc7yE,EAAQq8D,EAAW8W,qB,MAI5E,IAAqB,IAAjBD,EACF,MAAM,IAAI7W,EAAW,kBAAoBwW,EAAKxW,EAAW+W,e,GAO7Dvb,WAAY4a,E,sCCpFdx+E,EAAAC,QAAiB,CACfmlB,QAAW,S,sCCDb,a,iBAUA,SAASg6D,EAAYC,GACnB,GAAwB,mBAAbA,EACT,MAAM,IAAI/+E,UAAU,gCAGtB,IAAIg/E,EAEJ95E,KAAKgR,QAAU,IAAIhJ,SAAQ,SAAyBP,GAClDqyE,EAAiBryE,C,IAGnB,IAAIqP,EAAQ9W,KAGZA,KAAKgR,QAAQjS,MAAK,SAASs3E,GACzB,GAAKv/D,EAAMijE,WAAX,CAEA,IAAI7+E,EACA+/D,EAAInkD,EAAMijE,WAAWnhF,OAEzB,IAAKsC,EAAI,EAAGA,EAAI+/D,EAAG//D,IACjB4b,EAAMijE,WAAW7+E,GAAGm7E,GAEtBv/D,EAAMijE,WAAa,IARI,C,IAYzB/5E,KAAKgR,QAAQjS,KAAO,SAASi7E,GAC3B,IAAIC,EAEAjpE,EAAU,IAAIhJ,SAAQ,SAASP,GACjCqP,EAAMy/D,UAAU9uE,GAChBwyE,EAAWxyE,C,IACV1I,KAAKi7E,GAMR,OAJAhpE,EAAQqlE,OAAS,WACfv/D,EAAM89D,YAAYqF,E,EAGbjpE,C,EAGT6oE,GAAS,SAAgB70E,GACnB8R,EAAMgjB,SAKVhjB,EAAMgjB,OAAS,IAAIsnC,EAAcp8D,GACjC80E,EAAehjE,EAAMgjB,Q,IAOzB8/C,EAAYn+E,UAAUwlE,iBAAmB,WACvC,GAAIjhE,KAAK85B,OACP,MAAM95B,KAAK85B,M,EAQf8/C,EAAYn+E,UAAU86E,UAAY,SAAmB/tD,GAC/CxoB,KAAK85B,OACPtR,EAASxoB,KAAK85B,QAIZ95B,KAAK+5E,WACP/5E,KAAK+5E,WAAWniF,KAAK4wB,GAErBxoB,KAAK+5E,WAAa,CAACvxD,E,EAQvBoxD,EAAYn+E,UAAUm5E,YAAc,SAAqBpsD,GACvD,GAAKxoB,KAAK+5E,WAAV,CAGA,IAAI5hF,EAAQ6H,KAAK+5E,WAAWt8D,QAAQ+K,IACtB,IAAVrwB,GACF6H,KAAK+5E,WAAWvhF,OAAOL,EAAO,EAJ9B,C,EAYJyhF,EAAYljE,OAAS,WACnB,IAAI2/D,EAIJ,MAAO,CACLv/D,MAJU,IAAI8iE,GAAY,SAAkBpmE,GAC5C6iE,EAAS7iE,C,IAIT6iE,OAAQA,E,EAIZ77E,EAAAC,QAAiBm/E,C,sCCtHjB,aAsBAp/E,EAAAC,QAAiB,SAAgB2X,GAC/B,OAAO,SAAc/J,GACnB,OAAO+J,EAASnN,MAAM,KAAMoD,E,wCCxBhC,a,iBAUA7N,EAAAC,QAAiB,SAAsB0c,GACrC,OAAOgiD,EAAA6C,SAAe7kD,KAAsC,IAAzBA,EAAQ8iD,Y,qFCX7C,IACAigB,EADgB,kC,oFCAhB,IAAAh1E,EAAA9N,EAAA,S,mCAiBe+iF,I,OAAAA,EAAfp6E,EAAAmF,EAAA,CAAAnF,EAAAoF,GAAAC,MAAA,SAAAC,EAA+B+0E,EAASC,G,IAE9B35C,E,2FAAiB3gC,EAAAu6E,GAAMz7E,IACzB,sCAA0D9G,OAApBsiF,EAAS,aAAmBtiF,OAARqiF,I,cADxD15C,EAAQp7B,EAAAE,K,kBAIPk7B,EAAStnB,M,gCAEhB/gB,QAAQ0P,MAAKzC,EAAAO,I,0DARaZ,MAAAjF,KAAAkE,U,KAW9Bq2E,E,SAX+BH,EAASC,G,OAAzBF,EAAel1E,MAAAjF,KAAAkE,U,2ICjB9B,IAAAs0D,EAAAphE,EAAA,SAEO,SAASojF,EAAYv8E,EAAKw8E,GAEG,QAA9Bx8E,EAAIjD,OAAO+8D,QAAQ75B,QACrBs6B,EAAAlhE,KAAKojF,kBAAkBD,EAAU,gBACjCx8E,EAAIjD,OAAO2/E,YAAc,sBACzB18E,EAAIjD,OAAO+8D,QAAQ75B,OAAS,WAE5B7lC,QAAQC,IAAImiF,EAASlhF,IACrBi/D,EAAAlhE,KAAKsjF,kBAAkBH,EAASlhF,GAAI,gBACpC0E,EAAIjD,OAAO2/E,YAAc,iBACzB18E,EAAIjD,OAAO+8D,QAAQ75B,OAAS,M,CAIzB,SAAS28C,EAAY58E,EAAKw8E,GACG,QAA9Bx8E,EAAIjD,OAAO+8D,QAAQ75B,QACrBs6B,EAAAlhE,KAAKojF,kBAAkBD,EAAU,cACjCx8E,EAAIjD,OAAO2/E,YAAc,oBACzB18E,EAAIjD,OAAO+8D,QAAQ75B,OAAS,WAE5B7lC,QAAQC,IAAImiF,EAASlhF,IACrBi/D,EAAAlhE,KAAKsjF,kBAAkBH,EAASlhF,GAAI,cACpC0E,EAAIjD,OAAO2/E,YAAc,eACzB18E,EAAIjD,OAAO+8D,QAAQ75B,OAAS,M","sources":["src/js/film/film.js","node_modules/@swc/helpers/lib/_class_call_check.js","node_modules/@swc/helpers/lib/_create_class.js","src/js/authorization-modal.js","src/js/utils/authentefication.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/logger.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/app/src/registerCoreComponents.ts","node_modules/@firebase/app/src/index.ts","node_modules/@swc/helpers/lib/_async_to_generator.js","node_modules/@swc/helpers/lib/_define_property.js","node_modules/@swc/helpers/lib/_to_consumable_array.js","node_modules/@swc/helpers/lib/_array_without_holes.js","node_modules/@swc/helpers/lib/_array_like_to_array.js","node_modules/@swc/helpers/lib/_iterable_to_array.js","node_modules/@swc/helpers/lib/_non_iterable_spread.js","node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js","node_modules/regenerator-runtime/runtime.js","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@swc/helpers/lib/_sliced_to_array.js","node_modules/@swc/helpers/lib/_array_with_holes.js","node_modules/@swc/helpers/lib/_non_iterable_rest.js","node_modules/@firebase/util/src/constants.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/deepCopy.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/emulator.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/json.ts","node_modules/@firebase/util/src/jwt.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/promise.ts","node_modules/@firebase/util/src/query.ts","node_modules/@firebase/util/src/sha1.ts","node_modules/@firebase/util/src/subscribe.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@swc/helpers/lib/_assert_this_initialized.js","node_modules/@swc/helpers/lib/_inherits.js","node_modules/@swc/helpers/lib/_set_prototype_of.js","node_modules/@swc/helpers/lib/_wrap_native_super.js","node_modules/@swc/helpers/lib/_construct.js","node_modules/@swc/helpers/lib/_is_native_function.js","node_modules/@swc/helpers/lib/_get_prototype_of.js","node_modules/@swc/helpers/lib/_create_super.js","node_modules/@swc/helpers/lib/_is_native_reflect_construct.js","node_modules/@swc/helpers/lib/_possible_constructor_return.js","node_modules/@swc/helpers/lib/_type_of.js","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/index.js","node_modules/@swc/helpers/lib/_object_spread.js","node_modules/idb/build/wrap-idb-value.js","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/index.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/process/browser.js","src/js/utils/regValidation.js","src/js/utils/signOutBtnHandler.js","src/js/modal-form.js","node_modules/axios/index.js","node_modules/axios/lib/axios.js","node_modules/axios/lib/utils.js","node_modules/axios/lib/helpers/bind.js","node_modules/axios/lib/core/Axios.js","node_modules/axios/lib/helpers/buildURL.js","node_modules/axios/lib/core/InterceptorManager.js","node_modules/axios/lib/core/dispatchRequest.js","node_modules/axios/lib/core/transformData.js","node_modules/axios/lib/defaults/index.js","node_modules/axios/lib/helpers/normalizeHeaderName.js","node_modules/axios/lib/core/AxiosError.js","node_modules/axios/lib/defaults/transitional.js","node_modules/axios/lib/helpers/toFormData.js","node_modules/buffer/index.js","node_modules/base64-js/index.js","node_modules/ieee754/index.js","node_modules/axios/lib/adapters/xhr.js","node_modules/axios/lib/core/settle.js","node_modules/axios/lib/helpers/cookies.js","node_modules/axios/lib/core/buildFullPath.js","node_modules/axios/lib/helpers/isAbsoluteURL.js","node_modules/axios/lib/helpers/combineURLs.js","node_modules/axios/lib/helpers/parseHeaders.js","node_modules/axios/lib/helpers/isURLSameOrigin.js","node_modules/axios/lib/cancel/CanceledError.js","node_modules/axios/lib/helpers/parseProtocol.js","node_modules/axios/lib/helpers/null.js","node_modules/axios/lib/cancel/isCancel.js","node_modules/axios/lib/core/mergeConfig.js","node_modules/axios/lib/helpers/validator.js","node_modules/axios/lib/env/data.js","node_modules/axios/lib/cancel/CancelToken.js","node_modules/axios/lib/helpers/spread.js","node_modules/axios/lib/helpers/isAxiosError.js","src/js/apiKey.js","src/js/fetches/getMovieDetails.js","src/js/utils/modalBtnAction.js"],"sourcesContent":["// import { getCurrentGenres } from '../modal-form';\n\nexport class Film {\n  static createWithoutAuth(newFilm, folder) {\n    const all = getFilmsFromLocalStorage(folder);\n    all.push(newFilm);\n    localStorage.setItem(`${folder}`, JSON.stringify(all));\n  }\n  static removeWithoutAuth(filmId, folder) {\n    const index = findFilmById(filmId, folder);\n    console.log(index);\n    const filmsList = getFilmsFromLocalStorage(folder);\n    filmsList.splice(index, 1);\n    localStorage.setItem(`${folder}`, JSON.stringify(filmsList));\n  }\n\n  static renderWatchedFilms(folder, rewWords) {\n    const films = getFilmsFromLocalStorage(folder);\n    const list = films.length\n      ? films.map(createOneFilmCard).join('')\n      : `<p style=\"text-align: center;\">У вас ещё нету ${rewWords} фильмов :(</p>`;\n    document.querySelector('.card__colection').innerHTML = list;\n  }\n\n  static isFilmExistInWatched(filmId) {\n    if (findFilmById(filmId, 'watchedFilms') === -1) {\n      return ['add', 'Add to watched'];\n    } else {\n      return ['remove', 'Remove from watched'];\n    }\n  }\n\n  static isFilmExistInQueue(filmId) {\n    if (findFilmById(filmId, 'queueFilms') === -1) {\n      return ['add', 'Add to queue'];\n    } else {\n      return ['remove', 'Remove from queue'];\n    }\n  }\n}\n\nfunction getFilmsFromLocalStorage(folder) {\n  return JSON.parse(localStorage.getItem(`${folder}`) || '[]');\n}\n\nfunction findFilmById(filmId, folder) {\n  const filmsList = getFilmsFromLocalStorage(folder);\n  return filmsList.findIndex(film => film.id === filmId);\n}\n\nfunction getCurrentGenres(genreList) {\n  return genreList.map(singleGenre => {\n    return singleGenre.name;\n  });\n}\n\nfunction createOneFilmCard(film) {\n  const img =\n    'https://raw.githubusercontent.com/GrooT921/team-project-filmoteka/main/src/images/no-images-found.png';\n  const year = new Date(film.release_date).getFullYear();\n  const genresName = getCurrentGenres(film.genres);\n  const genresNameDotted =\n    genresName.length > 2\n      ? genresName.slice(0, 2).join(', ') + ' ...'\n      : genresName.join(', ');\n  return `<li class=\"card__film\" >\n        <div class=\"thumb\" data-id='${film.id}'>\n          <img src=\"https://image.tmdb.org/t/p/w500${film.poster_path}\" alt=\"${\n    film.title\n  }\" onerror='this.src=\"${img}\"'/>\n        </div>\n        <h2 class=\"card__title\">${film.title}</h2>\n        <p class=\"card__text\">\n          <span class=\"genres\">${genresNameDotted}</span> | <span class=\"release\">${year}</span> <span\n            class=\"card__vote_average\">${film.vote_average.toFixed(1)}</span>\n        </p>\n      </li>`;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _classCallCheck;\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createClass;\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\n","import { registration, autentification } from './utils/authentefication';\n\nconst refs = {\n  openModalBtn: document.querySelector('[data-auth-modal-open]'),\n  closeModalBtn: document.querySelector('[data-auth-modal-close]'),\n  modal: document.querySelector('[data-auth-modal]'),\n  registerForm: document.querySelector('.register-modal'),\n  registerBtn: document.querySelector('.register-btn'),\n  authModal: document.querySelector('.authorization-modal'),\n  authForm: document.getElementById('auth-form'),\n  regForm: document.getElementById('reg-form'),\n  backToLoginBtn: document.querySelector('.login-btn'),\n  modalForm: document.querySelector('.authorization-form'),\n};\n\nrefs.openModalBtn.addEventListener('click', openModal);\nrefs.closeModalBtn.addEventListener('click', closeModal);\nrefs.registerBtn.addEventListener('click', onRegisterBtn);\nrefs.backToLoginBtn.addEventListener('click', onBackToLoginBtn);\nrefs.authForm.addEventListener('submit', autentification);\nrefs.regForm.addEventListener('submit', registration);\n\ndocument.addEventListener(\"keydown\", e => {\n  if (e.code === \"Escape\") {\n    refs.modal.classList.add('hidden');\n  }\n});\n\nexport function openModal(e) {\n  \n  refs.modal.classList.remove('hidden');\n\n  document.body.classList.add('overflow-hidden');\n\n  document.body.style.position = 'fixed';\n  document.body.style.top = `-${window.scrollY}px`;\n}\n\nexport function closeModal(e) {\n  refs.modal.classList.add('hidden');\n  const scrollY = document.body.style.top;\ndocument.body.style.position = '';\ndocument.body.style.top = '';\nwindow.scrollTo(0, parseInt(scrollY || '0') * -1);\n\n}\n\nfunction onRegisterBtn() {\n  refs.registerForm.classList.remove('hidden');\n  refs.authModal.classList.add('hidden');\n}\n\nfunction onBackToLoginBtn() {\n  refs.registerForm.classList.add('hidden');\n  refs.authModal.classList.remove('hidden');\n}\n","import { initializeApp } from 'firebase/app';\nimport { getDatabase, ref, set, child, get } from 'firebase/database';\nimport regValidation from './regValidation';\nimport exitBtnHandler from './signOutBtnHandler';\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyBdaR4YLCQNbvL0nBLOVIY9QfiBV8jMBN8',\n  authDomain: 'filmoteka-152c6.firebaseapp.com',\n  databaseURL:\n    'https://filmoteka-152c6-default-rtdb.europe-west1.firebasedatabase.app',\n  projectId: 'filmoteka-152c6',\n  storageBucket: 'filmoteka-152c6.appspot.com',\n  messagingSenderId: '913255222211',\n  appId: '1:913255222211:web:4a70b19211bfd9fa790b76',\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport function registration(evt) {\n  evt.preventDefault();\n  const userName = document.getElementById('reg-user-name');\n  const email = document.getElementById('reg-user-email');\n  const password = document.getElementById('reg-user-password');\n  if (!regValidation(userName.value, email.value, password.value)) {\n    // return Notiflix.Notify.warning('You filled form uncorrect');\n    return alert('You filled form uncorrect');\n  }\n  const db = getDatabase();\n  const dbRef = ref(db);\n\n  get(child(dbRef, 'UsersList/' + userName.value)).then(snapshot => {\n    if (snapshot.exists()) {\n      //   Notiflix.Notify.warning('User already exist !');\n      alert('User already exist !');\n    } else {\n      set(ref(db, 'UsersList/' + userName.value), {\n        userName: userName.value,\n        email: email.value,\n        password: password.value,\n      })\n        // .then(Notiflix.Notify.success('User Successfuly registraited'))\n        .then(alert('User Successfuly registraited !'))\n        .then(document.getElementById('reg-form').reset())\n        .catch(console.log);\n    }\n  });\n}\n\nexport function autentification(evt) {\n  evt.preventDefault();\n  const db = getDatabase();\n  const userName = document.getElementById('log-user-name');\n  const password = document.getElementById('log-user-password');\n  const dbRef = ref(db);\n\n  get(child(dbRef, 'UsersList/' + userName.value)).then(snapshot => {\n    if (snapshot.exists()) {\n      let dbpas = snapshot.val().password;\n      if (dbpas === password.value) {\n        alert(`You Successfuly enter in your accaunt  ${userName.value} !`);\n        // Notiflix.Notify.success(\n        //   `You Successfuly enter in your accaunt  ${userName.value} !`\n        // );\n        // Film.renderCurrentUserFilmList(userName.value);\n        logIn(snapshot.val());\n      }\n    } else {\n      return alert('User not exist yet !');\n      //   return Notiflix.Notify.warning('User not exist yet !');\n    }\n  });\n}\n\nfunction logIn(userData) {\n  sessionStorage.setItem('userData', JSON.stringify(userData));\n  document.querySelector('.close-btn').click();\n  renderCurrentUserName();\n  addEventListenerOnExitBtn();\n}\n\nfunction renderCurrentUserName() {\n  const userNikName = JSON.parse(sessionStorage.getItem('userData')).userName;\n  const navUserName = document.getElementById('user-name-contain');\n\n  const html = `\n            <button\n            type=\"button\"\n            id=\"sign-out-btn\"\n          >Sign Out\n          </button>\n          <span style=\"color: white;\">Hello ,${userNikName} !</span >\n    `;\n  navUserName.innerHTML = html;\n  document.querySelector('.modal-open-btn').classList.add('hidden');\n}\n\nfunction addEventListenerOnExitBtn() {\n  const exitBtn = document.getElementById('sign-out-btn');\n  exitBtn.addEventListener('click', exitBtnHandler);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\nexport function initializeApp(\n  options: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _asyncToGenerator;\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _defineProperty;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _toConsumableArray;\nvar _arrayWithoutHoles = _interopRequireDefault(require(\"./_array_without_holes\"));\nvar _iterableToArray = _interopRequireDefault(require(\"./_iterable_to_array\"));\nvar _nonIterableSpread = _interopRequireDefault(require(\"./_non_iterable_spread\"));\nvar _unsupportedIterableToArray = _interopRequireDefault(require(\"./_unsupported_iterable_to_array\"));\nfunction _toConsumableArray(arr) {\n    return (0, _arrayWithoutHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _unsupportedIterableToArray).default(arr) || (0, _nonIterableSpread).default();\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayWithoutHoles;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return (0, _arrayLikeToArray).default(arr);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayLikeToArray;\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _iterableToArray;\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _nonIterableSpread;\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _unsupportedIterableToArray;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, _arrayLikeToArray).default(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArray).default(o, minLen);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _slicedToArray;\nvar _arrayWithHoles = _interopRequireDefault(require(\"./_array_with_holes\"));\nvar _iterableToArray = _interopRequireDefault(require(\"./_iterable_to_array\"));\nvar _nonIterableRest = _interopRequireDefault(require(\"./_non_iterable_rest\"));\nvar _unsupportedIterableToArray = _interopRequireDefault(require(\"./_unsupported_iterable_to_array\"));\nfunction _slicedToArray(arr, i) {\n    return (0, _arrayWithHoles).default(arr) || (0, _iterableToArray).default(arr, i) || (0, _unsupportedIterableToArray).default(arr, i) || (0, _nonIterableRest).default();\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayWithHoles;\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _nonIterableRest;\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from './deferred';\n\n/**\n * Rejects if the given promise doesn't resolve in timeInMS milliseconds.\n * @internal\n */\nexport function promiseWithTimeout<T>(\n  promise: Promise<T>,\n  timeInMS = 2000\n): Promise<T> {\n  const deferredPromise = new Deferred<T>();\n  setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);\n  promise.then(deferredPromise.resolve, deferredPromise.reject);\n  return deferredPromise.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: Error) => void;\nexport type CompleteFn = () => void;\n\nexport interface Observer<T> {\n  // Called once for each value in a stream of values.\n  next: NextFn<T>;\n\n  // A stream terminates by a single call to EITHER error() or complete().\n  error: ErrorFn;\n\n  // No events will be sent to next() once complete() is called.\n  complete: CompleteFn;\n}\n\nexport type PartialObserver<T> = Partial<Observer<T>>;\n\n// TODO: Support also Unsubscribe.unsubscribe?\nexport type Unsubscribe = () => void;\n\n/**\n * The Subscribe interface has two forms - passing the inline function\n * callbacks, or a object interface with callback properties.\n */\nexport interface Subscribe<T> {\n  (next?: NextFn<T>, error?: ErrorFn, complete?: CompleteFn): Unsubscribe;\n  (observer: PartialObserver<T>): Unsubscribe;\n}\n\nexport interface Observable<T> {\n  // Subscribe method\n  subscribe: Subscribe<T>;\n}\n\nexport type Executor<T> = (observer: Observer<T>) => void;\n\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nexport function createSubscribe<T>(\n  executor: Executor<T>,\n  onNoObservers?: Executor<T>\n): Subscribe<T> {\n  const proxy = new ObserverProxy<T>(executor, onNoObservers);\n  return proxy.subscribe.bind(proxy);\n}\n\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nclass ObserverProxy<T> implements Observer<T> {\n  private observers: Array<Observer<T>> | undefined = [];\n  private unsubscribes: Unsubscribe[] = [];\n  private onNoObservers: Executor<T> | undefined;\n  private observerCount = 0;\n  // Micro-task scheduling by calling task.then().\n  private task = Promise.resolve();\n  private finalized = false;\n  private finalError?: Error;\n\n  /**\n   * @param executor Function which can make calls to a single Observer\n   *     as a proxy.\n   * @param onNoObservers Callback when count of Observers goes to zero.\n   */\n  constructor(executor: Executor<T>, onNoObservers?: Executor<T>) {\n    this.onNoObservers = onNoObservers;\n    // Call the executor asynchronously so subscribers that are called\n    // synchronously after the creation of the subscribe function\n    // can still receive the very first value generated in the executor.\n    this.task\n      .then(() => {\n        executor(this);\n      })\n      .catch(e => {\n        this.error(e);\n      });\n  }\n\n  next(value: T): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.next(value);\n    });\n  }\n\n  error(error: Error): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.error(error);\n    });\n    this.close(error);\n  }\n\n  complete(): void {\n    this.forEachObserver((observer: Observer<T>) => {\n      observer.complete();\n    });\n    this.close();\n  }\n\n  /**\n   * Subscribe function that can be used to add an Observer to the fan-out list.\n   *\n   * - We require that no event is sent to a subscriber sychronously to their\n   *   call to subscribe().\n   */\n  subscribe(\n    nextOrObserver?: NextFn<T> | PartialObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ): Unsubscribe {\n    let observer: Observer<T>;\n\n    if (\n      nextOrObserver === undefined &&\n      error === undefined &&\n      complete === undefined\n    ) {\n      throw new Error('Missing Observer.');\n    }\n\n    // Assemble an Observer object when passed as callback functions.\n    if (\n      implementsAnyMethods(nextOrObserver as { [key: string]: unknown }, [\n        'next',\n        'error',\n        'complete'\n      ])\n    ) {\n      observer = nextOrObserver as Observer<T>;\n    } else {\n      observer = {\n        next: nextOrObserver as NextFn<T>,\n        error,\n        complete\n      } as Observer<T>;\n    }\n\n    if (observer.next === undefined) {\n      observer.next = noop as NextFn<T>;\n    }\n    if (observer.error === undefined) {\n      observer.error = noop as ErrorFn;\n    }\n    if (observer.complete === undefined) {\n      observer.complete = noop as CompleteFn;\n    }\n\n    const unsub = this.unsubscribeOne.bind(this, this.observers!.length);\n\n    // Attempt to subscribe to a terminated Observable - we\n    // just respond to the Observer with the final error or complete\n    // event.\n    if (this.finalized) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.task.then(() => {\n        try {\n          if (this.finalError) {\n            observer.error(this.finalError);\n          } else {\n            observer.complete();\n          }\n        } catch (e) {\n          // nothing\n        }\n        return;\n      });\n    }\n\n    this.observers!.push(observer as Observer<T>);\n\n    return unsub;\n  }\n\n  // Unsubscribe is synchronous - we guarantee that no events are sent to\n  // any unsubscribed Observer.\n  private unsubscribeOne(i: number): void {\n    if (this.observers === undefined || this.observers[i] === undefined) {\n      return;\n    }\n\n    delete this.observers[i];\n\n    this.observerCount -= 1;\n    if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n      this.onNoObservers(this);\n    }\n  }\n\n  private forEachObserver(fn: (observer: Observer<T>) => void): void {\n    if (this.finalized) {\n      // Already closed by previous event....just eat the additional values.\n      return;\n    }\n\n    // Since sendOne calls asynchronously - there is no chance that\n    // this.observers will become undefined.\n    for (let i = 0; i < this.observers!.length; i++) {\n      this.sendOne(i, fn);\n    }\n  }\n\n  // Call the Observer via one of it's callback function. We are careful to\n  // confirm that the observe has not been unsubscribed since this asynchronous\n  // function had been queued.\n  private sendOne(i: number, fn: (observer: Observer<T>) => void): void {\n    // Execute the callback asynchronously\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      if (this.observers !== undefined && this.observers[i] !== undefined) {\n        try {\n          fn(this.observers[i]);\n        } catch (e) {\n          // Ignore exceptions raised in Observers or missing methods of an\n          // Observer.\n          // Log error to console. b/31404806\n          if (typeof console !== 'undefined' && console.error) {\n            console.error(e);\n          }\n        }\n      }\n    });\n  }\n\n  private close(err?: Error): void {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    if (err !== undefined) {\n      this.finalError = err;\n    }\n    // Proxy is no longer needed - garbage collect references\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.task.then(() => {\n      this.observers = undefined;\n      this.onNoObservers = undefined;\n    });\n  }\n}\n\n/** Turn synchronous function into one called asynchronously. */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(fn: Function, onError?: ErrorFn): Function {\n  return (...args: unknown[]) => {\n    Promise.resolve(true)\n      .then(() => {\n        fn(...args);\n      })\n      .catch((error: Error) => {\n        if (onError) {\n          onError(error);\n        }\n      });\n  };\n}\n\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(\n  obj: { [key: string]: unknown },\n  methods: string[]\n): boolean {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n\n  for (const method of methods) {\n    if (method in obj && typeof obj[method] === 'function') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction noop(): void {\n  // do nothing\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _assertThisInitialized;\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _inherits;\nvar _setPrototypeOf = _interopRequireDefault(require(\"./_set_prototype_of\"));\nfunction _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n        throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            writable: true,\n            configurable: true\n        }\n    });\n    if (superClass) (0, _setPrototypeOf).default(subClass, superClass);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _setPrototypeOf;\nfunction _setPrototypeOf(o, p) {\n    return setPrototypeOf(o, p);\n}\nfunction setPrototypeOf(o1, p1) {\n    setPrototypeOf = Object.setPrototypeOf || function setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return setPrototypeOf(o1, p1);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _wrapNativeSuper;\nvar _construct = _interopRequireDefault(require(\"./_construct\"));\nvar _isNativeFunction = _interopRequireDefault(require(\"./_is_native_function\"));\nvar _getPrototypeOf = _interopRequireDefault(require(\"./_get_prototype_of\"));\nvar _setPrototypeOf = _interopRequireDefault(require(\"./_set_prototype_of\"));\nfunction _wrapNativeSuper(Class) {\n    return wrapNativeSuper(Class);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction wrapNativeSuper(Class1) {\n    var _cache = typeof Map === \"function\" ? new Map() : undefined;\n    wrapNativeSuper = function wrapNativeSuper(Class) {\n        if (Class === null || !(0, _isNativeFunction).default(Class)) return Class;\n        if (typeof Class !== \"function\") {\n            throw new TypeError(\"Super expression must either be null or a function\");\n        }\n        if (typeof _cache !== \"undefined\") {\n            if (_cache.has(Class)) return _cache.get(Class);\n            _cache.set(Class, Wrapper);\n        }\n        function Wrapper() {\n            return (0, _construct).default(Class, arguments, (0, _getPrototypeOf).default(this).constructor);\n        }\n        Wrapper.prototype = Object.create(Class.prototype, {\n            constructor: {\n                value: Wrapper,\n                enumerable: false,\n                writable: true,\n                configurable: true\n            }\n        });\n        return (0, _setPrototypeOf).default(Wrapper, Class);\n    };\n    return wrapNativeSuper(Class1);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _construct;\nvar _setPrototypeOf = _interopRequireDefault(require(\"./_set_prototype_of\"));\nfunction _construct(Parent, args, Class) {\n    return construct.apply(null, arguments);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\nfunction construct(Parent1, args1, Class1) {\n    if (isNativeReflectConstruct()) {\n        construct = Reflect.construct;\n    } else {\n        construct = function construct(Parent, args, Class) {\n            var a = [\n                null\n            ];\n            a.push.apply(a, args);\n            var Constructor = Function.bind.apply(Parent, a);\n            var instance = new Constructor();\n            if (Class) (0, _setPrototypeOf).default(instance, Class.prototype);\n            return instance;\n        };\n    }\n    return construct.apply(null, arguments);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _isNativeFunction;\nfunction _isNativeFunction(fn) {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _getPrototypeOf;\nfunction _getPrototypeOf(o) {\n    return getPrototypeOf(o);\n}\nfunction getPrototypeOf(o1) {\n    getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function getPrototypeOf(o) {\n        return o.__proto__ || Object.getPrototypeOf(o);\n    };\n    return getPrototypeOf(o1);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _createSuper;\nvar _isNativeReflectConstruct = _interopRequireDefault(require(\"./_is_native_reflect_construct\"));\nvar _getPrototypeOf = _interopRequireDefault(require(\"./_get_prototype_of\"));\nvar _possibleConstructorReturn = _interopRequireDefault(require(\"./_possible_constructor_return\"));\nfunction _createSuper(Derived) {\n    var hasNativeReflectConstruct = (0, _isNativeReflectConstruct).default();\n    return function _createSuperInternal() {\n        var Super = (0, _getPrototypeOf).default(Derived), result;\n        if (hasNativeReflectConstruct) {\n            var NewTarget = (0, _getPrototypeOf).default(this).constructor;\n            result = Reflect.construct(Super, arguments, NewTarget);\n        } else {\n            result = Super.apply(this, arguments);\n        }\n        return (0, _possibleConstructorReturn).default(this, result);\n    };\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _isNativeReflectConstruct;\nfunction _isNativeReflectConstruct() {\n    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n    if (Reflect.construct.sham) return false;\n    if (typeof Proxy === \"function\") return true;\n    try {\n        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _possibleConstructorReturn;\nvar _assertThisInitialized = _interopRequireDefault(require(\"./_assert_this_initialized\"));\nvar _typeOf = _interopRequireDefault(require(\"./_type_of\"));\nfunction _possibleConstructorReturn(self, call) {\n    if (call && ((0, _typeOf).default(call) === \"object\" || typeof call === \"function\")) {\n        return call;\n    }\n    return (0, _assertThisInitialized).default(self);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _typeof;\nfunction _typeof(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _objectSpread;\nvar _defineProperty = _interopRequireDefault(require(\"./_define_property\"));\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {};\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === 'function') {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            (0, _defineProperty).default(target, key, source[key]);\n        });\n    }\n    return target;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * Firebase Realtime Database\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Database } from './api/Database';\nimport { registerDatabase } from './register';\n\nexport * from './api';\n\nregisterDatabase();\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'database': Database;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","export default function regValidation(name, email, pas) {\n  let nameVal = /[a-zA-Z\\s]+/;\n  let emailVal = /[a-zA-Z0-9]+@(gmail|yahoo|mail)\\.com/;\n  let pasVal = /[a-zA-Z0-9]{5,}/;\n\n  if (nameVal.test(name) && emailVal.test(email) && pasVal.test(pas)) {\n    return true;\n  }\n  console.log(name);\n  console.log(email);\n  console.log(pas);\n  return false;\n}\n","export default function exitBtnHandler() {\n  sessionStorage.clear();\n  //   localStorage.removeItem('films');\n  //   Film.renderFilmList();\n\n  document.querySelector('.modal-open-btn').classList.remove('hidden');\n  document.getElementById('user-name-contain').innerHTML = '';\n}\n","import axios from 'axios';\nimport API_KEY from './apiKey';\nimport getMovieDetails from './fetches/getMovieDetails';\nimport { actionWatch, actionQueue } from './utils/modalBtnAction';\nimport { Film } from './film/film';\n\nimport '../sass/components/_modal-form.scss';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const refs = {\n    openModal: document.querySelector('[data-modal-open]'),\n    closeModal: document.querySelector('[data-modal-close]'),\n    modal: document.querySelector('[data-modal]'),\n    form: document.querySelector('.form'),\n    card: document.querySelector('.list'),\n  };\n\n  function getCurrentGenres(genreList) {\n    return genreList\n      .map(singleGenre => {\n        return singleGenre.name;\n      })\n      .join(', ');\n  }\n\n  // refs.card.addEventListener('click', modalForm);\n\n  const openModal = () => {\n    document\n      .getElementById('modal_form')\n      .closest('.modal_overlay')\n      .classList.add('active');\n  };\n\n  const closeModal = (e = false) => {\n    if (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n    document\n      .getElementById('modal_form')\n      .closest('.modal_overlay')\n      .classList.remove('active');\n  };\n\n  const modalForm = e => {\n    if (!e.target.closest('.card__film .thumb')) {\n      return false;\n    }\n    const currentCardId = e.target.closest('.thumb').dataset.id;\n    getMovieDetails(API_KEY, currentCardId).then(data => {\n      const {\n        genres,\n        title,\n        vote_average,\n        vote_count,\n        poster_path,\n        popularity,\n        original_title,\n        overview,\n      } = data;\n      const form_html = `\n        <form class=\"form\">\n        <div class=\"form__film-card\">\n        <div class=\"form__film-img\">\n            <img class=\"form-img\" src=\"https://image.tmdb.org/t/p/w500${poster_path}\" alt=\"${title}\" >\n        </div>\n        </div>\n        <div class=\"form__info\">\n        <h2 class=\"form__title\">${title}</h2>\n        <ul class=\"form__info-list\">\n            <li class=\"form__info-item\">\n                <p class=\"form__info-name\">Vote / Votes</p>\n                <p class=\"form__info-details\"> <span class=\"film__rating\">${vote_average}</span> / ${vote_count}</p>\n            </li>\n            <li class=\"form__info-item\">\n                <p class=\"form__info-name\">Popularity</p>\n                <p class=\"form__info-details\">${popularity}</p>\n            </li>\n            <li class=\"form__info-item\">\n                <p class=\"form__info-name\">Original Title</p>\n                <p class=\"form__info-details details-title\">${original_title}</p>\n            </li>\n            <li class=\"form__info-item\">\n                <p class=\"form__info-name\">Genre</p>\n                <p class=\"form__info-details\">${getCurrentGenres(genres)}</p>\n            </li>\n        </ul>\n        <div class=\"form__about\">\n        <h3 class=\"form__about-name\">About</h3>\n        <p class=\"form__about-details\">${overview}</p>\n        </div>\n        <div class=\"form__btn-list\">\n            <button data-action=${\n              Film.isFilmExistInWatched(data.id)[0]\n            } id=\"watched\" class=\"form-button form-active-btn\" type=\"button\">${\n        Film.isFilmExistInWatched(data.id)[1]\n      }</button>\n            <button data-action=${\n              Film.isFilmExistInQueue(data.id)[0]\n            } id=\"queue\" class=\"form-button\" type=\"button\">${\n        Film.isFilmExistInQueue(data.id)[1]\n      }</button>\n        </div>\n        </div>\n        </form>\n        `;\n\n      const modalFormElement = document.getElementById('modal_form');\n\n      modalFormElement.innerHTML = form_html;\n      document.getElementById('watched').addEventListener('click', event => {\n        actionWatch(event, data);\n      });\n      document.getElementById('queue').addEventListener('click', event => {\n        actionQueue(event, data);\n      });\n      openModal();\n    });\n  };\n\n  document.addEventListener('click', modalForm);\n\n  document.getElementById('btn-close').addEventListener('click', closeModal);\n  document.addEventListener('click', e => {\n    if (e.target.classList.contains('modal_overlay')) {\n      closeModal();\n    }\n  });\n\n  document.addEventListener('keydown', e => {\n    if (e.code === 'Escape') {\n      closeModal();\n    }\n  });\n});\n\n// if(false){\n\n// function modalForm (e) {\n//   if(e.target.nodeName !==  \"IMG\") {\n//     return\n//   }\n//   const currentCard = e.target.parentNode;\n//   const currentCardId = currentCard.dataset.id;\n//   getMovieDetails(API_KEY, currentCardId)\n//   .then(({\n//   genres,\n//   title,\n//   vote_average,\n//   vote_count,\n//   poster_path,\n//   popularity,\n//   original_title,\n//   overview,\n// }) => {\n\n//     const form_html = `\n//     <form class=\"form\">\n//         <div class=\"form__film-card\">\n//             <div class=\"form__film-img\">\n//                 <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title}\" width=375px height=478px>\n//             </div>\n//         </div>\n//         <div class=\"form__info\">\n//             <h2 class=\"form__title\">${title}</h2>\n//             <ul>\n//                 <li class=\"form__info-item\">\n//                     <p class=\"form__info-name\">Vote / Votes</p>\n//                     <p class=\"form__info-details\">${vote_average} / ${vote_count}</p>\n//                 </li>\n//                 <li class=\"form__info-item\">\n//                     <p class=\"form__info-name\">Popularity</p>\n//                     <p class=\"form__info-details\">${popularity}</p>\n//                 </li>\n//                 <li class=\"form__info-item\">\n//                     <p class=\"form__info-name\">Original Title</p>\n//                     <p class=\"form__info-details\">${original_title}</p>\n//                 </li>\n//                 <li class=\"form__info-item\">\n//                     <p class=\"form__info-name\">Genre</p>\n//                     <p class=\"form__info-details\">${getCurrentGenres (genres)}</p>\n//                 </li>\n//             </ul>\n//             <h3 class=\"form__about-name\">About</h3>\n//             <p class=\"form__about-name\">${overview}</p>\n//             <div class=\"form__btn-list\">\n//                 <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                 <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//             </div>\n//         </div>\n//     </form>\n//     `;\n\n//     const modalFormElement = document.getElementById('modal_form');\n\n//     modalFormElement.innerHTML = form_html;\n\n//     modalFormElement.closest('.modal_overlay').classList.toggle('active');\n\n// console.log(getCurrentGenres (genres));\n// console.log(genres[0].name)\n//     const instance = basicLightbox.create(`\n//    <div class=\"modal\">\n\n// </div>\n// `, {\n//     onShow: (instance) => {\n//       function onInstanceclick(e) {\n//         if (e.code === 'Escape') {\n//           instance.close();\n//         }\n//       }\n//       document.addEventListener('keydown', onInstanceclick);\n//       instance.element().querySelector('.btn-close').onclick = instance.close;\n//     },\n//     onClose: instance => {\n//       function onInstanceclick(e) {\n//         if (e.code === 'Escape') {\n//           instance.close();\n//         }\n//       }\n//       document.removeEventListener('keydown', onInstanceclick);\n//     },\n\n// })\n// instance.show()\n//   })\n//   }\n\n//   function getCurrentGenres(genreList) {\n//    return  genreList.map ((singleGenre) => {\n// return singleGenre.name\n//     }\n//     ).join( \", \")\n\n// });\n\n// function modalForm () {\n//   getMovieDetails(API_KEY)\n//       .then(data => {\n//         const {\n//           genres,\n//           title,\n//           vote_average,\n//           vote_count,\n//           poster_path,\n//           // backdrop_path,\n//           popularity,\n//           original_title,\n//           overview,\n//         } = data;\n\n//         const instance = basicLightbox.create(`\n//         <div class=\"modal\">\n//         <button type=\"button\" class=\"btn-close\">\n//         <svg width=\"30\" height=\"30\"></svg>\n//         </button>\n//         <form class=\"form\">\n//         <div class=\"form__film-card\">\n//         <div class=\"form__film-img\">\n//             <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title}\" width=375px height=478px>\n//         </div>\n//         <div class=\"form__info\">\n//         <h3 class=\"form__title\">Name of film <b>${title}</b></h3>\n//             <p class=\"form__info-item\"><span>Popularity <b>${popularity}</b></span></p>\n//             <p class=\"form__info-item\"><span>Original Title <b>${original_title}</b></span></p>\n//             <p class=\"form__info-item\"><span>Genre</span> <b>${genres}</b></p>\n//             <p class=\"form__info-item\"><span>Vote / Votes <b>${vote_average}</b> / <b>${vote_count}</b></span></p>\n//             <p class=\"form__info-about\"><span>About <b>${overview}</b></span></p>\n//             <div class=\"form__btn-list\">\n//                 <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                 <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//             </div>\n//         </div>\n//         </div>\n//         </form>\n//     </div>\n//     `, {\n//         onShow: (instance) => {\n//           function onInstanceclick(e) {\n//             if (e.code === 'Escape') {\n//               instance.close();\n//             }\n//           }\n//           document.addEventListener('keydown', onInstanceclick);\n//           instance.element().querySelector('.btn-close').onclick = instance.close;\n//         },\n//         onClose: instance => {\n//           function onInstanceclick(e) {\n//             if (e.code === 'Escape') {\n//               instance.close();\n//             }\n//           }\n//           document.removeEventListener('keydown', onInstanceclick);\n//         },\n\n//     })\n//     instance.show()\n//       })\n//       .catch(error => {\n//       });\n//     }\n\n// document.onclick = function(event) {\n//   if(event.target === refs.modal) {\n//     refs.modal.classList.add(\"is-hidden\");\n//   }\n// }\n\n//     const instance = basicLightbox.create(`\n//     <div class=\"modal\">\n//     <img src=\"\"  width=375 height=478/>\n//     <div class=\"form__info\">\n//         <h3 class=\"form__title\">Name of film <b></b></h3>\n//         <p class=\"form__info-item\"><span>Popularity <b>}</b></span></p>\n//         <p class=\"form__info-item\"><span>Original Title <b></b></span></p>\n//         <p class=\"form__info-item\"><span>Genre</span> <b></b></p>\n//         <p class=\"form__info-item\"><span>Vote / Votes <b></b> / <b></b></span></p>\n//         <p class=\"form__info-about\"><span>About <b></b></span></p>\n//         <div class=\"form__btn-list\">\n//             <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//             <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//         </div>\n//     </div>\n//         <input placeholder=\"Type something\">\n//         <a>Close</a>\n//     </div>\n// `, {\n//     onShow: (instance) => {\n//         instance.element().querySelector('a').onclick = instance.close\n//     }\n// })\n\n// instance.show()\n\n// return `\n// <div class=\"form__film-card\">\n//           <img src=\"\"  width=375 height=478/>\n//           <div class=\"form__info\">\n//               <h3 class=\"form__title\">Name of film <b></b></h3>\n//               <p class=\"form__info-item\"><span>Popularity <b>}</b></span></p>\n//               <p class=\"form__info-item\"><span>Original Title <b></b></span></p>\n//               <p class=\"form__info-item\"><span>Genre</span> <b></b></p>\n//               <p class=\"form__info-item\"><span>Vote / Votes <b></b> / <b></b></span></p>\n//               <p class=\"form__info-about\"><span>About <b></b></span></p>\n//               <div class=\"form__btn-list\">\n//                   <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                   <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//               </div>\n//           </div>\n//       </div>\n// `\n\n// function buildModal (movies) {\n//   const markup = movies.map(({backdrop_path, title, original_title, vote_average, vote_count, popularity, overview,\n//     genres\n// }) => {\n//       return `\n//       <div class=\"form__film-card\">\n//                 <img src=\"${backdrop_path}\"  width=375 height=478/>\n//                 <div class=\"form__info\">\n//                     <h3 class=\"form__title\">Name of film <b>${title}</b></h3>\n//                     <p class=\"form__info-item\"><span>Popularity <b>${popularity}</b></span></p>\n//                     <p class=\"form__info-item\"><span>Original Title <b>${original_title}</b></span></p>\n//                     <p class=\"form__info-item\"><span>Genre</span> <b>${genres}</b></p>\n//                     <p class=\"form__info-item\"><span>Vote / Votes <b>${vote_average}</b> / <b>${vote_count}</b></span></p>\n//                     <p class=\"form__info-about\"><span>About <b>${overview}</b></span></p>\n//                     <div class=\"form__btn-list\">\n//                         <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                         <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//                     </div>\n//                 </div>\n//             </div>\n//       `\n//     })\n//     .join('');\n//     refs.film.insertAdjacentHTML('beforeend', markup);\n// }\n\n// function buildModal (movie) {\n//   refs.film.innerHTML = movie.map(({backdrop_path, title, original_title, vote_average, vote_count, popularity, overview\n//         }) => {\n//               return `\n//               <div class=\"form__film-card\">\n//                         <img src=\"${backdrop_path}\"  width=375 height=478/>\n//                         <div class=\"form__info\">\n//                             <h3 class=\"form__title\">Name of film <b>${title}</b></h3>\n//                             <p class=\"form__info-item\"><span>Popularity <b>${popularity}</b></span></p>\n//                             <p class=\"form__info-item\"><span>Original Title <b>${original_title}</b></span></p>\n\n//                             <p class=\"form__info-item\"><span>Vote / Votes <b>${vote_average}</b> / <b>${vote_count}</b></span></p>\n//                             <p class=\"form__info-about\"><span>About <b>${overview}</b></span></p>\n//                             <div class=\"form__btn-list\">\n//                                 <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                                 <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//                             </div>\n//                         </div>\n//                     </div>\n//               `\n//             })\n//       .join('');\n// };\n\n//   // refs.openModal.addEventListener(\"click\", openModal);\n// refs.closeModal.addEventListener(\"click\", closeModal);\n// // function openModal() {\n// //   refs.modal.classList.remove(\"is-hidden\");\n// // }\n// function closeModal() {\n//   refs.modal.classList.add(\"is-hidden\");\n// }\n// document.onclick = function(event) {\n//   if(event.target === refs.modal) {\n//     refs.modal.classList.add(\"is-hidden\");\n//   }\n// }\n// document.addEventListener(\"keydown\", function() {\n//   refs.modal.classList.add('is-hidden');\n// });\n\n// WORK\n// refs.openModal.addEventListener(\"click\", openModal);\n// refs.closeModal.addEventListener(\"click\", closeModal);\n// function openModal() {\n//   refs.modal.classList.remove(\"is-hidden\");\n// }\n// function closeModal() {\n//   refs.modal.classList.add(\"is-hidden\");\n// }\n// document.onclick = function(event) {\n//   if(event.target === refs.modal) {\n//     refs.modal.classList.add(\"is-hidden\");\n//   }\n// }\n// document.addEventListener(\"keydown\", function() {\n//   refs.modal.classList.add('is-hidden');\n// });\n\n// function modalForm () {\n//   getMovieDetails(API_KEY)\n//       .then(data => {\n//         refs.modal.classList.remove(\"is-hidden\");\n//         const markup = data.map(({backdrop_path, title, original_title, vote_average, vote_count, popularity, overview,\n//           genres\n//       }) => {\n//             return `\n//             <div class=\"form__film-card\">\n//                       <img src=\"${backdrop_path}\"  width=375 height=478/>\n//                       <div class=\"form__info\">\n//                           <h3 class=\"form__title\">Name of film <b>${title}</b></h3>\n//                           <p class=\"form__info-item\"><span>Popularity <b>${popularity}</b></span></p>\n//                           <p class=\"form__info-item\"><span>Original Title <b>${original_title}</b></span></p>\n//                           <p class=\"form__info-item\"><span>Genre</span> <b>${genres}</b></p>\n//                           <p class=\"form__info-item\"><span>Vote / Votes <b>${vote_average}</b> / <b>${vote_count}</b></span></p>\n//                           <p class=\"form__info-about\"><span>About <b>${overview}</b></span></p>\n//                           <div class=\"form__btn-list\">\n//                               <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                               <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//                           </div>\n//                       </div>\n//                   </div>\n//             `\n//           })\n//           .join('');\n//           refs.form.insertAdjacentHTML('beforeend', markup);\n//       // console.log(data)\n//       })\n//       .catch(error => {\n//       });\n//     }\n\n// Work\n// function modalForm () {\n//   getMovieDetails(API_KEY)\n//       .then(data => {\n//         const instance = basicLightbox.create(`\n//         <div class=\"modal\">\n//         <button type=\"button\" class=\"btn-close\">\n//         <svg width=\"30\" height=\"30\"></svg>\n//         </button>\n//         <img src=\"\"  width=375 height=478/>\n//         <div class=\"form__info\">\n//             <h3 class=\"form__title\">Name of film <b></b></h3>\n//             <p class=\"form__info-item\"><span>Popularity <b>}</b></span></p>\n//             <p class=\"form__info-item\"><span>Original Title <b></b></span></p>\n//             <p class=\"form__info-item\"><span>Genre</span> <b></b></p>\n//             <p class=\"form__info-item\"><span>Vote / Votes <b></b> / <b></b></span></p>\n//             <p class=\"form__info-about\"><span>About <b></b></span></p>\n//             <div class=\"form__btn-list\">\n//                 <button class=\"form-button\" type=\"submit\">Add to watched</button>\n//                 <button class=\"form-button\" type=\"submit\">Add to queue</button>\n//             </div>\n//     `, {\n//         onShow: (instance) => {\n//           function onInstanceclick(e) {\n//             if (e.code === 'Escape') {\n//               instance.close();\n//             }\n//           }\n//           document.addEventListener('keydown', onInstanceclick);\n//           instance.element().querySelector('.btn-close').onclick = instance.close;\n//         },\n//         onClose: instance => {\n//           function onInstanceclick(e) {\n//             if (e.code === 'Escape') {\n//               instance.close();\n//             }\n//           }\n//           document.removeEventListener('keydown', onInstanceclick);\n//         },\n\n//     })\n//     instance.show()\n//       })\n//       .catch(error => {\n//       });\n//     }\n\n// }\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = require('./cancel/CanceledError');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\naxios.toFormData = require('./helpers/toFormData');\n\n// Expose AxiosError class\naxios.AxiosError = require('../lib/core/AxiosError');\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n// eslint-disable-next-line func-names\nvar kindOf = (function(cache) {\n  // eslint-disable-next-line func-names\n  return function(thing) {\n    var str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n  };\n})(Object.create(null));\n\nfunction kindOfTest(type) {\n  type = type.toLowerCase();\n  return function isKindOf(thing) {\n    return kindOf(thing) === type;\n  };\n}\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return Array.isArray(val);\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nvar isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nvar isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nvar isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nvar isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nvar isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} thing The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(thing) {\n  var pattern = '[object FormData]';\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) ||\n    toString.call(thing) === pattern ||\n    (isFunction(thing.toString) && thing.toString() === pattern)\n  );\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n * @function\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nvar isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n */\n\nfunction inherits(constructor, superConstructor, props, descriptors) {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function} [filter]\n * @returns {Object}\n */\n\nfunction toFlatObject(sourceObj, destObj, filter) {\n  var props;\n  var i;\n  var prop;\n  var merged = {};\n\n  destObj = destObj || {};\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if (!merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = Object.getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/*\n * determines whether a string ends with the characters of a specified string\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n * @returns {boolean}\n */\nfunction endsWith(str, searchString, position) {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  var lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object\n * @param {*} [thing]\n * @returns {Array}\n */\nfunction toArray(thing) {\n  if (!thing) return null;\n  var i = thing.length;\n  if (isUndefined(i)) return null;\n  var arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n// eslint-disable-next-line func-names\nvar isTypedArray = (function(TypedArray) {\n  // eslint-disable-next-line func-names\n  return function(thing) {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM,\n  inherits: inherits,\n  toFlatObject: toFlatObject,\n  kindOf: kindOf,\n  kindOfTest: kindOfTest,\n  endsWith: endsWith,\n  toArray: toArray,\n  isTypedArray: isTypedArray,\n  isFileList: isFileList\n};\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar buildFullPath = require('./buildFullPath');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(configOrUrl, config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof configOrUrl === 'string') {\n    config = config || {};\n    config.url = configOrUrl;\n  } else {\n    config = configOrUrl || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  var fullPath = buildFullPath(config.baseURL, config.url);\n  return buildURL(fullPath, config.params, config.paramsSerializer);\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method: method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url: url,\n        data: data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar CanceledError = require('../cancel/CanceledError');\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar normalizeHeaderName = require('../helpers/normalizeHeaderName');\nvar AxiosError = require('../core/AxiosError');\nvar transitionalDefaults = require('./transitional');\nvar toFormData = require('../helpers/toFormData');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('../adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('../adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n\n    var isObjectPayload = utils.isObject(data);\n    var contentType = headers && headers['Content-Type'];\n\n    var isFileList;\n\n    if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {\n      var _FormData = this.env && this.env.FormData;\n      return toFormData(isFileList ? {'files[]': data} : data, _FormData && new _FormData());\n    } else if (isObjectPayload || contentType === 'application/json') {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: require('./env/FormData')\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nvar prototype = AxiosError.prototype;\nvar descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED'\n// eslint-disable-next-line func-names\n].forEach(function(code) {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = function(error, code, config, request, response, customProps) {\n  var axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nmodule.exports = AxiosError;\n","'use strict';\n\nmodule.exports = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Convert a data object to FormData\n * @param {Object} obj\n * @param {?Object} [formData]\n * @returns {Object}\n **/\n\nfunction toFormData(obj, formData) {\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new FormData();\n\n  var stack = [];\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  function build(data, parentKey) {\n    if (utils.isPlainObject(data) || utils.isArray(data)) {\n      if (stack.indexOf(data) !== -1) {\n        throw Error('Circular reference detected in ' + parentKey);\n      }\n\n      stack.push(data);\n\n      utils.forEach(data, function each(value, key) {\n        if (utils.isUndefined(value)) return;\n        var fullKey = parentKey ? parentKey + '.' + key : key;\n        var arr;\n\n        if (value && !parentKey && typeof value === 'object') {\n          if (utils.endsWith(key, '{}')) {\n            // eslint-disable-next-line no-param-reassign\n            value = JSON.stringify(value);\n          } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {\n            // eslint-disable-next-line func-names\n            arr.forEach(function(el) {\n              !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));\n            });\n            return;\n          }\n        }\n\n        build(value, fullKey);\n      });\n\n      stack.pop();\n    } else {\n      formData.append(parentKey, convertValue(data));\n    }\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nmodule.exports = toFormData;\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar transitionalDefaults = require('../defaults/transitional');\nvar AxiosError = require('../core/AxiosError');\nvar CanceledError = require('../cancel/CanceledError');\nvar parseProtocol = require('../helpers/parseProtocol');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new CanceledError() : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    var protocol = parseProtocol(fullPath);\n\n    if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar AxiosError = require('./AxiosError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n","'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n","'use strict';\n\nvar AxiosError = require('../core/AxiosError');\nvar utils = require('../utils');\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction CanceledError(message) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nmodule.exports = CanceledError;\n","'use strict';\n\nmodule.exports = function parseProtocol(url) {\n  var match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n};\n","// eslint-disable-next-line strict\nmodule.exports = null;\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'beforeRedirect': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n","'use strict';\n\nvar VERSION = require('../env/data').version;\nvar AxiosError = require('../core/AxiosError');\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n","module.exports = {\n  \"version\": \"0.27.2\"\n};","'use strict';\n\nvar CanceledError = require('./CanceledError');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new CanceledError(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n};\n","const API_KEY = '9c3613c3b537f8ef5b027465b16a3a8b';\nexport default API_KEY;\n","import axios from 'axios';\n\n// async function getMovieDetails(api_key) {\n//   try {\n//     const response = await axios.get(\n//         `https://api.themoviedb.org/3/movie/157386?api_key=${api_key}`\n//     );\n\n//     return response.data;\n//   } catch (error) {\n//     console.error(error);\n//   }\n// }\n// export default getMovieDetails;\n\n\n\nasync function getMovieDetails(api_key, movie_id) {\n  try {\n    const response = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${api_key}`\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\nexport default getMovieDetails;\n\n\n  \n// async function getModalForm(api_key, movie_id) {\n//     try {\n//         const movie = await axios.get(\n//             `https://api.themoviedb.org/3/movie/${movie_id}?api_key=${api_key}`;\n//           const response = await movie.data;\n//           return response;\n//       } catch (error) {\n//         if (error.response) {\n//           throw new Error(error.response.status);\n//         }\n//       }\n//   }\n\n\n// 157336\n// 157386","import { Film } from '../film/film';\n\nexport function actionWatch(evt, filmData) {\n  //   console.log(evt.target.dataset.action);\n  if (evt.target.dataset.action === 'add') {\n    Film.createWithoutAuth(filmData, 'watchedFilms');\n    evt.target.textContent = 'Remove from watched';\n    evt.target.dataset.action = 'remove';\n  } else {\n    console.log(filmData.id);\n    Film.removeWithoutAuth(filmData.id, 'watchedFilms');\n    evt.target.textContent = 'Add to watched';\n    evt.target.dataset.action = 'add';\n  }\n}\n\nexport function actionQueue(evt, filmData) {\n  if (evt.target.dataset.action === 'add') {\n    Film.createWithoutAuth(filmData, 'queueFilms');\n    evt.target.textContent = 'Remove from queue';\n    evt.target.dataset.action = 'remove';\n  } else {\n    console.log(filmData.id);\n    Film.removeWithoutAuth(filmData.id, 'queueFilms');\n    evt.target.textContent = 'Add to queue';\n    evt.target.dataset.action = 'add';\n  }\n}\n"],"names":["$8MBJY","parcelRequire","$fd349f9ff6806cab$export$d5ceef4e30af8800","Film","key","newFilm","folder","all","$fd349f9ff6806cab$var$getFilmsFromLocalStorage","push","localStorage","setItem","concat","JSON","stringify","filmId","index","$fd349f9ff6806cab$var$findFilmById","console","log","filmsList","splice","rewWords","films","list","length","map","$fd349f9ff6806cab$var$createOneFilmCard","join","document","querySelector","innerHTML","parse","getItem","findIndex","film","id","year","Date","release_date","getFullYear","genresName","genres","singleGenre","name","genresNameDotted","slice","poster_path","title","vote_average","toFixed","Object","defineProperty","module","exports","value","default","instance","Constructor","TypeError","$74e7f8130373505f$var$_defineProperties","target","props","i","descriptor","enumerable","configurable","writable","protoProps","staticProps","prototype","$3dbg1","$ec0db8c709555c1f$var$refs","openModalBtn","closeModalBtn","modal","registerForm","registerBtn","authModal","authForm","getElementById","regForm","backToLoginBtn","modalForm","addEventListener","e","classList","remove","body","add","style","position","top","window","scrollY","scrollTo","parseInt","autentification","registration","code","$MjY8E","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","$256b517cdd22ff08$export$ceab792ff7e873a2","evt","preventDefault","userName","email","password","$iotNY","alert","db","$eA2L7","getDatabase","dbRef","ref","get","child","then","snapshot","exists","set","reset","catch","$256b517cdd22ff08$export$223d4acd43b642ca","userData","userNikName","navUserName","html","val","sessionStorage","click","$iitvU","container","$parcel$interopDefault","this","PlatformLoggerServiceImpl","$a2hTj","getProviders","provider","$0913f93b5b3c9bac$var$isVersionServiceProvider","$0913f93b5b3c9bac$var$_obj","$0913f93b5b3c9bac$var$logger","$kZfxc","Logger","$0913f93b5b3c9bac$export$9f30fa0c10967f7f","$0913f93b5b3c9bac$var$PLATFORM_LOG_STRING","$hKHmD","$0913f93b5b3c9bac$var$name$o","Map","app","component","debug","has","componentName","_didIteratorError","_iteratorError","undefined","$0913f93b5b3c9bac$export$fa5244b94c62d36a","err","$0913f93b5b3c9bac$export$fa0d6da0f5838f50","name1","heartbeatController","getProvider","getImmediate","optional","triggerHeartbeat","$0913f93b5b3c9bac$var$ERRORS","$0913f93b5b3c9bac$var$_obj1","$0913f93b5b3c9bac$var$ERROR_FACTORY","$2xDiJ","ErrorFactory","$0913f93b5b3c9bac$var$FirebaseAppImpl","assign","options","checkDestroyed","_name","_options","_config","_container","setLogLevelImpl","_isDeleted","isDeleted","create","appName","FirebaseAppImpl","rawConfig","name3","$6ExWU","ComponentContainer","_step","_iterator","$0913f93b5b3c9bac$export$9566bce3835c0f28","values","Symbol","iterator","_iteratorNormalCompletion","next","done","return","name5","arguments","$0913f93b5b3c9bac$export$b4e3c36c855b14b5","libraryKeyOrName","version1","variant","_a","Component","library","$0913f93b5b3c9bac$var$STORE_NAME","$0913f93b5b3c9bac$var$getDbPromise","$0913f93b5b3c9bac$var$dbPromise","$ajgRO","openDB","oldVersion","message","apply","$bpxeT","$2TvXO","mark","_callee","_ctx","prev","sent","abrupt","transaction","objectStore","$0913f93b5b3c9bac$var$computeKey","t0","FirebaseError","warn","idbGetError","originalErrorMessage","$0913f93b5b3c9bac$var$writeHeartbeatsToIndexedDB","heartbeatObject","tx","_storage","read","result","agent","platformLogger","getPlatformInfoString","date","$0913f93b5b3c9bac$var$getUTCDateString","_this","_heartbeatsCache","hbTimestamp","singleDateHeartbeat","valueOf","overwrite","heartbeatsToSend","unsentEntries","headerString","wrap","$84ebd01c1ddf4bef$var$asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","Promise","fn","self","args","obj","arr","$6195f07b5409ba15$var$_arrayWithoutHoles","$6195f07b5409ba15$var$_iterableToArray","$6195f07b5409ba15$var$_unsupportedIterableToArray","$6195f07b5409ba15$var$_nonIterableSpread","$6195f07b5409ba15$var$_interopRequireDefault","__esModule","Array","isArray","$f215c72f040a88cf$var$_arrayLikeToArray","len","arr2","iter","from","o","minLen","$7a2c4c4c44c69707$var$_arrayLikeToArray","n","toString","call","constructor","test","$21b983287c82ebd3$var$runtime","Op","hasOwn","hasOwnProperty","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","err1","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","_sent","dispatchException","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","value1","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isNaN","next1","displayName","isGeneratorFunction","genFun","ctor","setPrototypeOf","__proto__","awrap","async","keys","object","key1","reverse","pop","skipTempReset","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","instanceFactory","multipleInstances","onInstanceCreated","Provider","identifier","instancesDeferred","normalizedIdentifier","deferred","Deferred","isInitialized","shouldAutoInitialize","instanceIdentifier","promise","entries","getOrInitializeService","delete","instancesOptions","instances","services","service","INTERNAL","$8nrFW","filter","_delete","$4d80d01579d5bd6a$var$DEFAULT_ENTRY_NAME","opts","normalizeInstanceIdentifier","isComponentSet","_value","$1t1Wn","instanceDeferred","normalizedDeferredIdentifier","callback","existingCallbacks","onInitCallbacks","Set","existingInstance","callbacks","invokeOnInitCallbacks","$111a013c31e2261e$var$_arrayWithHoles","$111a013c31e2261e$var$_iterableToArray","$111a013c31e2261e$var$_unsupportedIterableToArray","$111a013c31e2261e$var$_nonIterableRest","$111a013c31e2261e$var$_interopRequireDefault","$ds8z5","$1d9d263a787f8021$export$588c7fdda06fbb0a","assertion","$1d9d263a787f8021$export$a39cad550e7ab28a","$1d9d263a787f8021$var$stringToByteArray$1","str","out","p","c","charCodeAt","charToByteMapWebSafe_","ENCODED_VALS_BASE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","init_","byteToCharMap","byteToCharMapWebSafe_","byteToCharMap_","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","bytes","pos","c1","String","fromCharCode","stringToByteArray","c2","u","c22","c31","$1d9d263a787f8021$var$byteArrayToString","decodeStringToByteArray","charToByteMap","byte4","charToByteMap_","ENCODED_VALS","ENCODED_VALS_WEBSAFE","$1d9d263a787f8021$export$e510a73ee562749","utf8Bytes","$1d9d263a787f8021$export$b3b2de96497acc47","$1d9d263a787f8021$export$4b5284a3025a455","replace","$1d9d263a787f8021$export$c62426fdd000a97e","decodeString","$1d9d263a787f8021$export$54e9fb29908872fa","source","getTime","prop","$1d9d263a787f8021$export$367bf224123348f1","token","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","alg","$1d9d263a787f8021$export$c36915b22ce77c19","$1d9d263a787f8021$export$f7a1e23e542d38e3","navigator","$1d9d263a787f8021$export$5d1d834fbbf8bab7","indexedDB","$1d9d263a787f8021$export$a8a3018f3d187a4d","preExist","DB_CHECK_NAME","request","open","onsuccess","close","deleteDatabase","onupgradeneeded","onerror","Error1","$eYQtU","$2MbLg","customData","_super","$4c7YB","serviceName","errors","_len","data","_key","template","$1d9d263a787f8021$var$replaceTemplate","fullCode","$1d9d263a787f8021$export$dd24e9cd51226c56","fullMessage","$1d9d263a787f8021$var$PATTERN","_","$1d9d263a787f8021$export$fac44ee5b035f737","$1d9d263a787f8021$export$c5a53ce6a17cf18d","parts","claims","signature","$1d9d263a787f8021$export$2f872c0f2117be69","res","contextObj","a","b","k","includes","bProp","$1d9d263a787f8021$var$isObject","aProp","$1d9d263a787f8021$export$9cb4719e2e525b7a","_step1","_iterator1","bKeys","_iteratorNormalCompletion1","k1","aKeys","_didIteratorError1","_iteratorError1","thing","$1d9d263a787f8021$export$ac4103b836844853","querystringParams","params","_step2","arrayVal","encodeURIComponent","_loop","ReferenceError","subClass","superClass","$ae7f60fd48750bb9$var$_setPrototypeOf","$c1b1a34fae3d3c27$var$setPrototypeOf","o1","p1","Class","$30de785adf49c647$var$wrapNativeSuper","$30de785adf49c647$var$_construct","$30de785adf49c647$var$_interopRequireDefault","$30de785adf49c647$var$_isNativeFunction","$30de785adf49c647$var$_getPrototypeOf","$30de785adf49c647$var$_setPrototypeOf","Class1","_cache","Wrapper","Parent","$bd045042b29ce6c9$var$construct","$bd045042b29ce6c9$var$_setPrototypeOf","$bd045042b29ce6c9$var$isNativeReflectConstruct","Reflect","construct","sham","Proxy","Parent1","args1","bind","indexOf","$b9926a5835d271e3$var$getPrototypeOf","Derived","hasNativeReflectConstruct","$2059300b4b5a348b$var$_isNativeReflectConstruct","Super","$2059300b4b5a348b$var$_getPrototypeOf","NewTarget","$2059300b4b5a348b$var$_possibleConstructorReturn","$2059300b4b5a348b$var$_interopRequireDefault","Boolean","$e17dad4ea3dafe1a$var$_typeOf","$e17dad4ea3dafe1a$var$_assertThisInitialized","$e17dad4ea3dafe1a$var$_interopRequireDefault","$f4758df7279d6c6a$export$243e62d78d3b544d","LogLevel1","$f4758df7279d6c6a$var$instances","DEBUG","VERBOSE","INFO","WARN","ERROR","logType","logLevel","toISOString","$f4758df7279d6c6a$var$ConsoleMethod","_console","now","_logLevel","$f4758df7279d6c6a$var$defaultLogLevel","$f4758df7279d6c6a$var$defaultLogHandler","_userLogHandler","$f4758df7279d6c6a$var$levelStringToEnum","_logHandler","$7818c326be87ea84$export$ca0ed41b1a2af7e","version","blocked","upgrade","blocking","terminated","openPromise","$kKOTz","w","event","newVersion","$7818c326be87ea84$var$readMethods","$7818c326be87ea84$var$writeMethods","$7818c326be87ea84$var$cachedMethods","$7818c326be87ea84$var$getMethod","IDBDatabase","targetFuncName","useIndex","isWrite","IDBIndex","IDBObjectStore","storeName","_target","_$target","_args","store","shift","r","oldTraps","$dDDEV","receiver","ownKeys","getOwnPropertySymbols","sym","getOwnPropertyDescriptor","$9eddae5a012cde57$var$_defineProperty","$f1bf9542bc9ee5ed$var$idbProxyableTypes","$f1bf9542bc9ee5ed$var$cursorAdvanceMethods","$f1bf9542bc9ee5ed$var$cursorRequestMap","WeakMap","$f1bf9542bc9ee5ed$var$transactionDoneMap","$f1bf9542bc9ee5ed$var$transactionStoreNamesMap","$f1bf9542bc9ee5ed$var$transformCache","$f1bf9542bc9ee5ed$export$407448d2b89b1813","$f1bf9542bc9ee5ed$var$idbProxyTraps","IDBTransaction","objectStoreNames","$f1bf9542bc9ee5ed$export$efccba1c4a2ef57b","$f1bf9542bc9ee5ed$export$43caf9889c228507","$f1bf9542bc9ee5ed$var$wrapFunction","func","IDBCursor","advance","continue","continuePrimaryKey","$f1bf9542bc9ee5ed$export$3b14a55fb2447963","storeNames","_func","sort","$f1bf9542bc9ee5ed$var$transformCachableValue","unlisten","removeEventListener","DOMException","$f1bf9542bc9ee5ed$var$cacheDonePromiseForTransaction","some","IDBRequest","success","newValue","$a9d69158b154a93b$var$SDK_VERSION","DOMStorageWrapper","domStorage_","prefix_","removeItem","prefixedName_","storedVal","$a9d69158b154a93b$var$MemoryStorage","MemoryStorage","cache_","isInMemoryStorage","contains","$a9d69158b154a93b$var$createStoragefor","domStorageName","domStorage","$a9d69158b154a93b$var$DOMStorageWrapper","$a9d69158b154a93b$var$PersistentStorage","$a9d69158b154a93b$var$SessionStorage","sha11","digest","base64","sha1Bytes","varArgs","$a9d69158b154a93b$var$buildLogMessage_","$a9d69158b154a93b$var$logger","$a9d69158b154a93b$var$enableLogging$1","logger_","persistent","assert","$a9d69158b154a93b$var$logClient","LogLevel","$a9d69158b154a93b$var$log","$a9d69158b154a93b$var$firstLog_","$a9d69158b154a93b$var$logWrapper","prefix","$a9d69158b154a93b$var$error","$a9d69158b154a93b$var$fatal","$a9d69158b154a93b$var$isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","$a9d69158b154a93b$var$MIN_NAME","$a9d69158b154a93b$var$MAX_NAME","$a9d69158b154a93b$var$nameCompare","bAsInt","$a9d69158b154a93b$var$stringCompare","$a9d69158b154a93b$var$ObjectToUniqueKey","segsize","substring","v","f","ln","Infinity","Math","pow","bias","round","floor","hexByte","toLowerCase","RegExp","time","setTimeout","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getToken","forceRefresh","_this1","listener","addTokenListener","$a9d69158b154a93b$var$warn","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","_this2","addAuthTokenListener","removeAuthTokenListener","errorMessage","$a9d69158b154a93b$var$EmulatorTokenProvider","EmulatorTokenProvider","accessToken","namespace","webSocketOnly","persistenceKey","includeNamespaceInQueryParams","RepoInfo","nodeAdmin","host","_host","substr","internalHost","_domain","newHost","isCacheableHost","protocol","secure","query2","repoInfo","connURL","$a9d69158b154a93b$var$LONG_POLLING","isCustomHost","pairs","StatsCollection","name2","amount","counters_","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","responseNum","onClose","requestNum","toProcess","$a9d69158b154a93b$var$exceptionGuard","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","BrowserPollConnection","bytesSent","$a9d69158b154a93b$var$statsManagerGetCollection","_this4","curSegmentNum","onDisconnect_","onDisconnect1","myPacketOrderer","$a9d69158b154a93b$var$PacketReceiver","onMessage","isClosed_","onClosed_","isNodeSdk","readyState","called","wrappedFn","attachEvent","_this3","command","arg1","arg2","incrementIncomingBytes_","scriptTagHolder","connectTimeoutTimer_","everConnected_","$a9d69158b154a93b$var$FIREBASE_LONGPOLL_START_PARAM","sendNewPolls","closeAfter","handleResponse","pN","urlParams","random","$a9d69158b154a93b$var$PROTOCOL_VERSION","connectURL","urlFn","log_","addTag","startLongPoll","addDisconnectPingFrame","myDisconnFrame","removeChild","clearTimeout","shutdown_","dataStr","stats_","incrementCounter","base64data","base64Encode","dataSegs","$a9d69158b154a93b$var$splitStringBySize","$a9d69158b154a93b$var$MAX_URL_DATA_SIZE","enqueueSegment","pw","createElement","src","display","bytesReceived","forceAllow_","forceDisallow_","location","href","FirebaseIFrameScriptHolder","commandCB","onMessageCB","onDisconnect2","currentSerial","uniqueCallbackIdentifier","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","stack","alive","onDisconnect3","onDisconnect","myPW","newRequest_","outstandingRequests","size","pendingSegs","theURL","d","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","url","serial","doNewRequest","keepaliveTimeout","loadCB","_this5","newScript","onload","onreadystatechange","rstate","parentNode","appendChild","iframe","contentWindow","contentDocument","$a9d69158b154a93b$var$WebSocketImpl","MozWebSocket","WebSocket","connectionURL_","WebSocketConnection","onDisconnect4","device","headers","$6qd2L","platform","proxy","env","origin","mySock","e1","onopen","onclose","handleIncomingFrame","m","frames","totalFrames","fullMess","jsonMess","jsonEval","frameCount","handleNewFrameCount_","mess","appendFrame_","remainingData","extractFrameCount_","resetKeepAlive","sendString_","keepaliveTimer","setInterval","hostname","$a9d69158b154a93b$var$FORGE_DOMAIN_RE","isOldAndroid","userAgent","oldAndroidMatch","match","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","isWebSocketsAvailable","$a9d69158b154a93b$var$WebSocketConnection","isSkipPollConnection","previouslyFailed","ALL_TRANSPORTS","transport","transports","transports_","globalTransportInitialized_","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","pendingDataMessages","$a9d69158b154a93b$var$TransportManager","conn","transportManager_","initialTransport","conn_","nextTransportId_","onConnectionLost","disconnReceiver_","tx_","healthyTimeout_","isHealthy_","markConnectionHealthy","healthyTimeoutMS","connectionCount","onConnectionLost_","everConnected","secondaryConn_","onSecondaryConnectionLost_","rx_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","$a9d69158b154a93b$var$requireKey","onSecondaryControl_","proceedWithUpgrade_","send","start","tryCleanupConnection","onDataMessage_","onPrimaryResponse_","primaryResponsesRequired_","onConnectionShutdown_","sendPingOnPrimaryIfNecessary_","sessionId","handshake","s","state_","onConnectionEstablished_","timestamp","version2","upgradeTransport","startUpgrade_","onDisconnect5","$a9d69158b154a93b$var$setTimeoutNonBlocking","closeConnections_","start_","reason","ServerActions","pathString","onComplete","stats","allowedEvents_","EventEmitter","eventType","listeners_","listeners","validateEventType_","eventData","getInitialEvent","find","et","OnlineMonitor","online_","isMobileCordova","trigger","pathOrString","pieceNum","split","pieces_","copyTo","pieceNum_","Path","path","begin","pieces","childPathObj","$a9d69158b154a93b$var$Path","i1","$a9d69158b154a93b$var$newRelativePath","outerPath","innerPath","outer","inner","$a9d69158b154a93b$var$pathPopFront","other","$a9d69158b154a93b$var$pathGetLength","j","ValidationPath","errorPrefix_","byteLength_","max","parts_","stringLength","validationPath","$a9d69158b154a93b$var$validationPathToErrorString","VisibilityMonitor","visibilityChange","hidden","visible_","visible","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","$a9d69158b154a93b$var$RECONNECT_MIN_DELAY","realtime_","$a9d69158b154a93b$var$OnlineMonitor","getInstance","on","onOnline_","action","onResponse","curReqNum","requestNumber_","connected_","requestCBHash_","initConnection_","_path","query4","currentHashFn","tag","queryId","listens","listenSpec","sendListen_","get1","outstandingGets_","sendRequest","outstandingGetCount_","query5","_queryIdentifier","req","_queryObject","hashFn","status","warnOnListenWarnings_","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","isValidFormat","requestData","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","query6","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","hash","putInternal","outstandingPuts_","outstandingPutCount_","queued","errorReason","reqNum","onDataPush_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","maxReconnectDelay_","online","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","min","onDataMessage","onReady","onDisconnect6","onRealtimeDisconnect_","nextConnectionId_","canceled","sendRequestFn","closeFn","forceTokenRefresh_","t1","ref1","connection","$a9d69158b154a93b$var$Connection","t2","interruptReasons_","delta","put","query7","q","removeListen_","listen","normalizedPathString","map1","statusCode","explanation","invalidAuthTokenCount_","notifyForInvalidToken","tryAuth","queries","setMaxNode","MAX_NODE","i3","sendGet_","clientName","isReactNative","reportStats","isEmpty","warnings","safeGet","indexSpec","query8","_queryParams","getIndex","node","NamedNode","Index","compare","oldNode","newNode","oldWrapped","$a9d69158b154a93b$var$NamedNode","newWrapped","MIN","KeyIndex","assertionError","$a9d69158b154a93b$var$KeyIndex","startKey","comparator","isReverse_","SortedMapIterator","cmp","right","nodeStack_","left","resultGenerator_","LLRBNode","color","RED","$a9d69158b154a93b$var$SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","copy","insert","fixUp_","smallest","isRed_","rotateRight_","moveRedRight_","removeMin_","colorFlip_","rotateLeft_","nl","nr","blackDepth","check_","BLACK","LLRBEmptyNode","$a9d69158b154a93b$var$LLRBNode","comparator_","SortedMap","root_","rightParent","minKey","setPriorityMaxNode","resultGenerator","$a9d69158b154a93b$var$SortedMapIterator","$a9d69158b154a93b$var$NAME_ONLY_COMPARATOR","$a9d69158b154a93b$var$NAME_COMPARATOR","$a9d69158b154a93b$var$LLRBEmptyNode","priority","$a9d69158b154a93b$var$doubleToIEEE754String","isLeafNode","priorityNode","$a9d69158b154a93b$var$MAX_NODE$2","getPriority","value_","priorityNode_","newPriorityNode","LeafNode","childName","__childrenNodeConstructor","childNode","newChildNode","front","$a9d69158b154a93b$var$pathGetFront","updateImmediateChild","updateChild","exportFormat","getValue","lazyHash_","toHash","$a9d69158b154a93b$var$priorityHashText","$l5bVx","$a9d69158b154a93b$var$sha1","otherLeafType","otherLeaf","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","$a9d69158b154a93b$var$__childrenNodeConstructor","PriorityIndex","aPriority","bPriority","compareTo","indexCmp","$a9d69158b154a93b$var$PriorityIndex","Base12Num","num","$a9d69158b154a93b$var$LOG_2","bits_","mask","childList","keyFn","mapSortFn","namedNode","low","buildBalancedTree","middle","high","base12","chunkSize","childTree","pennant","root","chunkSize1","root1","indexSet_","IndexMap","indexes_","indexKey","sortedMap","indexDefinition","existingChildren","$a9d69158b154a93b$var$KEY_INDEX","newIndex","getNext","sawIndexedValue","isDefinedOn","$a9d69158b154a93b$var$buildChildSet","getCompare","$a9d69158b154a93b$var$fallbackObject","indexName","newIndexes","indexedChildren","existingSnap","newChildren","$a9d69158b154a93b$var$PRIORITY_INDEX","$a9d69158b154a93b$var$_defaultIndexMap","children_","indexMap_","ChildrenNode","child2","$a9d69158b154a93b$var$EMPTY_NODE","newIndexMap","addToIndexes","newPriority","newImmediateChild","getImmediateChild","numKeys","allIntegerKeys","forEachChild","INTEGER_REGEXP_","array","childHash","idx","resolveIndex_","predecessor1","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","Wrap","peek","getReverseIteratorFrom","maxPost","endPost","$a9d69158b154a93b$var$MAX_NODE","hasIndex","addIndex","otherChildrenNode","otherIter","getIterator","thisCurrent","thisIter","otherCurrent","$a9d69158b154a93b$var$IndexMap","Default","ChildrenNode1","MaxNode","$a9d69158b154a93b$var$ChildrenNode","__EMPTY_NODE","$a9d69158b154a93b$var$nodeFromJSON","json","jsonLeaf","$a9d69158b154a93b$var$LeafNode","$a9d69158b154a93b$var$each","childData","children","childrenHavePriority","hinzeJsonObj","child3","sortedChildSet","childSet","$a9d69158b154a93b$var$PathIndex","PathIndex","indexPath_","snap","getChild","extractChild","aChild","bChild","valueNode","name6","$a9d69158b154a93b$var$pathSlice","ValueIndex","MAX","indexValue","name7","$a9d69158b154a93b$var$ValueIndex","$a9d69158b154a93b$var$changeValue","snapshotNode","$a9d69158b154a93b$var$changeChildAdded","$a9d69158b154a93b$var$changeChildRemoved","$a9d69158b154a93b$var$changeChildChanged","oldSnap","IndexedFilter","isIndexed","index_","oldChild","affectedPath","newChild","optChangeAccumulator","hasChild","trackChildChange","withIndex","newSnap","updatePriority","RangedFilter","$a9d69158b154a93b$var$IndexedFilter","getStartPost_","endPost_","getEndPost_","startPost_","getStartPost","getEndPost","indexedFilter_","filtered","matches","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","endName","getIndexEndName","LimitedFilter","rangedFilter_","$a9d69158b154a93b$var$RangedFilter","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","iterator1","getReverseIterator","indexCompare","count1","foundStartPost","oldEventCache","newChildNamedNode","childKey","childSnap","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","changeAccumulator","newEventCache","QueryParams","startSet_","startAfterSet_","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","limitSet_","loadsAllData","copy1","endNameSet_","indexEndName_","$a9d69158b154a93b$var$queryParamsToRestQueryStringParameters","queryParams","isDefault","orderBy","$a9d69158b154a93b$var$VALUE_INDEX","qs","$a9d69158b154a93b$var$queryParamsGetQueryObject","viewFrom","$a9d69158b154a93b$var$ReadonlyRestClient","ReadonlyRestClient","listens_","query9","listenId","getListenId_","thisListen","queryStringParameters","query10","query11","restRequest_","param","_param","_this7","querystring","xhr","XMLHttpRequest","responseText","query12","SnapshotHolder","rootNode_","newSnapshotNode","$a9d69158b154a93b$var$newSparseSnapshotTree","$a9d69158b154a93b$var$sparseSnapshotTreeRemember","sparseSnapshotTree","clear","tree","prefixPath","OperationType1","$a9d69158b154a93b$var$StatsListener","StatsListener","collection_","last_","newStats","stat","$a9d69158b154a93b$var$StatsReporter","StatsReporter","collection","server_","statsToReport_","statsListener_","referenceConstructor","reportedStats","haveStatsToReport","reportStats_","$a9d69158b154a93b$var$newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","$a9d69158b154a93b$var$OperationType","$a9d69158b154a93b$var$emptyChildrenSingleton","AckUserWrite","ACK_USER_WRITE","affectedTree","subtree","revert","$a9d69158b154a93b$var$ListenComplete","ListenComplete","$a9d69158b154a93b$var$pathIsEmpty","$a9d69158b154a93b$var$newEmptyPath","Overwrite","OVERWRITE","MERGE","Merge","$a9d69158b154a93b$var$CacheNode","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","filteredChanges","changes","change","eventGenerator","aWrapped","bWrapped","$a9d69158b154a93b$var$eventGeneratorCompareChanges","eventCache","prevName","getPredecessorChildName","respondsTo","events","createEvent","materializedChange","$a9d69158b154a93b$var$newViewCache","serverCache","$a9d69158b154a93b$var$viewCacheUpdateEventSnap","viewCache","eventSnap","$a9d69158b154a93b$var$viewCacheUpdateServerSnap","serverSnap","$a9d69158b154a93b$var$viewCacheGetCompleteEventSnap","getNode","$a9d69158b154a93b$var$viewCacheGetCompleteServerSnap","$a9d69158b154a93b$var$EmptyChildren","$a9d69158b154a93b$var$ImmutableTree","ImmutableTree","relativePath","predicate","child5","childExistingPathAndValue","findRootMostMatchingPathAndValue","$a9d69158b154a93b$var$pathChild","toSet","child7","child8","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","childPath","$a9d69158b154a93b$var$CompoundWrite","CompoundWrite","writeTree_","$a9d69158b154a93b$var$compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","newWriteTree1","$a9d69158b154a93b$var$compoundWriteAddWrites","updates","newWrite","$a9d69158b154a93b$var$compoundWriteRemoveWrite","empty","newWriteTree2","$a9d69158b154a93b$var$compoundWriteHasCompleteWrite","$a9d69158b154a93b$var$compoundWriteGetCompleteNode","$a9d69158b154a93b$var$compoundWriteGetCompleteChildren","$a9d69158b154a93b$var$compoundWriteChildCompoundWrite","shadowingNode","$a9d69158b154a93b$var$compoundWriteIsEmpty","$a9d69158b154a93b$var$compoundWriteApply","$a9d69158b154a93b$var$applySubtreeWrite","writeTree","errorPrefix","errorPrefixFxn","priorityWrite","$a9d69158b154a93b$var$writeTreeChildWrites","$a9d69158b154a93b$var$newWriteTreeRef","$a9d69158b154a93b$var$writeTreeGetWrite","writeId","allWrites","$a9d69158b154a93b$var$writeTreeRemoveWrite","removedWriteWasVisible","writeToRemove","removedWriteOverlapsWithOtherWrites","currentWrite","$a9d69158b154a93b$var$writeTreeRecordContainsPath_","$a9d69158b154a93b$var$pathContains","visibleWrites","$a9d69158b154a93b$var$writeTreeLayerTree_","$a9d69158b154a93b$var$writeTreeDefaultFilter_","$a9d69158b154a93b$var$writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","child10","deepNode","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","$a9d69158b154a93b$var$writeTreeCalcCompleteEventCache","writeTreeRef","$a9d69158b154a93b$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$a9d69158b154a93b$var$writeTreeCalcCompleteEventChildren","$a9d69158b154a93b$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$a9d69158b154a93b$var$writeTreeCalcEventCacheAfterServerOverwrite","$a9d69158b154a93b$var$writeTreeRefShadowingWrite","$a9d69158b154a93b$var$writeTreeShadowingWrite","$a9d69158b154a93b$var$writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","$a9d69158b154a93b$var$writeTreeCalcIndexedSlice","$a9d69158b154a93b$var$writeTreeRefCalcCompleteChild","existingServerCache","$a9d69158b154a93b$var$writeTreeCalcCompleteChild","$a9d69158b154a93b$var$writeTreeRefChild","$a9d69158b154a93b$var$ChildChangeAccumulator","ChildChangeAccumulator","changeMap","oldChange","oldType","$a9d69158b154a93b$var$NO_COMPLETE_CHILD_SOURCE","NoCompleteChildSource_","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","child11","viewProcessor","oldViewCache","operation","writesCache","completeCache","newViewCache1","filterServerNode","$a9d69158b154a93b$var$viewProcessorApplyUserOverwrite","accumulator","isFiltered","$a9d69158b154a93b$var$viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","$a9d69158b154a93b$var$viewProcessorCacheHasChild","ackUserWrite","$a9d69158b154a93b$var$writeTreeRefCalcCompleteEventCache","serverChildren","filtersNodes","$a9d69158b154a93b$var$viewProcessorRevertUserWrite","ackPath","name8","$a9d69158b154a93b$var$viewProcessorApplyServerMerge","changedChildren1","mergePath","serverCachePath","isCompleteForPath","$a9d69158b154a93b$var$viewProcessorAckUserWrite","newViewCache5","oldServerNode","getChanges","newViewCache2","isLeafOrEmpty","oldCompleteSnap","$a9d69158b154a93b$var$viewProcessorGenerateEventCacheAfterServerEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","newEventChild","childChangePath","eventChildUpdate","serverFilter","oldServerSnap","changedSnap","newServerNode","newServerCache","newViewCache4","$a9d69158b154a93b$var$WriteTreeCompleteChildSource","$a9d69158b154a93b$var$pathGetBack","$a9d69158b154a93b$var$pathParent","$a9d69158b154a93b$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","hasLimit","$a9d69158b154a93b$var$LimitedFilter","processor_","$a9d69158b154a93b$var$newViewProcessor","initialEventCache","initialServerCache","eventGenerator_","$a9d69158b154a93b$var$EventGenerator","query","cache","$a9d69158b154a93b$var$viewRemoveEventRegistration","view","eventRegistration","cancelError","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","$a9d69158b154a93b$var$viewApplyOperation","$a9d69158b154a93b$var$viewProcessorApplyOperation","$a9d69158b154a93b$var$viewGenerateEventsForChanges_","registrations","eventRegistrations","moves","indexedValueChanged","$a9d69158b154a93b$var$eventGeneratorGenerateEventsForType","$a9d69158b154a93b$var$SyncPoint","SyncPoint","syncPoint","views","optCompleteServerCache","view1","$a9d69158b154a93b$var$syncPointGetView","query13","serverCacheComplete","eventCacheComplete","$a9d69158b154a93b$var$syncPointAddEventRegistration","query14","initialChanges","query15","$a9d69158b154a93b$var$syncPointHasCompleteView","cancelEvents","viewQueryId","view2","$a9d69158b154a93b$var$viewIsEmpty","removed","hadCompleteView","$a9d69158b154a93b$var$referenceConstructor$1","_repo","query16","query17","$a9d69158b154a93b$var$SyncTree","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","lastWriteId","$a9d69158b154a93b$var$writeTreeAddOverwrite","syncTree","newData","$a9d69158b154a93b$var$syncTreeApplyOperationToSyncPoints_","$a9d69158b154a93b$var$Overwrite","$a9d69158b154a93b$var$syncTreeAckUserWrite","needToReevaluate","$a9d69158b154a93b$var$AckUserWrite","$a9d69158b154a93b$var$syncTreeApplyServerOverwrite","query18","$a9d69158b154a93b$var$syncPointIsEmpty","maybeSyncPoint","removedAndEvents","query19","removingDefault","covered","newViews","$a9d69158b154a93b$var$syncTreeCollectDistinctViewsForSubTree_","$a9d69158b154a93b$var$syncTreeCreateListenerForView_","startListening","$a9d69158b154a93b$var$syncTreeQueryForListening_","newQuery","$a9d69158b154a93b$var$syncTreeTagForQuery","stopListening","defaultTag","queryToRemove","tagToRemove","$a9d69158b154a93b$var$syncTreeMakeQueryKey_","$a9d69158b154a93b$var$syncTreeQueryKeyForTag_","queryPath","$a9d69158b154a93b$var$syncTreeAddEventRegistration","query20","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","$a9d69158b154a93b$var$syncPointGetCompleteServerCache","foreachChild","childSyncPoint","viewAlreadyExists","$a9d69158b154a93b$var$syncPointViewExistsForQuery","queryKey","$a9d69158b154a93b$var$syncPointViewForQuery","findOnPath","serverCache1","$a9d69158b154a93b$var$syncTreeGetServerValue","query21","serverCacheNode","$a9d69158b154a93b$var$syncTreeApplyOperationHelper_","syncPointTree","childOperation","childWritesCache","childServerCache","$a9d69158b154a93b$var$syncPointApplyOperation","query22","$a9d69158b154a93b$var$syncTreeParseQueryKey_","$a9d69158b154a93b$var$syncTreeApplyTaggedOperation_","$a9d69158b154a93b$var$syncTreeApplyTaggedListenComplete","$a9d69158b154a93b$var$syncTreeApplyListenComplete","query1","$a9d69158b154a93b$var$errorForServerCode","query23","splitIndex","query25","$a9d69158b154a93b$var$referenceConstructor","removedQuery","removedQueryKey","removedQueryTag","$a9d69158b154a93b$var$syncTreeNextQueryTag_","$a9d69158b154a93b$var$syncTreeSetupListener_","query26","view3","maybeChildSyncPoint","$a9d69158b154a93b$var$syncPointGetQueryViews","childQueries","$a9d69158b154a93b$var$ExistingValueProvider","ExistingValueProvider","$a9d69158b154a93b$var$DeferredValueProvider","DeferredValueProvider","path_","$a9d69158b154a93b$var$syncTreeCalcCompleteEventCache","syncTree_","$a9d69158b154a93b$var$resolveDeferredLeafValue","existingVal","serverValues","$a9d69158b154a93b$var$resolveComplexDeferredValue","op","existingNode","$a9d69158b154a93b$var$resolveDeferredValueTree","$a9d69158b154a93b$var$resolveDeferredValue","$a9d69158b154a93b$var$resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","$a9d69158b154a93b$var$Tree","Tree","parent","$a9d69158b154a93b$var$treeSubTree","pathObj","childCount","child13","$a9d69158b154a93b$var$treeSetValue","$a9d69158b154a93b$var$treeUpdateParents","$a9d69158b154a93b$var$treeHasChildren","$a9d69158b154a93b$var$treeForEachChild","child14","$a9d69158b154a93b$var$treeForEachDescendant","includeSelf","childrenFirst","child15","$a9d69158b154a93b$var$treeGetPath","child16","childEmpty","$a9d69158b154a93b$var$treeGetValue","$a9d69158b154a93b$var$treeIsEmpty","childExists","$a9d69158b154a93b$var$treeUpdateChild","$a9d69158b154a93b$var$INVALID_KEY_REGEX_","$a9d69158b154a93b$var$INVALID_PATH_REGEX_","$a9d69158b154a93b$var$validateFirebaseDataArg","fnName","$a9d69158b154a93b$var$validateFirebaseData","errorPrefix1","$a9d69158b154a93b$var$ValidationPath","$a9d69158b154a93b$var$MAX_LEAF_SIZE_","hasDotValue","hasActualChild","child1","last","$a9d69158b154a93b$var$isValidPathString","search","creatorFunction","changeTree","fromObject","$a9d69158b154a93b$var$Merge","enableLoggingImpl","$4acf49f6c3e67aec$var$cachedSetTimeout","$4acf49f6c3e67aec$var$cachedClearTimeout","$4acf49f6c3e67aec$var$process","$4acf49f6c3e67aec$var$defaultSetTimout","$4acf49f6c3e67aec$var$defaultClearTimeout","$4acf49f6c3e67aec$var$runTimeout","fun","$4acf49f6c3e67aec$var$currentQueue","$4acf49f6c3e67aec$var$queue","$4acf49f6c3e67aec$var$draining","$4acf49f6c3e67aec$var$queueIndex","$4acf49f6c3e67aec$var$cleanUpNextTick","$4acf49f6c3e67aec$var$drainQueue","run","marker","$4acf49f6c3e67aec$var$runClearTimeout","$4acf49f6c3e67aec$var$Item","$4acf49f6c3e67aec$var$noop","nextTick","browser","argv","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","$d641968783c745ae$export$2e2bcd8739ae039","pas","$d520cd3cd9b83861$export$2e2bcd8739ae039","closeModal","stopPropagation","closest","currentCardId","dataset","$6ZdKR","$iY7oS","genreList","vote_count","popularity","original_title","overview","form_html","$lJO36","isFilmExistInWatched","isFilmExistInQueue","$jrZwl","actionWatch","actionQueue","$eb999ef253053d6e$var$axios","$eb999ef253053d6e$var$createInstance","defaultConfig","$9jbh3","$lGmLA","$c4C4W","extend","instanceConfig","$knWMA","Axios","CanceledError","CancelToken","isCancel","VERSION","toFormData","AxiosError","Cancel","promises","spread","isAxiosError","$8ca3655f37d9652c$var$toString","$8ca3655f37d9652c$var$kindOf","$8ca3655f37d9652c$var$kindOfTest","$8ca3655f37d9652c$var$isArray","$8ca3655f37d9652c$var$isUndefined","$8ca3655f37d9652c$var$isArrayBuffer","$8ca3655f37d9652c$var$isObject","$8ca3655f37d9652c$var$isPlainObject","$8ca3655f37d9652c$var$isDate","$8ca3655f37d9652c$var$isFile","$8ca3655f37d9652c$var$isBlob","$8ca3655f37d9652c$var$isFileList","$8ca3655f37d9652c$var$isFunction","$8ca3655f37d9652c$var$isURLSearchParams","$8ca3655f37d9652c$var$forEach","l","TypedArray","$8ca3655f37d9652c$var$isTypedArray","Uint8Array","isArrayBuffer","isBuffer","isFormData","pattern","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isObject","isPlainObject","isUndefined","isDate","isFile","isBlob","isFunction","isStream","pipe","isURLSearchParams","isStandardBrowserEnv","product","$8ca3655f37d9652c$var$merge","assignValue","thisArg","trim","stripBOM","content","inherits","superConstructor","descriptors","toFlatObject","sourceObj","destObj","merged","getOwnPropertyNames","kindOf","kindOfTest","endsWith","searchString","lastIndex","toArray","isTypedArray","isFileList","$6c6ea2375c06af66$var$validators","$9SeBc","validators","$6c6ea2375c06af66$var$Axios","defaults","interceptors","$JRZh2","configOrUrl","config","transitional","assertOptions","silentJSONParsing","boolean","forcedJSONParsing","clarifyTimeoutError","requestInterceptorChain","synchronousRequestInterceptors","interceptor","runWhen","synchronous","unshift","fulfilled","rejected","responseInterceptorChain","chain","$k04r0","newConfig","onFulfilled","onRejected","getUri","fullPath","$gYMA1","baseURL","$6d5Pb","paramsSerializer","generateHTTPMethod","isForm","$4858799f155a4706$var$encode","serializedParams","hashmarkIndex","$089e14d5c08cea15$var$InterceptorManager","handlers","use","eject","h","$03c1ec60679d4a92$var$throwIfCancellationRequested","cancelToken","throwIfRequested","signal","aborted","$dW1zJ","$jrAxF","transformRequest","common","adapter","$c74ni","transformResponse","$lXDKh","fns","$8d19883a18ea96be$var$DEFAULT_CONTENT_TYPE","$8d19883a18ea96be$var$setContentTypeIfUnset","$8d19883a18ea96be$var$defaults","$gWbUy","$h8JMh","isObjectPayload","contentType","_FormData","$12Kat","rawValue","parser","encoder","$8d19883a18ea96be$var$stringifySafely","strictJSONParsing","responseType","$5TB86","ERR_BAD_RESPONSE","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","Accept","normalizedName","toUpperCase","$44aee3fe793a4c74$var$AxiosError","toJSON","description","number","fileName","lineNumber","columnNumber","$44aee3fe793a4c74$var$prototype","$44aee3fe793a4c74$var$descriptors","defineProperties","customProps","axiosError","formData","convertValue","Blob","$0c29ca57d54f85e9$require$Buffer","build","parentKey","fullKey","el","append","$24f87a6f86a8996f$export$a143d493d941bafc","$24f87a6f86a8996f$export$f99ded8fe4b79145","$24f87a6f86a8996f$var$customInspectSymbol","$24f87a6f86a8996f$var$Buffer","$24f87a6f86a8996f$var$K_MAX_LENGTH","$24f87a6f86a8996f$var$createBuffer","RangeError","buf","encodingOrOffset","$24f87a6f86a8996f$var$allocUnsafe","$24f87a6f86a8996f$var$from","string","encoding","isEncoding","$24f87a6f86a8996f$var$byteLength","actual","$24f87a6f86a8996f$var$fromString","arrayView","$24f87a6f86a8996f$var$isInstance","$24f87a6f86a8996f$var$fromArrayBuffer","byteOffset","byteLength","$24f87a6f86a8996f$var$fromArrayLike","$24f87a6f86a8996f$var$fromArrayView","SharedArrayBuffer","$24f87a6f86a8996f$var$checked","$24f87a6f86a8996f$var$numberIsNaN","$24f87a6f86a8996f$var$fromObject","toPrimitive","$24f87a6f86a8996f$var$assertSize","mustMatch","loweredCase","$24f87a6f86a8996f$var$utf8ToBytes","$24f87a6f86a8996f$var$base64ToBytes","$24f87a6f86a8996f$var$slowToString","end","$24f87a6f86a8996f$var$hexSlice","$24f87a6f86a8996f$var$utf8Slice","$24f87a6f86a8996f$var$asciiSlice","$24f87a6f86a8996f$var$latin1Slice","$24f87a6f86a8996f$var$base64Slice","$24f87a6f86a8996f$var$utf16leSlice","$24f87a6f86a8996f$var$swap","$24f87a6f86a8996f$var$bidirectionalIndexOf","$24f87a6f86a8996f$var$arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","$24f87a6f86a8996f$var$hexWrite","offset","strLen","parsed","$24f87a6f86a8996f$var$utf8Write","$24f87a6f86a8996f$var$blitBuffer","$24f87a6f86a8996f$var$asciiWrite","byteArray","$24f87a6f86a8996f$var$asciiToBytes","$24f87a6f86a8996f$var$base64Write","$24f87a6f86a8996f$var$ucs2Write","units","hi","lo","$24f87a6f86a8996f$var$utf16leToBytes","$5d11t","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","$24f87a6f86a8996f$var$MAX_ARGUMENTS_LENGTH","$24f87a6f86a8996f$var$decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","$24f87a6f86a8996f$var$typedArraySupport","poolSize","alloc","fill","$24f87a6f86a8996f$var$alloc","allocUnsafe","allocUnsafeSlow","_isBuffer","x","y","swap16","swap32","swap64","toLocaleString","inspect","thisStart","thisEnd","thisCopy","targetCopy","isFinite","_arr","ret","$24f87a6f86a8996f$var$hexSliceLookupTable","$24f87a6f86a8996f$var$checkOffset","ext","$24f87a6f86a8996f$var$checkInt","$24f87a6f86a8996f$var$wrtBigUInt64LE","$24f87a6f86a8996f$var$checkIntBI","BigInt","$24f87a6f86a8996f$var$wrtBigUInt64BE","$24f87a6f86a8996f$var$checkIEEE754","$24f87a6f86a8996f$var$writeFloat","littleEndian","noAssert","$7rddL","$24f87a6f86a8996f$var$writeDouble","newBuf","subarray","readUintLE","readUIntLE","byteLength1","mul","readUintBE","readUIntBE","byteLength2","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","$24f87a6f86a8996f$var$defineBigIntMethod","$24f87a6f86a8996f$var$validateNumber","first","$24f87a6f86a8996f$var$boundsError","readBigUInt64BE","readIntLE","byteLength3","readIntBE","byteLength4","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","byteLength5","writeUintBE","writeUIntBE","byteLength6","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","byteLength7","limit","writeIntBE","byteLength8","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","$24f87a6f86a8996f$var$errors","$24f87a6f86a8996f$var$E","getMessage","Base1","Base","NodeError","$24f87a6f86a8996f$var$addNumericalSeparator","byteLength10","range","ERR_OUT_OF_RANGE","byteLength9","$24f87a6f86a8996f$var$checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","abs","$24f87a6f86a8996f$var$INVALID_BASE64_RE","leadSurrogate","toByteArray","$24f87a6f86a8996f$var$base64clean","dst","alphabet","table","i16","$24f87a6f86a8996f$var$BufferBigIntNotDefined","$3caef5c332c7293f$export$d622b2ad8d90c771","$3caef5c332c7293f$export$6100ba28696e12de","b64","tmp","lens","$3caef5c332c7293f$var$getLens","validLen","placeHoldersLen","$3caef5c332c7293f$var$Arr","$3caef5c332c7293f$var$_byteLength","curByte","len2","$3caef5c332c7293f$var$revLookup","uint8","len3","extraBytes","maxChunkLength","$3caef5c332c7293f$var$encodeChunk","$3caef5c332c7293f$var$lookup","$3caef5c332c7293f$var$code","$3caef5c332c7293f$var$i","$3caef5c332c7293f$var$len","len1","i2","$56a54f6ebabce67d$export$aafa59e2e03f2942","$56a54f6ebabce67d$export$68d8715fc104d294","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","LN2","onCanceled","requestHeaders","unsubscribe","username","unescape","Authorization","onloadend","responseHeaders","$1nUSP","getAllResponseHeaders","statusText","$j97bH","responseURL","onabort","ECONNABORTED","ERR_NETWORK","ontimeout","timeoutErrorMessage","ETIMEDOUT","xsrfValue","withCredentials","$9jFfm","$jFG8L","setRequestHeader","onDownloadProgress","onUploadProgress","upload","cancel","abort","subscribe","$4ULKu","ERR_BAD_REQUEST","expires","cookie","toGMTString","decodeURIComponent","requestedURL","$7xjuH","$ftRZn","relativeURL","$102410410d0dc09d$var$ignoreDuplicateOf","line","originURL","msie","urlParsingNode","resolveURL","setAttribute","port","pathname","requestURL","$a251e9fa67c89486$var$CanceledError","ERR_CANCELED","__CANCEL__","exec","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","timeoutMessage","decompress","beforeRedirect","httpAgent","httpsAgent","socketPath","responseEncoding","configValue","$73047b42f9e782d3$var$validators","$73047b42f9e782d3$var$deprecatedWarnings","validator","formatMessage","opt","desc","$73047b42f9e782d3$require$VERSION","ERR_DEPRECATED","schema","allowUnknown","ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","$52ff30ac6ac58fe8$var$CancelToken","executor","resolvePromise","_listeners","onfulfilled","_resolve","$dcf392246d28f9b0$export$2e2bcd8739ae039","$51631c0049e58842$var$_getMovieDetails","api_key","movie_id","$dIxxU","$51631c0049e58842$export$2e2bcd8739ae039","$e29042a692cc87fe$export$a66669cec878639","filmData","createWithoutAuth","textContent","removeWithoutAuth","$e29042a692cc87fe$export$bd8f2a4eafd013c2"],"version":3,"file":"library.fda4941e.js.map"}